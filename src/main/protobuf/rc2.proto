/*
 * Copyright  2019 Blockchain Technology and Application Joint Lab, Linkel Technology Co., Ltd, Beijing, Fintech Research Center of ISCAS.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BA SIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";
package rep.proto;
option java_package = "rep.proto";
import "google/protobuf/timestamp.proto";
/*
*/
//Event 用于图形展示的事件
message Event {
    //来源addr
    string from = 1;
    //发送addr，如果是广播（需要定义一个）
    string to = 2;
    //event事件
    enum Action {
        SUBSCRIBE_TOPIC = 0;//订阅主题
        TRANSACTION = 1;//签名交易
        BLOCK_NEW = 2;//新出区块
        BLOCK_ENDORSEMENT = 3;//区块背书请求
        ENDORSEMENT = 4;//背书
        MEMBER_UP = 5;//组网节点入网
        MEMBER_DOWN = 6;//组网节点离网
        CANDIDATOR = 7;//下轮抽签
        GENESIS_BLOCK = 8;//创世块加载
        BLOCK_SYNC = 9;//区块同步请求
        BLOCK_SYNC_DATA = 10;//区块同步
        BLOCK_SYNC_SUC = 11;//区块同步完成
    }
    Action action = 3;
    Block blk = 4;//事件关联区块
}

//账户
message Signer{
    string 	name = 1;//注册者的名称或者昵称
    string 	credit_code = 2;//社会信用代码（个人或机构）或者DID，推荐使用DID
    string 	mobile = 3;  // 手机号码,用于接收通知
    repeated 	string 	cert_names  = 4;//存放用户所有证书的名称，用户具体的证书单独存放，方便证书的操作，用户在增加证书的时候，在这个列表中增加证书的名称，did_certname。
    repeated 	string 	authorize_ids  = 5;//存放用户所有授权的操作id。
    repeated 	string 	operate_ids  = 6;//存放用户所有注册的操作id。
    repeated 	string 	credential_metadata_ids  = 7;//存放用户凭据id。
    repeated    Certificate authentication_certs = 8;//存放身份验证证书
    string	signer_info = 9;//存放用户身份的详细信息，采用json格式。通常不用存储，由身份管理者存储
    google.protobuf.Timestamp 	create_time = 10; //建立时间
    google.protobuf.Timestamp 	disable_time = 11; //禁用时间
    bool    signer_valid = 12;//是否有效，默认有效，否则为禁用，值=false
    string	version=13 ;//默认1.0
}

//账户证书标示
message CertId {
    string 	credit_code = 1;//社会信用代码（个人或机构）或者DID，推荐使用DID
    string 	cert_name = 2;//当前用户注册证书的名称
    string	version=3;//默认1.0
}

//账户证书标示
message Certificate {
    string 	certificate = 1; //内含签发机构
    string 	alg_type = 2;//直接填写具体算法，如:ECDSA下的SHA1withECDSA,SHA512withECDSA等
    bool   	cert_valid = 3;//证书是否有效，true 有效；false 无效；protobuf默认该值为false
    google.protobuf.Timestamp 	reg_Time = 4; //注册时间
    google.protobuf.Timestamp 	unreg_Time = 5; //注销时间
    enum CertType {
        CERT_UNDEFINED = 0;//未定义证书类型
        CERT_AUTHENTICATION = 1;//1=普通证书
        CERT_CUSTOM = 2;//2=身份验证证书
    }
    CertType 	cert_type = 6; //证书类型
    CertId 	id = 7; //证书名称
    string 	cert_hash = 8;//证书的SHA256
    string	version=9;//默认1.0
}
//授权操作
message	Operate{
    string 	op_id = 1;//操作的id，通过uuid自动生成，合约需要查重
    string	description = 2;//操作的描述，用于显示
    string	register = 3;//操作的注册者，使用credit code或者rdid
    bool	is_publish = 4;//操作是否属于公开，公开表示不需要授权，只要拥有rdid就可以调用；不公开，需要授权；默认false
    enum OperateType {
        OPERATE_UNDEFINED = 0;//未定义操作类型
        OPERATE_CONTRACT = 1;//合约操作类型，需要提供合约方法的访问；
        OPERATE_SERVICE = 2;//服务操作类型，服务类型只需要提供服务器和服务名就可以；
    }
    OperateType operate_type = 5;//操作类型表示是否属于服务类型；
    repeated    string	operate_service_name = 6;//服务名称
    string	operate_endpoint = 7;//服务器地址
    string	auth_full_name = 8;//限制内容，具体操作限制，如访问的链的合约的方法
    google.protobuf.Timestamp 	create_time = 9; //建立时间
    google.protobuf.Timestamp 	disable_time = 10; //禁用时间
    bool    op_valid = 11;//是否有效，默认有效，否则为禁用，值=false
    string	version=12;//默认1.0
}
//授权
message Authorize{
    string 	id = 1;//权限id
    string	grant = 2;//授权者，credit code或者rdid
    repeated    string 	granted = 3;//操作权限的被授予者,credit code或者rdid
    repeated    string	op_id = 4;//操作id
    enum TransferType {
        TRANSFER_DISABLE = 0;//权限让渡类型-不能让渡；
        TRANSFER_ONCE = 1;//权限让渡类型-让渡一次；
        TRANSFER_REPEATEDLY = 2;//权限让渡类型-可以无限次让渡
    }
    TransferType 	is_transfer = 5;//权限让渡类型-
    google.protobuf.Timestamp 	create_time = 6; //建立时间
    google.protobuf.Timestamp 	disable_time = 7; //禁用时间
    bool    authorize_valid = 8;//是否有效，默认有效，否则为禁用，值=false
    string	version=9;//版本号,默认1.0
}
//授权目标账户证书
message BindCertToAuthorize{
    string authorize_id = 1 ;//权限id
    CertId granted = 2;//目标账户的证书Id
    string	version=3;//版本号，默认1.0
}
//凭据
message Credential{
    string	id=1;//凭据id，用于查询方便
    string	credential_type = 2;//凭据数据的类型
    string	credential_type_version=3 ;//凭据数据的类型的版本
    CertId 	granter = 4;//凭据的授予人
    google.protobuf.Timestamp	grant_time = 5;//凭据的发放授予时间
    string		credential_holder = 6;//凭据的持有人，使用did
    string		credential_content = 7;//凭据的内容
    string		credential_content_hash  = 8;//凭据内容的hash，算法为SHA256
    string		signature_alg_type  = 9;//签名算法
    string		signature_value  = 10;//签名值
    bool		credential_valid = 11;//凭据是否有效
    string		version=12;//默认1.0
}
//凭据元数据定义
message  MetadataDefine{
    string	key = 1;//元数据名
    bool  is_open = 2;//是否可见
    repeated    MetadataDefine  childs = 3;//子凭据元数据定义
}
//凭据内容元数据
message CredentialContentMetadata{
    string	id=1;//ccm id 凭据内容元数据id
    string	 	publisher = 2;//凭据元数据的发布者的did
    repeated	MetadataDefine  metadata = 3;//凭据元数据定义
    string	meta_version = 4;//元数据版本
    google.protobuf.Timestamp update_time = 5; //建立时间
    string	version = 6;//凭据内容版本
}


//签名，可用于Transaction签名和Block签名
message Signature {
    //证书标识
    CertId cert_id = 1;
    google.protobuf.Timestamp tm_local = 2; //签名时间
    //签名数据
    bytes signature = 3;
}

//合约方法调用及实际参数
message ChaincodeInput {
    string function = 1;//合约方法名称
    repeated string args  = 2;//合约方法参数
}
//指定合约名称和版本,确定唯一的合约代码标识
message ChaincodeId {
    string chaincodeName = 1;//合约名称
    int32 version = 2;//合约版本号
}
message Block {
    //区块头
    BlockHeader header=1;
    //顺序排列的交易
    repeated Transaction transactions = 3;
    //错误交易类型及原因
    repeated TransactionError transaction_errors = 4;
    //轻节点验证：区块读取状态集合，参与hashOfBlock
    map<string, bytes> states_get = 13;
    //轻节点验证：区块写入/迁移状态集合，参与hashOfBlock
    map<string, bytes> states_set = 14;
    //内容监管：监管结论交易，带区块高度参数，配置为是否强制，
    //可以是针对本区块的监管结论，也可以是针对历史区块的监管结论
    Transaction reg_tx = 15;
}

message BlockHeader {
    // version - 区块数据版本,以便数据格式升级
    uint32 version = 1;
    // 区块高度, 从1开始
    uint64 height = 2;
    //区块内交易存在性承诺，root value
    bytes commit_tx = 3;
    // 出错交易非成员承诺，由于出错交易也会打入区块，
    //所以在出具交易存在性证明同时，需要出具该交易不在出错交易集合中的证明
    //区块内错误交易存在性承诺
    bytes commit_tx_err = 4;
    //当前区块Hash
    bytes hash_present = 5;
    //前一区块Hash
    bytes hash_previous = 6;
    //状态在区块内的存在性承诺
    bytes commit_state = 7;
    //全局非过期状态不存在承诺，证明某个状态当前没有更新的值。
    //将更新的状态复合名（状态名+版本号）写入到该承诺
    bytes commit_state_global = 8;
    //过期区块高度
    uint64 height_expired = 9;
    //背书签名集合,必须包含出块人签名,不参与hashOfBlock
    repeated Signature endorsements=10;
}

//异常交易出错描述
message TransactionError {
    //唯一标识一个Transaction
    string txId = 1;
    //异常代码
    int32 code = 2;
    //异常原因描述
    string reason = 3;
}
//交易执行结果
message TransactionResult {
    //唯一标识一个Transaction
    string txId = 1;
    //交易读取状态集合
    map<string, bytes> states_get = 2;
    //交易写入/迁移状态集合
    map<string, bytes> states_set = 3;
    ActionResult err = 4;
}

//签名交易
message Transaction {
    string id = 1;
    enum Type {
        UNDEFINED = 0;
        // 用于部署合约的签名交易
        CHAINCODE_DEPLOY = 1;
        // 用于调用合约方法的签名交易
        CHAINCODE_INVOKE = 2;
        // 用于启用/禁用合约的签名交易
        CHAINCODE_SET_STATE = 3;
    }
    Type type = 2;//签名交易类型
    ChaincodeId cid = 3; //合约标识
    oneof para {
        ChaincodeDeploy spec = 4;//部署合约的签名交易方法参数
        ChaincodeInput ipt = 5;//调用合约的签名交易方法参数
        bool state = 6;//启用/禁用合约的签名交易方法参数
    }
    //可选，如果有设置按照预设的资源消耗,超出则终止执行；否则不限制。
    uint32 gas_limit = 7;
    //重放举证：交易实例Id，可选, 导出实例时，要求提供同一区块内部，
    //同一合约实例的交易顺序及证明
    //默认空为全局的实例id，
    string oid = 8;
    //交易签发者签名
    Signature signature = 9;
}


// 合约定义,部署/升级
message ChaincodeDeploy {
    //部署超时
    int32 timeout = 1;
    //完整的代码内容
    string code_package = 2;
    //合约规则的法律描述文本
    string legal_prose =3;
    //合约语言类型
    enum CodeType {
        CODE_UNDEFINED = 0;//未定义合约语言
        CODE_JAVASCRIPT = 1;//JavaScript合约语言
        CODE_SCALA = 2;//Scala合约语言
        //合约多语言：vcl合约
        //VCL 以动态库加载执行
        CODE_VCL_DLL = 3;
        //VCL 以可执行代码加载执行
        CODE_VCL_EXE = 4;
        //VCL 以WASM加载执行
        CODE_VCL_WASM = 5;
        //WASM字节码合约
        CODE_WASM = 6;
    }
    CodeType c_type = 4;//合约语言类型
    //指定串行并行执行
    enum RunType {
        RUN_UNDEFINED = 0;
        //指定串行执行
        RUN_SERIAL = 1;
        //指定并行执行
        RUN_PARALLEL= 2;
        //由调度模块决定
        RUN_OPTIONAL = 3;
    }
    RunType r_type = 5;//合约串行/并行调度类型
    //轻节点证明：合约可决定是否需要在全局状态中维护存在性证明
    //例如:存证类合约，由于状态值不会反复修改，无需全局存在性证明
    enum StateType {
        STATE_UNDEFINED = 0;//未定义模式
        STATE_BLOCK = 1;//区块内状态证明，用于存证类合约
        STATE_GLOBAL= 2;//全局状态证明，用于资产类合约
    }
    StateType s_type = 6;//合约状态证明模式
    string init_parameter=7;//合约初始化参数
    //合约分级 系统合约 用户合约
    enum ContractClassification {
        CONTRACT_UNDEFINED = 0;//未定义等级
        CONTRACT_SYSTEM = 1;//系统内置合约
        CONTRACT_CUSTOM = 2;//用户合约
    }
    ContractClassification  cclassification = 8;//合约等级
}
//合约方法返回
message ActionResult{
    //异常编号
    int32 code = 1;
    //异常原因
    string reason = 2;
}

// 状态存在性证明
message StateProof{
    string key=1;//状态名
    bytes value=2;//状态值
    bytes proof=3;//状态存在性证明
}
//链概要信息
message BlockchainInfo {
    uint64 height = 1;//当前高度
    uint64 totalTransactions = 2;//签名交易总数
    bytes  currentBlockHash = 3;//当前区块Hash
    bytes  previousBlockHash = 4;//前一区块Hash
    bytes  currentStateHash = 5;//当前账本状态承诺
}

