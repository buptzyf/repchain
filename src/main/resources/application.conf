akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  # Options: ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  cluster {
    akka.cluster.log-info = on
    log-info-verbose = on
    #jmx.enabled = on
    jmx.multi-mbeans-in-same-jvm = on
    #min-nr-of-members = 4
  }
  actor {
    serialize-messages = off
    serialize-creators = off
    enable-additional-serialization-bindings = on
    allow-java-serialization = off
    #provider = "akka.cluster.ClusterActorRefProvider"
    provider = "cluster"
    serializers {
      kryo = "com.twitter.chill.akka.AkkaSerializer"
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "java.lang.String" = java
      "java.io.Serializable" = kryo
      "com.google.protobuf.Message" = proto
      "scalapb.GeneratedMessage" = proto
    }

  }


  remote {
#classic模式下的配置
classic {
  netty.tcp {
    //在单机单节点的情况下配置机器ip
    #hostname=192.168.10.155
    #hostname = 192.168.31.155
    hostname = 127.0.0.1
    //在单机单节点的情况下需要配置具体的端口；在单机多节点的情况下直接配置为0
    //port = 0
    //port=8082//0，automatic assign
    //internal (bind) hostname
    //bind-hostname=192.168.1.129
    //bind-port=8082
  }

  netty.ssl.security {
    //基础路径，证书的存放路径，建议不要修改
    base-path = "jks/"
    //名称前缀，证书的名称前缀，不要修改
    base-name = ""
    //证书的别名，需要跟节点的名称要保持一致
    alias = "121000005l35120456.node1"

    //用户ca文件密码
    key-store-password = "123"
    //用户证书密码
    key-password = "123"
  }
}


    artery {

      # Disable artery with this flag
      enabled = on

      # Select the underlying transport implementation.
      # Possible values: aeron-udp, tcp, tls-tcp
      transport = tls-tcp
      #log-received-messages = on
      #log-sent-messages = on
      advanced {

        # Maximum serialized message size, including header data.
        maximum-frame-size = 5120 KiB

        # Direct byte buffers are reused in a pool with this maximum size.
        # Each buffer has the size of 'maximum-frame-size'.
        # This is not a hard upper limit on number of created buffers. Additional
        # buffers will be created if needed, e.g. when using many outbound
        # associations at the same time. Such additional buffers will be garbage
        # collected, which is not as efficient as reusing buffers in the pool.
        buffer-pool-size = 256

        # Maximum serialized message size for the large messages, including header data.
        # It is currently restricted to 1/8th the size of a term buffer that can be
        # configured by setting the 'aeron.term.buffer.length' system property.
        # See 'large-message-destinations'.
        maximum-large-frame-size = 5 MiB

        # Direct byte buffers for the large messages are reused in a pool with this maximum size.
        # Each buffer has the size of 'maximum-large-frame-size'.
        # See 'large-message-destinations'.
        # This is not a hard upper limit on number of created buffers. Additional
        # buffers will be created if needed, e.g. when using many outbound
        # associations at the same time. Such additional buffers will be garbage
        # collected, which is not as efficient as reusing buffers in the pool.
        large-buffer-pool-size = 64

        outbound-message-queue-size = 30720

        #inbound-lanes = 1


        #outbound-lanes = 1


      }

      # SSL configuration that is used when transport=tls-tcp.
      ssl {
        # Factory of SSLEngine.
        # Must implement akka.remote.artery.tcp.SSLEngineProvider and have a public
        # constructor with an ActorSystem parameter.
        # The default ConfigSSLEngineProvider is configured by properties in section
        # akka.remote.artery.ssl.config-ssl-engine

        #ssl-engine-provider = akka.remote.artery.tcp.ConfigSSLEngineProvider
        ssl-engine-provider = akka.remote.artery.tcp.ConfigSSLEngineProvider
        #ssl-engine-provider = rep.crypto.GMSSLEngineProvider
        # Config of akka.remote.artery.tcp.ConfigSSLEngineProvider
        config-ssl-engine {
            base-path = "jks/"
            key-store = "jks/121000005l35120456.node1.jks"
            trust-store = "jks/mytruststore.jks"   // 加载信任列表证书用的_tls1.3
            #trust-store = "jks/mytrust"    // ssl用的_ca
            trust-store-mm = "jks/mytruststore.jks"   // 加载信任列表证书用的_origin

            key-store-password = "123"
            key-password = "123"
            trust-store-password = "changeme"      // 加载信任列表证书用的_tls1.3
            #trust-store-password = "changeit"    // ssl用的_ca
            trust-store-password-mm = "changeme"   // 加载信任列表证书用的_origin

            protocol = "TLSv1.2"
            #enabled-algorithms = [TLS_AES_128_GCM_SHA256]
            enabled-algorithms = [TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256]
            #require-mutual-authentication = on
            random-number-generator = "SecureRandom"

            # Require mutual authentication between TLS peers
            #
            # Without mutual authentication only the peer that actively establishes a connection (TLS client side)
            # checks if the passive side (TLS server side) sends over a trusted certificate. With the flag turned on,
            # the passive side will also request and verify a certificate from the connecting peer.
            #
            # To prevent man-in-the-middle attacks this setting is enabled by default.
            require-mutual-authentication = on

            # Set this to `on` to verify hostnames with sun.security.util.HostnameChecker
            hostname-verification = off
        }
      }
    }
  }


  //创世块
  genesisblock {
    creationBlockTime = 1495451252086
  }

}
contract-dispatcher {
            #executor = “thread-pool-executor”
            #type = Dispatcher
              type = Dispatcher
              # What kind of ExecutionService to use
              executor = "fork-join-executor"
              # Configuration for the fork join pool
              fork-join-executor {
                # Min number of threads to cap factor-based parallelism number to
                parallelism-min = 1
                # Parallelism (threads) . . . ceil(available processors * factor)
                parallelism-factor = 2.0
                # Max number of threads to cap factor-based parallelism number to
                parallelism-max = 3
              }
              # Throughput defines the maximum number of messages to be
              # processed per actor before the thread jumps to the next actor.
              # Set to 1 for as fair as possible.
              throughput = 10
        }

http-dispatcher {
            #executor = “thread-pool-executor”
            #type = Dispatcher
              type = Dispatcher
              # What kind of ExecutionService to use
              executor = "fork-join-executor"
              # Configuration for the fork join pool
              fork-join-executor {
                # Min number of threads to cap factor-based parallelism number to
                parallelism-min = 1
                # Parallelism (threads) . . . ceil(available processors * factor)
                parallelism-factor = 2.0
                # Max number of threads to cap factor-based parallelism number to
                parallelism-max = 2
              }
              # Throughput defines the maximum number of messages to be
              # processed per actor before the thread jumps to the next actor.
              # Set to 1 for as fair as possible.
              throughput = 100
        }

        consensus-dispatcher {
                    #executor = “thread-pool-executor”
                    #type = Dispatcher
                      type = Dispatcher
                      # What kind of ExecutionService to use
                      executor = "fork-join-executor"
                      # Configuration for the fork join pool
                      fork-join-executor {
                        # Min number of threads to cap factor-based parallelism number to
                        parallelism-min = 1
                        # Parallelism (threads) . . . ceil(available processors * factor)
                        parallelism-factor = 2.0
                        # Max number of threads to cap factor-based parallelism number to
                        parallelism-max = 2
                      }
                      # Throughput defines the maximum number of messages to be
                      # processed per actor before the thread jumps to the next actor.
                      # Set to 1 for as fair as possible.
                      throughput = 10
                }

