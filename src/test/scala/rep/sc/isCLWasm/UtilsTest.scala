package rep.sc.isCLWasm

import org.json4s.JsonAST.{JArray, JObject}
import org.scalatest._
import org.json4s.jackson.JsonMethods.parse

import java.io.FileInputStream
import scala.collection.mutable

class UtilsTest extends FunSpec with Matchers with BeforeAndAfterAll {
  var utils: Utils = null
  val filePathPrefix = "src/test/scala/rep/sc/isCLWasm/"

  override def beforeAll(): Unit = {
    utils = new Utils()
  }

  describe("The parseSmartContract method") {
    it("Should work well for a well input codePackage") {
      val codePackage = ""
      val smartContract = utils.parseSmartContract(codePackage)

      smartContract.isCLVersion should be(1)

      val codeBytes = new FileInputStream(filePathPrefix + "simple.wasm").readAllBytes
      smartContract.code should equal(codeBytes)

      val abiJsonString = new String(new FileInputStream(filePathPrefix + "simple.abi.json").readAllBytes).filterNot(_.isWhitespace)
      smartContract.abi should equal(abiJsonString)
    }

    it("Should throw error for a invalid input codePackage") {
      val codePackage = ""
      val exception = intercept[Exception] {
        utils.parseSmartContract(codePackage)
      }
      exception.getMessage should include("failed to verify the checksum of the deploying smart contract")
    }
  }

  describe("The genDefaultSerializedData method") {
    val abiJsonString = new String(new FileInputStream(filePathPrefix + "mock.abi.json").readAllBytes())
    val abiJson = parse(abiJsonString).asInstanceOf[JObject]
    val variables = abiJson.obj.find(item => item._1.equals("variables")).get._2.asInstanceOf[JObject]
    val structures = abiJson.obj.find(item => item._1.equals("structures")).get._2.asInstanceOf[JObject]
    val structuresMap = structures.obj.foldLeft(new mutable.HashMap[String, JArray]())((x, y) => {
      x(y._1) = y._2.asInstanceOf[JArray]
      x
    })
    it("Should generate the correct default serialized data for the int data type of isCL") {
      val structure = variables.obj.find(item => item._1.equals("_int")).get._2.asInstanceOf[JObject];
      val res = utils.genDefaultSerializedData(null, structure, null)
      val binaryData = Array(0,0,0,0).map(_.toByte)
      res.sameElements(binaryData) should be(true)
    }
    it("Should generate the correct default serialized data for the double data type of isCL") {
      val structure = variables.obj.find(item => item._1.equals("_double")).get._2.asInstanceOf[JObject];
      val res = utils.genDefaultSerializedData(null, structure, null)
      val binaryData = Array(0,0,0,0,0,0,0,0).map(_.toByte)
      res.sameElements(binaryData) should be(true)
    }
    it("Should generate the correct default serialized data for the bool data type of isCL") {
      val structure = variables.obj.find(item => item._1.equals("_bool")).get._2.asInstanceOf[JObject]
      val res = utils.genDefaultSerializedData(null, structure, null)
      val binaryData = Array(0).map(_.toByte)
      res.sameElements(binaryData) should be(true)
    }
    it("Should generate the correct default serialized data for the char data type of isCL") {
      val structure = variables.obj.find(item => item._1.equals("_char")).get._2.asInstanceOf[JObject]
      val res = utils.genDefaultSerializedData(null, structure, null)
      val binaryData = Array(0).map(_.toByte)
      res.sameElements(binaryData) should be(true)
    }
    it("Should generate the correct default serialized data for the String data type of isCL") {
      val structure = variables.obj.find(item => item._1.equals("_string")).get._2.asInstanceOf[JObject]
      val res = utils.genDefaultSerializedData(null, structure, structuresMap)
      val binaryData = Array(0,0,0,0).map(_.toByte)
      res.sameElements(binaryData) should be(true)
    }
    it("Should generate the correct default serialized data for the List data type of isCL") {
      val structure = variables.obj.find(item => item._1.equals("_list_int")).get._2.asInstanceOf[JObject]
      val res = utils.genDefaultSerializedData(null, structure, structuresMap)
      val binaryData = Array(4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0).map(_.toByte)
      res.sameElements(binaryData) should be(true)
    }
    it("Should generate the correct default serialized data for the Map data type of isCL") {
      val structure = variables.obj.find(item => item._1.equals("_map_string_string")).get._2.asInstanceOf[JObject]
      val res = utils.genDefaultSerializedData(null, structure, structuresMap)
      val binaryData = Array(4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0).map(_.toByte)
      res.sameElements(binaryData) should be(true)
    }
    it("Should generate the correct default serialized data for a custom defined Struct type of isCL") {
      val structure = variables.obj.find(item => item._1.equals("custom_type")).get._2.asInstanceOf[JObject]
      val res = utils.genDefaultSerializedData(null, structure, structuresMap)
      val binaryData = Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0).map(_.toByte)
      res.sameElements(binaryData) should be(true)
    }
  }

  describe("The jsonString2Binary method") {
    it("Should work well to generate serialized binary data of int data type of isCL in little-endian") {
      val intInputString = "1"
      val result = utils.json2Binary(parse(intInputString), null, null)
      val intInputBinary = Array(1, 0, 0, 0).map(_.toByte)
      result.sameElements(intInputBinary) should be(true)
    }

    it("Should work well to generate serialized binary data of double data type of isCL in little-endian") {
      val doubleInputString = "3.14"
      val result = utils.json2Binary(parse(doubleInputString), null, null)
      val doubleInputBinary = Array(31, -123, -21, 81, -72, 30, 9, 64).map(_.toByte)
      result.sameElements(doubleInputBinary) should be(true)
    }

    it("Should work well to generate serialized binary data of bool data type of isCL in little-endian") {
      val boolInputString = "true"
      val result = utils.json2Binary(parse(boolInputString), null, null)
      val boolInputBinary = Array(1).map(_.toByte)
      result.sameElements(boolInputBinary) should be(true)
    }

    it("Should work well to generate serialized binary data of String data of isCL in little-endian") {
      val stringInputString = "\"abcdefg\""
      val result = utils.json2Binary(parse(stringInputString), null, null)
      val stringInputBinary = Array(7,0,0,0,97,98,99,100,101,102,103).map(_.toByte)
      result.sameElements(stringInputBinary) should be(true)
    }

    it("Should work well to generate serialized binary data of List data of isCL in little-endian from well input json string") {
      val listIntInputString = "[1,2,3,4]"
      val result = utils.json2Binary(parse(listIntInputString), null, null)
      val stringInputBinary = Array(4,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0).map(_.toByte)
      result.sameElements(stringInputBinary) should be(true)
    }
    it("Should throw exception when generating serialized binary data of List data of isCL in little-endian from bad input json string") {
      val listIntInputString = "[1,2,3.14,\"4\"]"
      val exception = intercept[Exception] {
        utils.json2Binary(parse(listIntInputString), null, null)
      }
      exception.getMessage should include("Wrong Json array input, only support the same type items in an array")
    }
  }
}
