{
  "header" : {
    "version" : 2,
    "height" : "1"
  },
  "transactions" : [ {
    "id" : "55d59116-d0e6-4772-bf66-ef7d7cecf33e",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "package rep.sc.tpl.did\r\n\r\nimport org.json4s.DefaultFormats\r\nimport org.json4s.jackson.JsonMethods.parse\r\nimport rep.proto.rc2.{ActionResult, BindCertToAuthorize, Certificate, Operate, Signer}\r\nimport rep.sc.scalax.{ContractContext, ContractException, IContract}\r\nimport rep.sc.tpl.did.operation.AuthOperation.AuthorizeStatus\r\nimport rep.sc.tpl.did.operation.CertOperation.CertStatus\r\nimport rep.sc.tpl.did.operation.OperOperation.OperateStatus\r\nimport rep.sc.tpl.did.operation.SignerOperation.SignerStatus\r\nimport rep.sc.tpl.did.operation.{AuthOperation, CertOperation, OperOperation, SignerOperation}\r\nimport scalapb.json4s.JsonFormat\r\n\r\n\r\n/**\r\n  * @author zyf\r\n  */\r\nobject RdidOperateAuthorizeTPL {\r\n\r\n\r\n}\r\n\r\n/**\r\n  * @author zyf\r\n  */\r\nclass RdidOperateAuthorizeTPL extends IContract {\r\n\r\n  object ACTION {\r\n\r\n    object Signer {\r\n      val signUpSigner = \"signUpSigner\"\r\n      val updateSigner = \"updateSigner\"\r\n      val updateSignerStatus = \"updateSignerStatus\"\r\n    }\r\n\r\n    object Certificate {\r\n      val signUpCertificate = \"signUpCertificate\" // 无需授权\r\n      val updateCertificateStatus = \"updateCertificateStatus\" // 无需授权\r\n      val signUpAllTypeCertificate = \"signUpAllTypeCertificate\" // 需授权\r\n      val updateAllTypeCertificateStatus = \"updateAllTypeCertificateStatus\" // 需授权\r\n    }\r\n\r\n    object Authorize {\r\n      val grantOperate = \"grantOperate\"\r\n      val updateGrantOperateStatus = \"updateGrantOperateStatus\"\r\n      val bindCertToAuthorize = \"bindCertToAuthorize\"\r\n    }\r\n\r\n    object Operate {\r\n      val signUpOperate = \"signUpOperate\"\r\n      val updateOperateStatus = \"updateOperateStatus\"\r\n    }\r\n\r\n  }\r\n\r\n\r\n  implicit val formats = DefaultFormats\r\n\r\n  def init(ctx: ContractContext): Unit = {\r\n    println(s\"tid: $ctx.t.id\")\r\n  }\r\n\r\n  def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\r\n\r\n    // 两种序列化方式，如果复杂的 pb 结构体（比如带有枚举类型），则只能使用 pb 自带的 json 序列化方式\r\n    val param = parse(sdata)\r\n    val parser = JsonFormat.parser\r\n    type AuthorizeJString = String\r\n\r\n    action match {\r\n      case ACTION.Signer.signUpSigner =>\r\n        SignerOperation.signUpSigner(ctx, parser.fromJsonString(sdata)(Signer))\r\n\r\n      case ACTION.Signer.updateSigner =>\r\n        SignerOperation.updateSigner(ctx, parser.fromJsonString(sdata)(Signer))\r\n\r\n      case ACTION.Signer.updateSignerStatus =>\r\n        SignerOperation.updateSignerStatus(ctx, param.extract[SignerStatus])\r\n\r\n      case ACTION.Certificate.signUpCertificate =>\r\n        CertOperation.signUpCertificate(ctx, parser.fromJsonString(sdata)(Certificate))\r\n\r\n      case ACTION.Certificate.updateCertificateStatus =>\r\n        CertOperation.updateCertificateStatus(ctx, param.extract[CertStatus])\r\n\r\n      case ACTION.Certificate.signUpAllTypeCertificate =>\r\n        CertOperation.signUpAllTypeCertificate(ctx, parser.fromJsonString(sdata)(Certificate))\r\n\r\n      case ACTION.Certificate.updateAllTypeCertificateStatus =>\r\n        CertOperation.updateAllTypeCertificateStatus(ctx, param.extract[CertStatus])\r\n\r\n      case ACTION.Operate.signUpOperate =>\r\n        OperOperation.signUpOperate(ctx, parser.fromJsonString(sdata)(Operate))\r\n\r\n      case ACTION.Operate.updateOperateStatus =>\r\n        OperOperation.updateOperateStatus(ctx, param.extract[OperateStatus])\r\n\r\n      case ACTION.Authorize.grantOperate =>\r\n        AuthOperation.grantOperate(ctx, param.extract[List[AuthorizeJString]])\r\n\r\n      case ACTION.Authorize.bindCertToAuthorize =>\r\n        AuthOperation.bindCertToAuthorize(ctx, parser.fromJsonString(sdata)(BindCertToAuthorize))\r\n\r\n      case ACTION.Authorize.updateGrantOperateStatus =>\r\n        AuthOperation.updateGrantOperateStatus(ctx, param.extract[AuthorizeStatus])\r\n\r\n      case _ =>\r\n        throw ContractException(JsonFormat.toJsonString(ActionResult(100000, \"没有对应的方法\")))\r\n    }\r\n  }\r\n}\r\n",
      "cType" : "CODE_SCALA",
      "rType" : "RUN_SERIAL",
      "sType" : "STATE_BLOCK",
      "cclassification" : "CONTRACT_SYSTEM"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:58.732Z",
      "signature" : "MEUCIQCFD40/oGkyaLhMZjV+0siriYhhJxC6nkaChi8xxr+LbwIgAj47YN0j9TyWVfRYhnWLvBSA7p1cx4rPltPyZvcCbB8="
    }
  }, {
    "id" : "05f6c2a7-3d80-44db-a7d5-dfea5a6a6580",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"super_admin\",\"creditCode\":\"951002007l78123233\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBZDCCAQqgAwIBAgIGAYEEX3LxMAoGCCqGSM49BAMCMDkxFDASBgNVBAMMC3N1\\r\\ncGVyX2FkbWluMQ4wDAYDVQQLDAVpc2NhczERMA8GA1UECgwIUmVwQ2hhaW4wHhcN\\r\\nMjIwNTI3MDcxNjEzWhcNMjcwNTI2MDcxNjEzWjA5MRQwEgYDVQQDDAtzdXBlcl9h\\r\\nZG1pbjEOMAwGA1UECwwFaXNjYXMxETAPBgNVBAoMCFJlcENoYWluMFkwEwYHKoZI\\r\\nzj0CAQYIKoZIzj0DAQcDQgAE0SsXKYp6BqzCk0BvfKPSIeCtHEAE2N53xM2CkPNE\\r\\n3lueJp8G6S3jHJuzesV/1IMmbzVzk8xMotgMfJFEOcAtBDAKBggqhkjOPQQDAgNI\\r\\nADBFAiEAh8uOog9ZkpP939xaTqna8kGpLwYmZ6FukL6C85VgweQCIC/2hSUY/bJO\\r\\nUQ27QWcjGxBTGdW1GfLS/4HNr9h923IJ\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-05-27T07:32:58.830Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"951002007l78123233\",\"certName\":\"super_admin\"},\"certHash\":\"c91f2aae0cd6712ab2dfd061702c4057ec6f30e770a8fcbecc8906f6df1516a7\",\"version\":\"1.0\"}],\"createTime\":\"2022-05-27T07:32:58.830Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.251Z",
      "signature" : "MEUCIQDKGwpBtWuwfbHK9wTDUOSXxCE8RQg2wHwDqgue82R82gIgflL7qBHUnWLW9qKP72qUrUUXJYDsdJ0aLNTibyHqLHE="
    }
  }, {
    "id" : "1eb456bd-955f-4d0c-a8a1-4f2c5ecda827",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"node1\",\"creditCode\":\"121000005l35120456\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBVjCB/qADAgECAgYBgQRfc0swCgYIKoZIzj0EAwIwMzEOMAwGA1UEAwwFbm9k\\r\\nZTExDjAMBgNVBAsMBWlzY2FzMREwDwYDVQQKDAhSZXBDaGFpbjAeFw0yMjA1Mjcw\\r\\nNzE2MTNaFw0yNzA1MjYwNzE2MTNaMDMxDjAMBgNVBAMMBW5vZGUxMQ4wDAYDVQQL\\r\\nDAVpc2NhczERMA8GA1UECgwIUmVwQ2hhaW4wWTATBgcqhkjOPQIBBggqhkjOPQMB\\r\\nBwNCAAS2dFJZHZe07B9cZAugHd1dotPTAf8Lb05dW/644EXqTaXst4MzVt43grLp\\r\\nuhEkvdtFB6n75yOrc0zQ+Q5fUFuQMAoGCCqGSM49BAMCA0cAMEQCIBHI9RGCplmK\\r\\nlovEmnUMG7WpCs3m5G+SUsrGj9DFu7HXAiBEewxv+oZdbgi2RZs+2d5uEydvZW/8\\r\\n2TSY7Ip3isk0aQ==\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-05-27T07:32:59.264Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"121000005l35120456\",\"certName\":\"node1\"},\"certHash\":\"1a921ff5bfbc5d4b5f55742f9687a2547b7279f646fe116c82aae166144f3c8d\",\"version\":\"1.0\"}],\"createTime\":\"2022-05-27T07:32:59.264Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.265Z",
      "signature" : "MEQCIDq3yHcXArjRVkzPY4zQ9VgkD6+YZHsB3nhqTpFna4+WAiAYjv21KYd3vOneCzrY4IrW5ebb/snJuBlOT9HBwxc6kw=="
    }
  }, {
    "id" : "010e8a4e-a00e-47d5-9df6-f6fc88d78ec4",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"node2\",\"creditCode\":\"12110107bi45jh675g\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBVjCB/qADAgECAgYBgQRfc1EwCgYIKoZIzj0EAwIwMzEOMAwGA1UEAwwFbm9k\\r\\nZTIxDjAMBgNVBAsMBWlzY2FzMREwDwYDVQQKDAhSZXBDaGFpbjAeFw0yMjA1Mjcw\\r\\nNzE2MTNaFw0yNzA1MjYwNzE2MTNaMDMxDjAMBgNVBAMMBW5vZGUyMQ4wDAYDVQQL\\r\\nDAVpc2NhczERMA8GA1UECgwIUmVwQ2hhaW4wWTATBgcqhkjOPQIBBggqhkjOPQMB\\r\\nBwNCAAT9CcKGs5t447n4j7qqsjd5zsc9EUcXCPRlvVYa0HHllEvZhLiLn8PFXIBG\\r\\nyc/4DVlgbaSoP+R+DCBxc4ctlA/xMAoGCCqGSM49BAMCA0cAMEQCIARYMcxuzXwZ\\r\\nzLt7bOYCmzVI16gUxP8VUG2lXpcKe7+UAiBzMp7PYkhiZvk0qaivHIQlS6gDhnDh\\r\\nMvUmIX9EpPcNjQ==\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-05-27T07:32:59.281Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"12110107bi45jh675g\",\"certName\":\"node2\"},\"certHash\":\"2a0e212187ae563f0b07bb8b1ae850ec3f81095b0da7eba0d592b7f2cc83bad8\",\"version\":\"1.0\"}],\"createTime\":\"2022-05-27T07:32:59.281Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.282Z",
      "signature" : "MEYCIQDJJKg9QNNm8cSYMKVi7QdP2kDUNqO5gQMcN+QJlZRDJwIhANPNH3x2ycLBXtGPB60/sdfOK45vdLx9sCz9XLujwNX2"
    }
  }, {
    "id" : "4883da6a-f824-4d3a-9407-1c98b5c9d5bd",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"node3\",\"creditCode\":\"122000002n00123567\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBVjCB/qADAgECAgYBgQRfc1wwCgYIKoZIzj0EAwIwMzEOMAwGA1UEAwwFbm9k\\r\\nZTMxDjAMBgNVBAsMBWlzY2FzMREwDwYDVQQKDAhSZXBDaGFpbjAeFw0yMjA1Mjcw\\r\\nNzE2MTNaFw0yNzA1MjYwNzE2MTNaMDMxDjAMBgNVBAMMBW5vZGUzMQ4wDAYDVQQL\\r\\nDAVpc2NhczERMA8GA1UECgwIUmVwQ2hhaW4wWTATBgcqhkjOPQIBBggqhkjOPQMB\\r\\nBwNCAARXK2acTVy1JuqDTDPLqxE4AtoKD5n14GXokDG466SCK2ujp7yFdyjLiLR3\\r\\njGFfIP7xUd3hj/95R/1tA9BAdYJ5MAoGCCqGSM49BAMCA0cAMEQCICPI1F0dt8Yj\\r\\nUWW2oz2g1+peD9aYY2dv1ajYDoI2AQ2kAiByQgwU0LZjo9qktmHLw0qmzNoo6D4k\\r\\npC441kRm373ASQ==\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-05-27T07:32:59.291Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"122000002n00123567\",\"certName\":\"node3\"},\"certHash\":\"8aaa22759535074356bdf7d0005bc3a60ebc1aa1834ea306afa2633158cce556\",\"version\":\"1.0\"}],\"createTime\":\"2022-05-27T07:32:59.291Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.292Z",
      "signature" : "MEYCIQC6aV3UedIqhIPAXASbm+IKcP+d7agWBPE6Pp2TmE1aWAIhAPj5ZeTtCR9b5W4nVSnVDrbOk1bNRkAV0wDFOI5N0vCo"
    }
  }, {
    "id" : "04f87f47-80d0-4fdd-bd15-54f7696679ac",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"node4\",\"creditCode\":\"921000005k36123789\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBWDCB/qADAgECAgYBgQRfc2MwCgYIKoZIzj0EAwIwMzEOMAwGA1UEAwwFbm9k\\r\\nZTQxDjAMBgNVBAsMBWlzY2FzMREwDwYDVQQKDAhSZXBDaGFpbjAeFw0yMjA1Mjcw\\r\\nNzE2MTNaFw0yNzA1MjYwNzE2MTNaMDMxDjAMBgNVBAMMBW5vZGU0MQ4wDAYDVQQL\\r\\nDAVpc2NhczERMA8GA1UECgwIUmVwQ2hhaW4wWTATBgcqhkjOPQIBBggqhkjOPQMB\\r\\nBwNCAATkWdfpSiA9NJasf9fLeu8YYgQzwcsko0DSJ31nF0HhquKWDS8C++xTB9V7\\r\\n3Me7ErFmgAHPwEEy1YzienzdDVQoMAoGCCqGSM49BAMCA0kAMEYCIQCMcslpWQ2P\\r\\nk5sSX9D8CjDclS/Y9SvInoygGy2FjUcYygIhAJ4AtwU66drGZSB/Sc4G4dVCHA8K\\r\\n8IudOJjmAHAa4mJb\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-05-27T07:32:59.301Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"921000005k36123789\",\"certName\":\"node4\"},\"certHash\":\"8f84ce9f50b86b35a4d2c34c880d0b14aabb5e992055114ffe2d72193b9bea38\",\"version\":\"1.0\"}],\"createTime\":\"2022-05-27T07:32:59.301Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.303Z",
      "signature" : "MEYCIQD6oMHLmwRUKJlQxObTzgRTGgF0Yg44Dfr1+HEJsk6/pgIhAJrZZoarpbBaMuMAExn592VrxgTEyfCA7a/WoiBtUR5X"
    }
  }, {
    "id" : "8538f505-27f4-430b-934d-9841e1f9d0db",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"node5\",\"creditCode\":\"921000006e0012v696\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBVjCB/qADAgECAgYBgQRfc2gwCgYIKoZIzj0EAwIwMzEOMAwGA1UEAwwFbm9k\\r\\nZTUxDjAMBgNVBAsMBWlzY2FzMREwDwYDVQQKDAhSZXBDaGFpbjAeFw0yMjA1Mjcw\\r\\nNzE2MTNaFw0yNzA1MjYwNzE2MTNaMDMxDjAMBgNVBAMMBW5vZGU1MQ4wDAYDVQQL\\r\\nDAVpc2NhczERMA8GA1UECgwIUmVwQ2hhaW4wWTATBgcqhkjOPQIBBggqhkjOPQMB\\r\\nBwNCAAR5mHjtFWyP+VujryX8q54By8MAaI9TOesJzbMKM1EOSBIrKZmvYt9orclX\\r\\nrXAU72TV468D6GQSSm2//lHccnEgMAoGCCqGSM49BAMCA0cAMEQCIEd1NKDMPCNA\\r\\nCVIfr+mvTnGFp/pHuMFe71WsgP89+FRtAiBCzfChKUfCvlfWL0hUJ8XISraf1zVo\\r\\ng7DRMNKBSBn51Q==\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-05-27T07:32:59.310Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"921000006e0012v696\",\"certName\":\"node5\"},\"certHash\":\"f8e64e23c8cdd26b422a240d4d1c66cdf49b8e78ab85f99d3f17e3645c8b008f\",\"version\":\"1.0\"}],\"createTime\":\"2022-05-27T07:32:59.310Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.311Z",
      "signature" : "MEUCIQCon/CGnYmH5M9AF/A1P07YZVsrOQ+NtU/DIsaglAUNKwIgYmA/ZK+0hXS6f88R/if7Deiu91L6Z6CSwsB6YISXg5I="
    }
  }, {
    "id" : "54dcd86b-85fb-4214-b2d9-55965b8f116b",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"7d93aeecec616f7f36e3333d0a9264366f36c563a10c978f159b034824898808\",\"description\":\"注册RDID\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.signUpSigner\",\"createTime\":\"2022-05-27T07:32:59.346Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.351Z",
      "signature" : "MEQCIBo+RwhYZjYowoCtSAIs8Xonh1X6KYSep4yu2qP0SP07AiAGh1Nz1a4UMT/SNxRwdfE/g8dbxprQ+8IO6fm0zQsFgg=="
    }
  }, {
    "id" : "31009bef-6dc8-4bd7-bbaf-78a2fc23e858",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"122fd24a7b84f3b9f8a91c0bfd31910a655de38d040aba44f874d9bbb3e8f777\",\"description\":\"禁用或启用RDID\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateSignerStatus\",\"createTime\":\"2022-05-27T07:32:59.354Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.355Z",
      "signature" : "MEUCIQD/pem+3y9AWwBI9xaO9lJusmAsxdnjgCwj69zW/GKZegIgKoyu5iBq8H+wX4iqhO7nqCLTzfTKY2ieuMEljgMppq4="
    }
  }, {
    "id" : "d668cd7f-a11e-41bc-bbd5-4fc38fbe6f62",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"345148e45a3cbd72783b453f072c08af60e7f692b0882eeb2ede98b4ff10a9dc\",\"description\":\"更新信息\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateSigner\",\"createTime\":\"2022-05-27T07:32:59.356Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.357Z",
      "signature" : "MEUCIQCHkPwLE1vEkccHbk6ZG1ka8zA3QqKUqsAKUwqpjmy5CwIgSm0FhwjWSXBKp7aZ8pFeIq3gbwWuhAx8KGvs3qeceqo="
    }
  }, {
    "id" : "876182b9-d0ad-4125-bc1f-24bf26c95722",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"c34b7ad979e0cddf1e0fff9140c4aebe5df4ea87dad8fa1e9fa0dd13ad3f55ee\",\"description\":\"用户注册证书\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.signUpCertificate\",\"createTime\":\"2022-05-27T07:32:59.362Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.363Z",
      "signature" : "MEUCIQDVvl06MEekqNsUznlWMum7tqaPLidqCYQEidKfOFOErQIgF64+cDxyw6AT4/Meeecd45aUZ/4Gw9Y1mQWk41XKnQA="
    }
  }, {
    "id" : "bcf5d0ff-760f-4d0c-88d7-07d70c24f820",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"5e0e7d0eb29e2e7b55926f32d358466b25eb09ebdd320a936c16898d2752b01a\",\"description\":\"用户禁用或启用证书\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateCertificateStatus\",\"createTime\":\"2022-05-27T07:32:59.365Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.366Z",
      "signature" : "MEUCIFR2BiLlm19bew/eYmfc52PgqxqD/rm5eP/VDS90xeaSAiEAyyUiZqtUMtUXtmncVoKa2lEcpBDJEzV5YK3UrLL4DoY="
    }
  }, {
    "id" : "5086d9b7-bb71-4033-a5ce-96a850478d9d",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"7358803962fd55455211f2824c5376f342715fd358f4a24eaa06761ebf503c79\",\"description\":\"用户可为所有人注册证书，需授权\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.signUpAllTypeCertificate\",\"createTime\":\"2022-05-27T07:32:59.368Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.369Z",
      "signature" : "MEUCIQCQUxKO4/52MLzUjfLP3nOdV7sSwawH/gyxzOAB8W+fNAIgF7l0wuEWOsDSQNtXgYDUcENIPdcyfzdzXxalUtFOeMk="
    }
  }, {
    "id" : "f76fdad7-8825-4817-9d7a-2add94e5818b",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"6b2c5c52c74ef82365b7898d8685c2523ecf0d049648135081e2972c96f9ae18\",\"description\":\"用户可为所有人禁用或启用证书，需授权，super_admin特殊处理\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateAllTypeCertificateStatus\",\"createTime\":\"2022-05-27T07:32:59.370Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.371Z",
      "signature" : "MEUCIQCWDjiLq08rk1nb80l/ypWG5FzQb82Mb4W6x3Ljhk9IRQIgBZY49iY8jLE5Do7KdtlwgMy3w4K06kExx4DbA/qEB0o="
    }
  }, {
    "id" : "6953b6e8-ab53-44d2-9e0d-50c6b5acea2c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"01f66ad1019321a4986e903bf6d446f7460817528bd6ecf16f48cec17c6653cb\",\"description\":\"注册操作，自己注册自己\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.signUpOperate\",\"createTime\":\"2022-05-27T07:32:59.373Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.373Z",
      "signature" : "MEQCIHNrw0kfRpkewK7Qqit8jtsufw/UJ9lhXr6gM6JHc6rwAiBEm+1U1nLtV571W0vaBEli60ffZkN67tKGSAOy2txXqg=="
    }
  }, {
    "id" : "56cdb8ee-d477-4ed8-af7b-2c9db75f2241",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"d68a87979fba2d6de2cebed5820e605597a929cb0fd23d7a3fe9302babb33c3b\",\"description\":\"禁用或启用操作，自己更新自己名下的操作\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateOperateStatus\",\"createTime\":\"2022-05-27T07:32:59.376Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.377Z",
      "signature" : "MEYCIQCdtmLXFbzihGS30lLNJSVhMvQUTpLoGOLf77sVVZN13AIhAIxFujcNjYTxQ5aDtQDKoCsXwpa7nX5GJldDEov/ulI1"
    }
  }, {
    "id" : "cc3ea822-395f-466d-b79c-d702fc9ebf4b",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"ccc1e3d69eedfa68f70d60ed8820a64dada2d3b2c66dda72585c4444a16f2aa1\",\"description\":\"授权操作\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.grantOperate\",\"createTime\":\"2022-05-27T07:32:59.380Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.381Z",
      "signature" : "MEQCICR7VCWj9GXJ4pjWywVRiQyxb72uzAz/wCaoByGNxBXrAiAWu/AoDWmaE7/RtpLuhdOp6H0PeXWaCRv61/zSCc7CxQ=="
    }
  }, {
    "id" : "d95b3a22-6345-4f3b-a240-c05515b7c5bc",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"d74f17115a3c42f2de0214503fca50737a4135840f8e61c6db42d7bcd0cb7f15\",\"description\":\"禁用或启用授权\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateGrantOperateStatus\",\"createTime\":\"2022-05-27T07:32:59.384Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.385Z",
      "signature" : "MEUCIEUP5xpUnI3zo2x2ygJvXo5o+20HGD8v1gktjKkazfBYAiEA5pp/vRFy734zmsoVC/wIYbq4Wd+4oSb38SBnFH+i1Ck="
    }
  }, {
    "id" : "1775b483-6b63-4880-aa01-de259d1cc522",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"62528762a01b0b5cdbedc6a0d50e12ac06805d466c0f4239dedf0f855b3c75bd\",\"description\":\"绑定证书到授权操作\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.bindCertToAuthorize\",\"createTime\":\"2022-05-27T07:32:59.387Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.387Z",
      "signature" : "MEQCIG0dC0Unk7UJJfn63Iq/2Wf0I2fYL84YTEIOwV6AVCBjAiBDTmaeRnjLJwhmSYo9IFMqQBVT20ViLpmDXPBfUpypjA=="
    }
  }, {
    "id" : "33929588-776b-4bb9-9015-83f573a5bb7c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"d3f2db1d2ab212b967b6b61c7f74dc2247c1aa1e1172066617c3c1a0caa00056\",\"description\":\"发布合约操作\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"*.deploy\",\"createTime\":\"2022-05-27T07:32:59.389Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.389Z",
      "signature" : "MEQCIC7Rg8qK7FHQavBdthfEfCmkcBxNjYcrEYFHXJA3jtnfAiAH2TKflfeM36CnSAKNb57k7yMBPGH7/sBUxKGpQUxcLw=="
    }
  }, {
    "id" : "005376a2-4915-47a9-8c07-79b5c8a7e723",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"b52e35d84f16d268357fc94059b965d843b2827f0654a800bfe8d15c247d0cf2\",\"description\":\"改变合约状态操作\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"*.setState\",\"createTime\":\"2022-05-27T07:32:59.391Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.392Z",
      "signature" : "MEQCIEHbSgCE+iXBK9vwnEFaRqICK0VUljqq43oN+xgBykHiAiBcPnZYaDbBIWCqQfctVDcHFCp0e/cC2BX6BgiSFTX3sg=="
    }
  }, {
    "id" : "2c11f072-3274-46c8-9130-54f899b33edf",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"38766c3ecf02276e9aee804e7b5e700127bc72e7bb22a8b66fffcf2102bb2f07\",\"description\":\"获取链信息\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"chaininfo.chaininfo\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-27T07:32:59.419Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.420Z",
      "signature" : "MEYCIQD0dTq5X9PAk6gliO+LPexp9PKxeTTnSyOyRlyO3WbfAQIhAJaKOLEclXIiHyaC+TFbAtzHGIkMRixxWaSAUXml+AVk"
    }
  }, {
    "id" : "dca3293b-09f8-4ffa-8e93-c9ac3299fcc7",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"527281a9a94d769b45e38d8c1ca516d3965571e895e0ab66b8d873240030bc0a\",\"description\":\"返回组网节点数量\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"chaininfo.node\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-27T07:32:59.424Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.424Z",
      "signature" : "MEYCIQCyp1A/jFVg8PQsR9th+mZ0A01CvrUHL7qKsTp5iY/cfwIhALpLX7Mp0I+YvVSEmd9zFMIqzm2I9otQlTMaSqPNrW4P"
    }
  }, {
    "id" : "ad688174-a11f-4f44-b77d-56da2150dbba",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"08a8818c21d7afd7c31663e7e5b4f766a0e0b3278c7ccd46a362bbc7571a2072\",\"description\":\"返回系统缓存交易数量\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"chaininfo.getcachetransnumber\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-27T07:32:59.428Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.429Z",
      "signature" : "MEYCIQCsoCMD8B6TjqscdW9ufv9spBolYlx2OIF68bpd8jf/EQIhALQTbP0PQz1nMzdB19WJt6lUYu0sTORdsxaOdQBos44Y"
    }
  }, {
    "id" : "6d126466-3f27-4b9a-b390-51af700676ac",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"db5ade19754294f20c36a356e961820e99d9e4e29ba8179be9043a7ae44eccd7\",\"description\":\"返回系统接收到的交易数量\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"chaininfo.getAcceptedTransNumber\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-27T07:32:59.433Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.434Z",
      "signature" : "MEUCIQCcCzk5BflnnSFAqMlRge6hNFSPcqNtT28SiWTW7CuEugIgB+WdTMh9wJfLJPEnIAiYZwkUh3BccN2u7RAb46QAB3M="
    }
  }, {
    "id" : "632c2506-da18-4123-b730-0d1288aeffdb",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"06b901074a00254571514c5f75a45f77cb1a7859c62f94a2a4b7825981f96c82\",\"description\":\"返回指定id的区块\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"block.hash\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-27T07:32:59.437Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.438Z",
      "signature" : "MEYCIQCQV1ESeeNCwELePPu/4r0gc7s3e12tud5iNwmGONIjjgIhAKniPNj0Yi7s76uWnyu8Vppu4W4X/0AWhQ7S6LNv47nC"
    }
  }, {
    "id" : "26cb6699-dfce-4805-967e-98e9acf5a261",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"a277d109a69401c79af2c3adb985d62d16c193380d6afc8f256d80edbcabfac0\",\"description\":\"返回指定高度的区块\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"block.blockHeight\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-27T07:32:59.442Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.443Z",
      "signature" : "MEQCIDd9aJmqmTxBtO2RovJWNEoHM7Pb1MLeicvvfAB4MTSqAiBmvwjSTDtBc8YFLopZVEDbtyao+OgGY07GRlGwVGce+w=="
    }
  }, {
    "id" : "c97b616d-dd19-4326-85c2-27c4ee7f636b",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"a74a6de7ab02ab6ec0a8c98d964abb1cfc343784c00fde91c53f6272661645df\",\"description\":\"返回指定高度区块包含的交易数\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"block.getTransNumberOfBlock\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-27T07:32:59.446Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.447Z",
      "signature" : "MEYCIQD8o0XsQIKAOraWo4+TkiKV3v3QtDvW564YYP3VFhGdywIhAKKARXGcu6ZdEvr2hooWI9d17jTOJtkMfu4OJ47gluR1"
    }
  }, {
    "id" : "98bd1cc4-d5f7-42d2-8cfd-1a0e28933ce7",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"da7b2965e3f93cfed897ba1fc7cb170f6ec1f06f71421de327db3dfb2fb7d669\",\"description\":\"返回指定高度的区块的出块时间\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"block.blocktime\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-27T07:32:59.450Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.451Z",
      "signature" : "MEUCIC9YNfCdUR4s5prETQ0YazeHD3W/GIh7R5xvKoP4Pgy4AiEAt3SHnbKN0L3oxvdcUy7kdqeOEdHvWjNtY4DPZSe/Okw="
    }
  }, {
    "id" : "32715322-9aa2-429f-b4a7-e958c747f142",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"39c4cb23fbfe8dd44a245d477f20316bde260fc890439acff9a38ed2414e6c2d\",\"description\":\"返回指定交易的入块时间\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"block.blocktimeoftran\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-27T07:32:59.454Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.455Z",
      "signature" : "MEQCIFGLGz1/VnuNy4KtAq5B9fiQiBwc5RrgL7IqpCzZMEtKAiBHqAuFaF2SdRarJ7H+CkJx7xUIYILiTi/aRipjoJ+ezA=="
    }
  }, {
    "id" : "63919d1f-dba0-4c15-8957-d196c11b305e",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"077bd0f9595d36b5b01787f9e33ac3b0ca87ef3596075a739bdbdecb69299670\",\"description\":\"返回指定高度的区块字节流\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"block.stream\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-27T07:32:59.458Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.459Z",
      "signature" : "MEUCIFAak+69dN/TTWYltgjbzK5cgm86YntEExmBdVi/OO3QAiEAoFDqStiUFoPtumvcF+uVoQPylK4+JUPuKoNX/YNxIpU="
    }
  }, {
    "id" : "67576e83-e81b-42c1-80f9-0c17cc842fe2",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"ce922519a3c3ecaf9b0986c2449c7680895c15f4b0e9818e994e14a4d28b6aaf\",\"description\":\"返回指定id的交易\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-27T07:32:59.462Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.462Z",
      "signature" : "MEUCIQDAK07QTk4+suqUWZN3+4EqOQrYnULgiQ/aBwbzNPyXpgIgXrUbreaGiIm+EI7Hxm317YBQ3N5LLbQkIU/IAQIAXg8="
    }
  }, {
    "id" : "a2686d7e-4f7d-4f75-a688-e64114ce68b7",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"4b24c7d54882e6e371f7c211f7d8b10c438073e8ddfa97ba09c660ecbf66d813\",\"description\":\"返回指定id的交易字节流\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-27T07:32:59.466Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.467Z",
      "signature" : "MEYCIQDkyWpipxUbOxwreU8pg3x7cgtcSdMnLOR8ngRlrmyJLwIhALLGasCGb/17EZe3sIfYPpcdPBW0JGJEByVCkPOsrD+n"
    }
  }, {
    "id" : "18485dd8-d120-4a91-9d19-fdfbd7d07b50",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"118beab27e3f3054f6a898642a69cbdf159754c688b04f2f181878f567f8b88c\",\"description\":\"提交带签名的交易\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.postTranByString\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-27T07:32:59.470Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.471Z",
      "signature" : "MEQCIBhHrNCcqVZOHHEukT+xPLEC2W9kG6GEHZJc6sONA8DDAiAyk+OobzQPTcX7EZUw0HlSaUCaKLLqIM/CLypYfyvrew=="
    }
  }, {
    "id" : "1002cd0f-2c9a-4efc-b55f-097f7ecc83bc",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"b448bc33c662ac91896d97dfab59afcb274105d1e150ed4a73dce532188b65fe\",\"description\":\"提交带签名的交易字节流\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.postTranStream\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-27T07:32:59.473Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.474Z",
      "signature" : "MEUCIQCTV4ugyloLvwgIYiBMqjG5HjZnd9ZqVBpNeMaREpeGWAIgWyzSc/lSf+K7UiK4wx/zNdRz5tUWEABjgkzg5F134RI="
    }
  }, {
    "id" : "a54d671e-738a-4d37-8a48-4e828c09835b",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"4cc1b52b7c7723267816a45268dd4c3377228d3cd6c09006a4d0f3a181d84760\",\"description\":\"提交交易\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-27T07:32:59.477Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.478Z",
      "signature" : "MEYCIQD9ysye/XJJBuQ2iEZoKG1oT9wZJlmm69qznxY3iMFnmQIhAKJg/tSLM71jJzDH5nNouJuWXDamBekseZ0yXvuMr4fG"
    }
  }, {
    "id" : "93fc7c0f-4f53-4046-8159-a963281b4531",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "grantOperate",
      "args" : [ "[\"{\\\"id\\\":\\\"7a029b30-2f73-4920-9524-bf27f3e9b4fb\\\",\\\"grant\\\":\\\"951002007l78123233\\\",\\\"granted\\\":[\\\"121000005l35120456\\\",\\\"12110107bi45jh675g\\\",\\\"122000002n00123567\\\",\\\"921000005k36123789\\\",\\\"921000006e0012v696\\\"],\\\"opId\\\":[\\\"7d93aeecec616f7f36e3333d0a9264366f36c563a10c978f159b034824898808\\\",\\\"122fd24a7b84f3b9f8a91c0bfd31910a655de38d040aba44f874d9bbb3e8f777\\\",\\\"345148e45a3cbd72783b453f072c08af60e7f692b0882eeb2ede98b4ff10a9dc\\\",\\\"c34b7ad979e0cddf1e0fff9140c4aebe5df4ea87dad8fa1e9fa0dd13ad3f55ee\\\",\\\"5e0e7d0eb29e2e7b55926f32d358466b25eb09ebdd320a936c16898d2752b01a\\\",\\\"7358803962fd55455211f2824c5376f342715fd358f4a24eaa06761ebf503c79\\\",\\\"6b2c5c52c74ef82365b7898d8685c2523ecf0d049648135081e2972c96f9ae18\\\",\\\"01f66ad1019321a4986e903bf6d446f7460817528bd6ecf16f48cec17c6653cb\\\",\\\"d68a87979fba2d6de2cebed5820e605597a929cb0fd23d7a3fe9302babb33c3b\\\",\\\"ccc1e3d69eedfa68f70d60ed8820a64dada2d3b2c66dda72585c4444a16f2aa1\\\",\\\"d74f17115a3c42f2de0214503fca50737a4135840f8e61c6db42d7bcd0cb7f15\\\",\\\"62528762a01b0b5cdbedc6a0d50e12ac06805d466c0f4239dedf0f855b3c75bd\\\",\\\"d3f2db1d2ab212b967b6b61c7f74dc2247c1aa1e1172066617c3c1a0caa00056\\\",\\\"b52e35d84f16d268357fc94059b965d843b2827f0654a800bfe8d15c247d0cf2\\\",\\\"38766c3ecf02276e9aee804e7b5e700127bc72e7bb22a8b66fffcf2102bb2f07\\\",\\\"527281a9a94d769b45e38d8c1ca516d3965571e895e0ab66b8d873240030bc0a\\\",\\\"08a8818c21d7afd7c31663e7e5b4f766a0e0b3278c7ccd46a362bbc7571a2072\\\",\\\"db5ade19754294f20c36a356e961820e99d9e4e29ba8179be9043a7ae44eccd7\\\",\\\"06b901074a00254571514c5f75a45f77cb1a7859c62f94a2a4b7825981f96c82\\\",\\\"a277d109a69401c79af2c3adb985d62d16c193380d6afc8f256d80edbcabfac0\\\",\\\"a74a6de7ab02ab6ec0a8c98d964abb1cfc343784c00fde91c53f6272661645df\\\",\\\"da7b2965e3f93cfed897ba1fc7cb170f6ec1f06f71421de327db3dfb2fb7d669\\\",\\\"39c4cb23fbfe8dd44a245d477f20316bde260fc890439acff9a38ed2414e6c2d\\\",\\\"077bd0f9595d36b5b01787f9e33ac3b0ca87ef3596075a739bdbdecb69299670\\\",\\\"ce922519a3c3ecaf9b0986c2449c7680895c15f4b0e9818e994e14a4d28b6aaf\\\",\\\"4b24c7d54882e6e371f7c211f7d8b10c438073e8ddfa97ba09c660ecbf66d813\\\",\\\"118beab27e3f3054f6a898642a69cbdf159754c688b04f2f181878f567f8b88c\\\",\\\"b448bc33c662ac91896d97dfab59afcb274105d1e150ed4a73dce532188b65fe\\\",\\\"4cc1b52b7c7723267816a45268dd4c3377228d3cd6c09006a4d0f3a181d84760\\\"],\\\"isTransfer\\\":\\\"TRANSFER_REPEATEDLY\\\",\\\"createTime\\\":\\\"2022-05-27T07:32:59.483Z\\\",\\\"authorizeValid\\\":true,\\\"version\\\":\\\"1.0\\\"}\"]" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.580Z",
      "signature" : "MEUCIQDuiqlFEdHRSRvigfmuiMiBRY40pG+jH7A3p1Q/Rba0fwIgUVNe/sZyoZsURdiY4zU11PylNpB1ReOswCo0TPam1bg="
    }
  }, {
    "id" : "98aa211c-4ae9-4822-a326-f7c63398667f",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "ContractAssetsTPL",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "\r\n/*\r\n * Copyright  2019 Blockchain Technology and Application Joint Lab, Linkel Technology Co., Ltd, Beijing, Fintech Research Center of ISCAS.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BA SIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\npackage rep.sc.tpl\r\n\r\nimport org.json4s._\r\nimport org.json4s.jackson.JsonMethods._\r\nimport rep.proto.rc2.ActionResult\r\nimport rep.sc.scalax.IContract\r\nimport rep.sc.scalax.ContractContext\r\nimport rep.sc.scalax.ContractException\r\n\r\n/**\r\n  * 资产管理合约\r\n  */\r\n\r\nfinal case class Transfer(from: String, to: String, amount: Int)\r\n\r\nclass ContractAssetsTPL extends IContract {\r\n\r\n  // 需要跨合约读账户\r\n  var chaincodeName = \"\"\r\n  var chaincodeVersion = 0\r\n  //val prefix = IdTool.getCid(ChaincodeId(chaincodeName, chaincodeVersion))\r\n\r\n  implicit val formats = DefaultFormats\r\n\r\n  def init(ctx: ContractContext) {\r\n    chaincodeName = ctx.api.getAccountContractCodeName\r\n    chaincodeVersion = ctx.api.getAccountContractVersion\r\n    println(s\"tid: $ctx.t.id\")\r\n  }\r\n\r\n  def set(ctx: ContractContext, data: Map[String, Int]): ActionResult = {\r\n    println(s\"set data:$data\")\r\n    for ((k, v) <- data) {\r\n      ctx.api.setVal(k, v)\r\n    }\r\n    null\r\n  }\r\n\r\n  def transfer(ctx: ContractContext, data: Transfer): ActionResult = {\r\n    if (!data.from.equals(ctx.t.getSignature.getCertId.creditCode))\r\n      throw ContractException(\"只允许从本人账户转出\")\r\n    val signerKey = data.to\r\n    // 跨合约读账户，该处并未反序列化\r\n    //todo 跨合约读需要修改\r\n    /*if (IdTool.isDidContract) {\r\n      if (ctx.api.getStateEx(chaincodeName, \"signer_\" + data.to) == null)\r\n        throw ContractException(\"目标账户不存在\")\r\n    } else {\r\n      if (ctx.api.getStateEx(chaincodeName, data.to) == null)\r\n        throw ContractException(\"目标账户不存在\")\r\n    }*/\r\n    val sfrom: Any = ctx.api.getVal(data.from)\r\n    val dfrom = sfrom.asInstanceOf[Int]\r\n    if (dfrom < data.amount)\r\n      throw ContractException(\"余额不足\")\r\n    ctx.api.setVal(data.from, dfrom - data.amount)\r\n    val dto = ctx.api.getVal(data.to).toString.toInt\r\n    ctx.api.setVal(data.to, dto + data.amount)\r\n    null\r\n  }\r\n\r\n  def put_proof(ctx: ContractContext, data: Map[String, Any]): ActionResult = {\r\n    //先检查该hash是否已经存在,如果已存在,抛异常\r\n    for ((k, v) <- data) {\r\n      val pv0: Any = ctx.api.getVal(k)\r\n      if (pv0 != null)\r\n        throw ContractException(s\"[$k] 已存在，当前值为 [$pv0]\")\r\n      ctx.api.setVal(k, v)\r\n      print(\"putProof:\" + k + \":\" + v)\r\n    }\r\n    null\r\n  }\r\n\r\n  /**\r\n    * 根据action,找到对应的method，并将传入的json字符串parse为method需要的传入参数\r\n    */\r\n  def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\r\n    val json = parse(sdata)\r\n    action match {\r\n      case \"transfer\" =>\r\n        transfer(ctx, json.extract[Transfer])\r\n      case \"set\" =>\r\n        set(ctx, json.extract[Map[String, Int]])\r\n      case \"putProof\" =>\r\n        put_proof(ctx, json.extract[Map[String, Any]])\r\n    }\r\n  }\r\n\r\n}\r\n",
      "cType" : "CODE_SCALA",
      "rType" : "RUN_SERIAL",
      "sType" : "STATE_BLOCK",
      "cclassification" : "CONTRACT_SYSTEM"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-27T15:32:59.584Z",
      "signature" : "MEUCIQC7tPWUTFs3vZGNIyzSN0V9Vr71XjutgvDG9uqKY3SHEwIgWki9ieGgPX4hL/NaSlyJt9i7HQnj+SjI66nRj9sxPe8="
    }
  }, {
    "id" : "37d8f37d-c2b5-45a0-a853-9534422a0715",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"97849ffa376d40bca8537f08aaa278a2a1c2bc7021a2f2db1301cf14179ba56e\",\"description\":\"转账交易\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"ContractAssetsTPL.transfer\",\"createTime\":\"2022-05-27T07:32:59.588Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-27T15:32:59.589Z",
      "signature" : "MEYCIQCJMzr6fU0PJEYWItEakQBmx/AsWsKyFIBL6boLFCHNgwIhANRY0dWn9J6Nlq2eU5I/6wL9a04mpSno0ux5yLaqeFe6"
    }
  }, {
    "id" : "39dae77d-7646-456d-81ec-6d5ff358e5a6",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"b877825de71d915677bf1a61e48d61df0187166c3f6afa5fdae3a98058cae769\",\"description\":\"初始化账户\",\"register\":\"121000005l35120456\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"ContractAssetsTPL.set\",\"createTime\":\"2022-05-27T07:32:59.588Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-27T15:32:59.591Z",
      "signature" : "MEYCIQDU5GwP0zP1q5EGOfZWGj++zhtZxPXhDPnIGAwE+g0c/QIhAJ4Zy9OBp7zuDeI6diFjC9PxIc6kBWEjNcyeNQZNzLM7"
    }
  }, {
    "id" : "74fafbc5-4a78-4087-9631-35885b5f6e9e",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"7a183b2f5b57b0d966efd031a239170e1ed2d3209217a5f7e850fa6326233bcc\",\"description\":\"存证\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"ContractAssetsTPL.putProof\",\"createTime\":\"2022-05-27T07:32:59.588Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-27T15:32:59.593Z",
      "signature" : "MEUCIAScXVDmpcZERk+E+0JFDp66c/W2S5ZSZjvrveTTGWv+AiEA3BULtGvd0FS7tc+QpbrbyaNT2aH8qUlQFZM/7BaoFZQ="
    }
  }, {
    "id" : "d0e82585-5bd3-41d0-9d15-15abde57556e",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractAssetsTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "set",
      "args" : [ "{\r\n  \"121000005l35120456\" : 10000000,\r\n  \"12110107bi45jh675g\" : 10000000,\r\n  \"122000002n00123567\" : 10000000,\r\n  \"921000005k36123789\" : 10000000,\r\n  \"921000006e0012v696\" : 10000000\r\n}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.595Z",
      "signature" : "MEYCIQDp3ZjQHpnnBCsZg6gBt/b3Rcy9C5hPSwaC6L55Y511mwIhAItzxoBZgyRomWcLOLJomYnmZEDwJNT9Gxth++thV805"
    }
  }, {
    "id" : "2ddfc839-12a9-4b05-948a-82f94abdd45b",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "RVerifiableCredentialTPL",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "package rep.sc.tpl.did\r\n\r\nimport org.json4s.DefaultFormats\r\nimport org.json4s.jackson.JsonMethods.parse\r\nimport rep.proto.rc2.{ActionResult, CreAttr, CreClaStruct, VerCreStatus}\r\nimport rep.sc.scalax.{ContractContext, ContractException, IContract}\r\nimport scalapb.json4s.JsonFormat\r\nimport rep.sc.tpl.did.DidTplPrefix._\r\n\r\n/**\r\n * 可验证凭据Verifiable Credential管理合约，\r\n * 主要提供凭据属性结构CCS管理及凭据状态VCS管理的相关合约方法，\r\n * 可验证凭据VC本身由相关使用方在链下传递使用，链上存储其属性结构和状态等可公开信息\r\n *\r\n * @author jayTsang created\r\n */\r\n\r\nclass RVerifiableCredentialTPL extends IContract{\r\n\r\n  import RVerifiableCredentialTPL._\r\n\r\n  override def init(ctx: ContractContext): Unit = {\r\n    println(s\"Inited the contract ${ctx.t.getCid.chaincodeName} by TX with the tid: ${ctx.t.id}\")\r\n  }\r\n\r\n  implicit val formats = DefaultFormats\r\n\r\n  override def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\r\n    val param = parse(sdata)\r\n\r\n    action match {\r\n      case Action.SignupCCS =>\r\n        SignupCCS(ctx, param.extract[SignupCCSParam])\r\n      case Action.UpdateCCSStatus =>\r\n        UpdateCCSStatus(ctx, param.extract[UpdateCCSStatusParam])\r\n      case Action.SignupVCStatus =>\r\n        SignupVCStatus(ctx, param.extract[SignupVCStatusParam])\r\n      case Action.UpdateVCStatus =>\r\n        UpdateVCStatus(ctx, param.extract[UpdateVCStatusParam])\r\n      case Action.RevokeVCClaims =>\r\n        RevokeVCClaims(ctx, param.extract[RevokeVCClaimsParam])\r\n      case f =>\r\n        throw ContractException(\r\n          JsonFormat.toJsonString(ActionResult(STATUS_CODE_NO_FUNCTION, s\"没有对应的合约方法:${f}\"))\r\n        )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注册可验证凭据属性结构CCS\r\n   * @param ctx\r\n   * @param param\r\n   * @return\r\n   */\r\n  def SignupCCS(ctx: ContractContext, param: SignupCCSParam): ActionResult = {\r\n    assertSignupCCSParam(param)\r\n\r\n    val ccsStateKey = ccsPrefix + param.id\r\n\r\n    assertNewWorldstate(\r\n      ctx.api.getVal(ccsStateKey),\r\n      s\"已存在可验证凭据属性结构，CCS(id:${param.id})\"\r\n    )\r\n\r\n    val creator = ctx.api.getDIDURIPrefix + ctx.t.signature.get.certId.get.creditCode\r\n    val valid = true\r\n    val version = \"1.0\"\r\n    val ccs = CreClaStruct(\r\n      id = param.id,\r\n      name = param.name,\r\n      ccsVersion = param.version,\r\n      description = param.description,\r\n      creator = creator,\r\n      created = param.created,\r\n      valid = valid,\r\n      attributes = param.attributes.map(\r\n        attr => CreAttr(attr.name, attr.`type`, attr.required, attr.description)\r\n      ),\r\n      version = version\r\n    )\r\n\r\n    ctx.api.setVal(ccsStateKey, ccs)\r\n\r\n    ActionResult(STATUS_CODE_OK, s\"成功调用注册可验证凭据属性结构方法，CCS(id: ${ccs.id})\")\r\n  }\r\n\r\n  /**\r\n   * 更新可验证凭据属性结构CCS的有效性\r\n   * @param ctx\r\n   * @param param\r\n   * @return\r\n   */\r\n  def UpdateCCSStatus(ctx: ContractContext, param: UpdateCCSStatusParam): ActionResult = {\r\n    assertUpdateCCSStatusParam(param)\r\n\r\n    val ccsStateKey = ccsPrefix + param.id\r\n    val ccs = ctx.api.getVal(ccsStateKey).asInstanceOf[CreClaStruct]\r\n\r\n    assertExistedWorldstate(\r\n      ccs,\r\n      s\"没有对应的可验证凭据属性结构，CCS(id: ${param.id})\"\r\n    )\r\n    assertInvokerIsCreator(\r\n      ctx,\r\n      ccs,\r\n      s\"更新可验证凭据属性结构有效性方法的调用者不是相应的创建者，CCS(id: ${ccs.id})\"\r\n    )\r\n\r\n    ctx.api.setVal(ccsStateKey, ccs.withValid(param.valid))\r\n\r\n    ActionResult(STATUS_CODE_OK, s\"成功调用更新可验证凭据属性结构有效性方法，CCS(id: ${ccs.id})\")\r\n  }\r\n\r\n  /**\r\n   * 注册可验证凭据状态信息VCS\r\n   * @param ctx\r\n   * @param param\r\n   * @return\r\n   */\r\n  def SignupVCStatus(ctx: ContractContext, param: SignupVCStatusParam): ActionResult = {\r\n    assertSignupVCStatusParam(param)\r\n\r\n    val vcsStateKey = vcsPrefix + param.id\r\n\r\n    assertNewWorldstate(\r\n      ctx.api.getVal(vcsStateKey),\r\n      s\"已存在可验证凭据状态信息，VCS(id:${param.id})\"\r\n    )\r\n\r\n    val creator = ctx.api.getDIDURIPrefix + ctx.t.signature.get.certId.get.creditCode\r\n    val version = \"1.0\"\r\n    val vcs = VerCreStatus(\r\n      id = param.id,\r\n      status = param.status,\r\n      revokedClaimIndex = Seq(),\r\n      creator = creator,\r\n      version = version\r\n    )\r\n    ctx.api.setVal(vcsStateKey, vcs)\r\n\r\n    ActionResult(STATUS_CODE_OK, s\"成功调用注册可验证凭据状态信息方法，VCS(id: ${vcs.id})\")\r\n  }\r\n\r\n  /**\r\n   * 更新可验证凭据状态V，即更新整个可验证凭据的状态\r\n   * @param ctx\r\n   * @param param\r\n   * @return\r\n   */\r\n  def UpdateVCStatus(ctx: ContractContext, param: UpdateVCStatusParam): ActionResult = {\r\n    assertUpdateVCStatusParam(param)\r\n\r\n    val vcsStateKey = vcsPrefix + param.id\r\n    val vcs = ctx.api.getVal(vcsStateKey).asInstanceOf[VerCreStatus]\r\n\r\n    assertExistedWorldstate(\r\n      vcs,\r\n      s\"没有对应的可验证凭据状态，VCS(id: ${param.id})\"\r\n    )\r\n    assertInvokerIsCreator(\r\n      ctx,\r\n      vcs,\r\n      s\"更新可验证凭据状态方法的调用者不是相应的创建者，VCS(id: ${vcs.id})\"\r\n    )\r\n\r\n    ctx.api.setVal(vcsStateKey, vcs.withStatus(param.status))\r\n\r\n    ActionResult(STATUS_CODE_OK, s\"成功调用更新可验证凭据状态方法，VCS(id: ${vcs.id})\")\r\n  }\r\n\r\n  /**\r\n   * 撤销可验证凭据属性，即废除可验证凭据中部分凭据属性\r\n   * @param ctx\r\n   * @param param\r\n   * @return\r\n   */\r\n  def RevokeVCClaims(ctx: ContractContext, param: RevokeVCClaimsParam): ActionResult = {\r\n    assertRevokeVCClaimsParam(param)\r\n\r\n    val vcsStateKey = vcsPrefix + param.id\r\n    val vcs = ctx.api.getVal(vcsStateKey).asInstanceOf[VerCreStatus]\r\n\r\n    assertExistedWorldstate(\r\n      vcs,\r\n      s\"没有对应的可验证凭据状态，VCS(id: ${param.id})\"\r\n    )\r\n    assertInvokerIsCreator(\r\n      ctx,\r\n      vcs,\r\n      s\"撤销可验证凭据属性方法的调用者不是相应的创建者，VCS(id: ${vcs.id})\"\r\n    )\r\n\r\n    val revokedClaimIndex = vcs.revokedClaimIndex\r\n      .union(param.revokedClaimIndex).distinct\r\n    ctx.api.setVal(vcsStateKey, vcs.withRevokedClaimIndex(revokedClaimIndex))\r\n\r\n    ActionResult(STATUS_CODE_OK, s\"成功调用撤销可验证凭据属性方法，VCS(id: ${vcs.id})\")\r\n  }\r\n}\r\n\r\nobject RVerifiableCredentialTPL {\r\n\r\n  object Action {\r\n    // actions for verifiable credential claim struct\r\n    val SignupCCS = \"signupCCS\"\r\n    val UpdateCCSStatus = \"updateCCSStatus\"\r\n\r\n    // actions for verifiable credential/claims status\r\n    val SignupVCStatus = \"signupVCStatus\"\r\n    val UpdateVCStatus = \"updateVCStatus\"\r\n    val RevokeVCClaims = \"revokeVCClaims\"\r\n  }\r\n\r\n  final case class SignupCCSAttrParam(\r\n                                       name: String,\r\n                                       `type`: String,\r\n                                       required: Boolean = true,\r\n                                       description: String\r\n                                     )\r\n  final case class SignupCCSParam(\r\n                                   id: String,\r\n                                   name: String,\r\n                                   version: String, // ccsVersion\r\n                                   created: String,\r\n                                   description: String,\r\n                                   attributes: Seq[SignupCCSAttrParam]\r\n                                 )\r\n  final case class UpdateCCSStatusParam(id: String, valid: Boolean)\r\n\r\n  final case class SignupVCStatusParam(id: String, status: String)\r\n  final case class UpdateVCStatusParam(id: String, status: String)\r\n  final case class RevokeVCClaimsParam(id: String, revokedClaimIndex: Seq[String])\r\n\r\n  val STATUS_CODE_OK             = 500200 // 合约方法调用成功\r\n  val STATUS_CODE_NO_FUNCTION    = 500300 // 无对应合约方法\r\n  val STATUS_CODE_BAD_REQUEST    = 500400 // 合约方法参数有误\r\n  val STATUS_CODE_UNAUTHORIZED   = 500401 // 没有该合约方法调用权限\r\n  val STATUS_CODE_NOT_FOUND      = 500404 // 找不到对应合约状态资源worldstate\r\n  val STATUS_CODE_ALREADY_EXISTS = 500410 // 对应合约状态资源worldstate已存在\r\n\r\n  val DID_LOCATION_DELIMITER = \"#\"\r\n\r\n  def assertSignupCCSParam(param: SignupCCSParam) = {\r\n    assertRequiredParamStrField(\"id\", param.id)\r\n    assertRequiredParamStrField(\"name\", param.name)\r\n    assertRequiredParamStrField(\"version\", param.version)\r\n    assertRequiredParamStrField(\"description\", param.description)\r\n    assertRequiredParamStrField(\"created\", param.created)\r\n    assertRequiredParamSeqSignupCCSAttrField(\"attributes\", param.attributes)\r\n  }\r\n  def assertUpdateCCSStatusParam(param: UpdateCCSStatusParam) = {\r\n    assertRequiredParamStrField(\"id\", param.id)\r\n  }\r\n\r\n  def assertSignupVCStatusParam(param: SignupVCStatusParam) = {\r\n    assertRequiredParamStrField(\"id\", param.id)\r\n    assertRequiredParamStrField(\"status\", param.status)\r\n  }\r\n  def assertUpdateVCStatusParam(param: UpdateVCStatusParam) = {\r\n    assertRequiredParamStrField(\"id\", param.id)\r\n    assertRequiredParamStrField(\"status\", param.status)\r\n  }\r\n  def assertRevokeVCClaimsParam(param: RevokeVCClaimsParam) = {\r\n    assertRequiredParamStrField(\"id\", param.id)\r\n    assertRequiredParamSeqStrField(\"revokedClaimIndex\", param.revokedClaimIndex)\r\n  }\r\n\r\n  def assertRequiredParamStrField(fieldName: String, fieldValue: String): Null = {\r\n    if (fieldValue.isBlank) {\r\n      throw ContractException(JsonFormat.toJsonString(\r\n        ActionResult(STATUS_CODE_BAD_REQUEST, s\"参数字段${fieldName}不能为空字符串\")\r\n      ))\r\n    }\r\n    null\r\n  }\r\n  def assertRequiredParamSeqStrField(fieldName: String, fieldValue: Seq[String]): Null = {\r\n    if (fieldValue.length == 0) {\r\n      throw ContractException(\r\n        JsonFormat.toJsonString(\r\n          ActionResult(STATUS_CODE_BAD_REQUEST, s\"参数字段${fieldName}不能为空数组\")\r\n        )\r\n      )\r\n    }\r\n    null\r\n  }\r\n  def assertRequiredParamSeqSignupCCSAttrField(fieldName: String, fieldValue: Seq[SignupCCSAttrParam]): Null = {\r\n    if (fieldValue.length == 0) {\r\n      throw ContractException(\r\n        JsonFormat.toJsonString(\r\n          ActionResult(STATUS_CODE_BAD_REQUEST, s\"参数字段${fieldName}不能为空数组\")\r\n        )\r\n      )\r\n    }\r\n    fieldValue.zipWithIndex.foreach {\r\n      case(attr, i) => {\r\n        assertRequiredParamStrField(s\"${fieldName}[${i}].name\", attr.name)\r\n        assertRequiredParamStrField(s\"${fieldName}[${i}].type\", attr.`type`)\r\n        assertRequiredParamStrField(s\"${fieldName}[${i}].description\", attr.description)\r\n      }\r\n    }\r\n    null\r\n  }\r\n\r\n  /**\r\n   * worldstate不应已存在\r\n   * @param worldstate\r\n   * @param message\r\n   */\r\n  def assertNewWorldstate(worldstate: Any, message: String) = {\r\n    if(worldstate != null) {\r\n      throw ContractException(\r\n        JsonFormat.toJsonString(\r\n          ActionResult(STATUS_CODE_ALREADY_EXISTS, message)\r\n        )\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * worldstate应当已存在\r\n   * @param worldstate\r\n   * @param message\r\n   */\r\n  def assertExistedWorldstate(worldstate: Any, message: String) = {\r\n    if( worldstate == null) {\r\n      throw ContractException(\r\n        JsonFormat.toJsonString(ActionResult(STATUS_CODE_NOT_FOUND, message))\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 合约方法调用者应当是worldstate的创建者\r\n   * @param worldstate\r\n   * @param message\r\n   */\r\n  def assertInvokerIsCreator(ctx: ContractContext, worldstate: Any, message: String) = {\r\n    var creator = \"\"\r\n    worldstate match {\r\n      case ccs: CreClaStruct => creator = ccs.creator.split(\":\").last\r\n      case vcs: VerCreStatus => creator = vcs.creator.split(\":\").last\r\n    }\r\n    if(creator != ctx.t.signature.get.certId.get.creditCode) {\r\n      throw ContractException(\r\n        JsonFormat.toJsonString(\r\n          ActionResult(\r\n            STATUS_CODE_UNAUTHORIZED,\r\n            message\r\n          )\r\n        )\r\n      )\r\n    }\r\n  }\r\n}\r\n",
      "cType" : "CODE_SCALA",
      "rType" : "RUN_SERIAL",
      "sType" : "STATE_BLOCK",
      "cclassification" : "CONTRACT_SYSTEM"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-27T15:32:59.597Z",
      "signature" : "MEQCIA+ilVMdbYKO5Sb/UiO9PNWjnJ5SS8PDlia3hmzMfXpHAiA03exJdWXUukNxcnXe650tZDtGNDHtrA9Hg0+/KHeo4g=="
    }
  }, {
    "id" : "5df956bb-e47e-40c4-ba63-d125d966ae7e",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"c643132be5d94b56eb21812c315b8770fb896d16d4b8592bd5413574c6eea94f\",\"description\":\"注册可验证凭据属性结构\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RVerifiableCredentialTPL.signupCCS\",\"createTime\":\"2022-05-27T07:32:59.588Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-27T15:32:59.604Z",
      "signature" : "MEUCIQC5VnJlLa6/THNC2aEm+g0lDmaBLELNv5dUeoynHY7PmwIgKU6K+IHlvnaR4X1TrJ/EqvfdOijTfhade0Kjx4KikaQ="
    }
  }, {
    "id" : "2a5bc420-4c33-467b-88db-7a87c3565c29",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"4fdebb02299b05441c20b12c021d13bf4469271d69429f600bd03bb4bbd75583\",\"description\":\"更新可验证凭据属性结构有效状态\",\"register\":\"121000005l35120456\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RVerifiableCredentialTPL.updateCCSStatus\",\"createTime\":\"2022-05-27T07:32:59.588Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-27T15:32:59.606Z",
      "signature" : "MEYCIQDMsZx/mUt9bzHKd+hMVdbIYwlywbLhjlzi/2KGm+/HAQIhAIkVtyiAJVx7khvYwiH9QYdbE/AHIHbYQ9Ytb6EhViLC"
    }
  }, {
    "id" : "a1340f9a-319a-4328-a32e-6fb72c03b6c0",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"ce12f269b48bee1e8fc2d793b9bb89b738ce5db56fc8669e3354c462dc4af08b\",\"description\":\"注册可验证凭据状态\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RVerifiableCredentialTPL.signupVCStatus\",\"createTime\":\"2022-05-27T07:32:59.588Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-27T15:32:59.608Z",
      "signature" : "MEUCIQCDiLr6N09H6d7+imgdNSisu2K/O7jmh2MsadskS6q10AIgK1NuOmGl4z/5GoxzMuuakkC7gjSUeCByWI21Mr8pshg="
    }
  }, {
    "id" : "b018bef3-20f2-48ce-a626-ff7cddca1f21",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"031832c78dedc3007170d741b7fc772439eec855f85054d81cb3f93dd42d06d4\",\"description\":\"更新可验证凭据状态\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RVerifiableCredentialTPL.updateVCStatus\",\"createTime\":\"2022-05-27T07:32:59.588Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-27T15:32:59.610Z",
      "signature" : "MEQCIFdMkYMl1NLoYDmNsMmcQFxWhDBbbnfsM2JYhSz0w4beAiA/qL8QvGzO4+U+d52IMZg9dzQpuytWEjmkUFQkudQlNg=="
    }
  }, {
    "id" : "d9c5ac16-a648-4c34-b226-c52ddccaf6be",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"3d8ca6ebe2693af9ed9081ea49c4d15c3bab63aa773834f0db40fb2eb54b20d9\",\"description\":\"撤销可验证凭据属性状态\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RVerifiableCredentialTPL.revokeVCClaims\",\"createTime\":\"2022-05-27T07:32:59.588Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-27T15:32:59.613Z",
      "signature" : "MEUCIQCe+1i7aI1GGNwxCW1ztRLyVAsVrfAfHeUnVGBXolhN4gIgNl2NrwgRSTaQbFkC8TjbKlG49WnTgFG262nLcGiva2I="
    }
  }, {
    "id" : "94d37175-fdb7-4487-9305-5630ba57f313",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "InterfaceCooperation",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "package rep.sc.tpl.cooper\r\n\r\nimport org.bouncycastle.util.io.pem.PemReader\r\nimport org.json4s.jackson.JsonMethods.parse\r\nimport org.json4s.jackson.Serialization.{read, writePretty}\r\nimport org.json4s.{DefaultFormats, MappingException}\r\nimport rep.crypto.BytesHex\r\nimport rep.proto.rc2.{ActionResult, Certificate}\r\nimport rep.sc.scalax.{ContractContext, ContractException, IContract}\r\nimport rep.sc.tpl.did.DidTplPrefix.certPrefix\r\nimport rep.utils.SerializeUtils\r\n\r\nimport java.io.{ByteArrayInputStream, StringReader}\r\nimport java.nio.charset.StandardCharsets\r\nimport java.security.PublicKey\r\nimport java.security.cert.{CertificateFactory, X509Certificate}\r\n\r\n\r\n/**\r\n  * 接口定义\r\n  *\r\n  * @param id           接口定义ID\r\n  * @param `type`       接口定义的类型，1：grpc，2：wsdl\r\n  * @param version      接口定义版本号\r\n  * @param name         接口名\r\n  * @param algo_hash    生成内容 Hash 采用的算法\r\n  * @param algo_sign    对内容 Hash 的生成签名的算法\r\n  * @param para         参数数据结构定义\r\n  * @param serv         接口服务定义，包括初始接口请求、中间接口请求、结束接口请求三者的方法及参数定义\r\n  * @param serv_doc     接口服务说明\r\n  * @param callBack     应答接收定义，包括初始接口应答、中间接口应答、结束接口应答三者的方法及参数定义\r\n  * @param callback_doc 应答接收说明\r\n  */\r\nfinal case class ApiDefinition(id: String, `type`: String, version: String, name: String, algo_hash: String, algo_sign: String, para: Option[String],\r\n                               serv: Option[String], serv_doc: Option[String], callBack: Option[String], callback_doc: Option[String])\r\n\r\n/**\r\n  * 接口服务和应答\r\n  *\r\n  * @param id      接口服务 Id 或 应答接收 Id\r\n  * @param name    接口服务或者应答名字\r\n  * @param d_id    接口服务所实现的接口定义 Id 或 应答接收所实现的接口定义 Id\r\n  * @param version 接口服务所实现的接口定义版本 或 应答接收所实现的接口定义版本\r\n  * @param e_id    提供接口服务的参与方 Id 或 提供应答接收的参与方 Id\r\n  * @param addr    接口服务地址 或 应答接收地址\r\n  * @param port    接口服务端口 或 应答接收端口\r\n  */\r\nfinal case class ApiServAndAck(id: String, name: String, d_id: String, version: String, e_id: String, addr: String, port: Int)\r\n\r\n/**\r\n  *\r\n  * @param eid        身份ID\r\n  * @param cert_name  证书别名\r\n  * @param hash       内容Hash\r\n  * @param timeCreate 签名时刻\r\n  * @param sign       数字签名\r\n  */\r\nfinal case class Signature(eid: String, cert_name: String, hash: String, timeCreate: Long, sign: String)\r\n\r\n/**\r\n  *\r\n  * @param cid        接口请求 Id\r\n  * @param e_from     请求方的应答接收 Id\r\n  * @param e_to       请求的接口服务 Id\r\n  * @param method     调用的方法\r\n  * @param b_req      请求 or 应答标志, True 代表请求; False 代表应答\r\n  * @param b_end      结束标志, True 代表结束（即本次请求/应答为最后一个）,False代表未结束\r\n  * @param seq        请求或应答的序号, 从1开始\r\n  * @param hash       请求/应答内容 Hash依据 b_req 和 b_end 的值，分别对应 rb、ri、re 和 cb、ci、ce 方法的请求/应答内容的按照接口定义中指定的 Hash 算法生成的 Hash\r\n  * @param hash_claim 选择性披露 Hash，最后一个应答后，由所有请求和应答的 Hash 按顺序拼接后取 Hash 生成\r\n  * @param tm_create  请求/应答建立的时间\r\n  * @param sign_r     接口请求方按照接口定义中指定的签名算法对内容 Hash 的签名\r\n  * @param sign_c     接口服务方按照接口定义中指定的签名算法对内容 Hash 的签名\r\n  */\r\nfinal case class ReqAckProof(cid: String, e_from: String, e_to: String, method: String, b_req: Boolean, b_end: Boolean, seq: Int,\r\n                             hash: String, hash_claim: Option[String], tm_create: Long, sign_r: Signature, sign_c: Signature)\r\n\r\n/**\r\n  * @author zyf\r\n  */\r\nclass InterfaceCooperation extends IContract {\r\n\r\n  // 从账户管理合约中读取账户 ID\r\n  val didTplName = \"RdidOperateAuthorizeTPL\"\r\n  // 分割横线\r\n  val infix = \"-\"\r\n  // 前缀标识\r\n  val apiDefPrefix = \"api-def-main\"\r\n  val defVersionPrefix = \"api-def-version\"\r\n  val defHolderPrefix = \"api-def-holder\"\r\n  val apiServPrefix = \"api-service-main\"\r\n  val ackRecPrefix = \"ack-receive-main\"\r\n  val servHolderPrefix = \"api-service-holder\"\r\n  val receHolderPrefix = \"ack-receive-holder\"\r\n  val reqAckRequestPrefix = \"req-ack-proof-request\"\r\n  val reqAckReponsePrefix = \"req-ack-proof-response\"\r\n\r\n  // Json序列化与反序列化时使用的格式\r\n  implicit val formats = DefaultFormats\r\n\r\n  object ACTION {\r\n\r\n    object InterfaceRegister {\r\n      val registerApiDefinition = \"registerApiDefinition\"\r\n      val registerApiService = \"registerApiService\"\r\n      val registerApiAckReceive = \"registerApiAckReceive\"\r\n    }\r\n\r\n    object InterfaceReqAckProof {\r\n      val reqAckProof = \"reqAckProof\"\r\n    }\r\n\r\n  }\r\n\r\n  override def init(ctx: ContractContext): Unit = {\r\n\r\n    println(s\"init contract, tx‘s id is ${ctx.t.id}, contract’s name is ${ctx.t.getCid.chaincodeName}, contract’s version is ${ctx.t.getCid.version}\")\r\n    ctx.api.getLogger.info(s\"init contract, tx‘s id is ${ctx.t.id}, contract’s name is ${ctx.t.getCid.chaincodeName}, contract’s version is ${ctx.t.getCid.version}\")\r\n\r\n  }\r\n\r\n  /**\r\n    * 注册接口定义\r\n    *\r\n    * @param ctx\r\n    * @param apiDefinition\r\n    * @return\r\n    */\r\n  def registerApiDefinition(ctx: ContractContext, apiDefinition: ApiDefinition): ActionResult = {\r\n    val txr_credit_code = ctx.t.getSignature.getCertId.creditCode\r\n    val def_key = apiDefPrefix + infix + txr_credit_code + infix + apiDefinition.id + infix + apiDefinition.version\r\n    val def_version_key = defVersionPrefix + infix + txr_credit_code + infix + apiDefinition.id + infix + apiDefinition.version\r\n    val def_holder_key = defVersionPrefix + infix + apiDefinition.id\r\n    // 判断是否是自己注册的\r\n    if (ctx.api.getVal(def_holder_key) == null || ctx.api.getVal(def_holder_key) == txr_credit_code) {\r\n      // 自己先前注册过，现在要注册的是新的版本\r\n      if (ctx.api.getVal(def_key) != null) {\r\n        ctx.api.getLogger.info(s\"接口定义方 $txr_credit_code 更新定义API ${writePretty(apiDefinition)}\")\r\n      }\r\n      // 保存apiDefinition，使用jsonString\r\n      ctx.api.setVal(def_key, writePretty(apiDefinition))\r\n      // 设置当前版本号\r\n      ctx.api.setVal(def_version_key, apiDefinition.version)\r\n      // 设置接口定义者，即该接口定义是谁来定义的，只能由此人进行更新\r\n      ctx.api.setVal(def_holder_key, txr_credit_code)\r\n      ctx.api.getLogger.info(s\"接口定义方 $txr_credit_code 定义API ${writePretty(apiDefinition)}\")\r\n    } else {\r\n      throw ContractException(s\"用户 $txr_credit_code 非注册接口定义者,不能执行更新操作\")\r\n    }\r\n    null\r\n  }\r\n\r\n  /**\r\n    * 接口服务登记，接口服务方来调用该方法\r\n    * 接口服务方或者代理方 发布指定接口定义的接口请求实现实例\r\n    *\r\n    * @param ctx\r\n    * @param apiServAndAck\r\n    * @return\r\n    */\r\n  def registerApiService(ctx: ContractContext, apiServAndAck: ApiServAndAck): ActionResult = {\r\n    val txr_credit_code = ctx.t.getSignature.getCertId.creditCode\r\n    val def_holder_key = defVersionPrefix + infix + apiServAndAck.d_id\r\n    val service_holder_key = servHolderPrefix + infix + apiServAndAck.id\r\n    val def_holder = ctx.api.getVal(def_holder_key)\r\n    if (def_holder != null) {\r\n      val def_key = apiDefPrefix + infix + def_holder.asInstanceOf[String] + infix + apiServAndAck.d_id + infix + apiServAndAck.version\r\n      // 判断接口定义(id+version)是否存在\r\n      if (ctx.api.getVal(def_key) != null) {\r\n        // 判断参与方是否被注册,且是e_id == credit_code\r\n        if (txr_credit_code == apiServAndAck.e_id) {\r\n          ctx.api.setVal(apiServPrefix + infix + apiServAndAck.e_id + infix + apiServAndAck.id, writePretty(apiServAndAck))\r\n          ctx.api.setVal(service_holder_key, apiServAndAck.e_id)\r\n          ctx.api.getLogger.info(s\"接口服务方/代理方 ${txr_credit_code} 发布接口服务登记 ${writePretty(apiServAndAck)}\")\r\n        } else {\r\n          ctx.api.getLogger.error(s\"e_id ${apiServAndAck.e_id} != credit_code $txr_credit_code\")\r\n          throw ContractException(s\"e_id ${apiServAndAck.e_id} != credit_code $txr_credit_code\")\r\n        }\r\n      } else {\r\n        ctx.api.getLogger.error(s\"id为${apiServAndAck.d_id}, 版本为${apiServAndAck.version} 的接口定义不存在\")\r\n        throw ContractException(s\"id为${apiServAndAck.d_id}, 版本为${apiServAndAck.version} 的接口定义不存在\")\r\n      }\r\n    } else {\r\n      ctx.api.getLogger.error(s\"id为${apiServAndAck.d_id} 的接口定义不存在\")\r\n      throw ContractException(s\"id为${apiServAndAck.d_id} 的接口定义不存在\")\r\n    }\r\n    null\r\n  }\r\n\r\n  /**\r\n    * 应答接收登记，接口请求方来调用该方法\r\n    * 接口请求方或者代理方发布指定接口定义的接口应答实现实例\r\n    *\r\n    * @param ctx\r\n    * @param apiServAndAck\r\n    * @return\r\n    */\r\n  def registerApiAckReceive(ctx: ContractContext, apiServAndAck: ApiServAndAck): ActionResult = {\r\n    val txr_credit_code = ctx.t.getSignature.getCertId.creditCode\r\n    val def_holder_key = defVersionPrefix + infix + apiServAndAck.d_id\r\n    val ack_holder_key = receHolderPrefix + infix + apiServAndAck.id\r\n    val def_holder = ctx.api.getVal(def_holder_key)\r\n    if (def_holder != null) {\r\n      val def_key = apiDefPrefix + infix + def_holder.asInstanceOf[String] + infix + apiServAndAck.d_id + infix + apiServAndAck.version\r\n      // 判断接口定义(id+version)是否存在\r\n      if (ctx.api.getVal(def_key) != null) {\r\n        // 判断参与方是否被注册,且是e_id == credit_code\r\n        // TODO 判断服务是否已经被注册？\r\n        if (txr_credit_code == apiServAndAck.e_id) {\r\n          ctx.api.setVal(ackRecPrefix + infix + apiServAndAck.e_id + infix + apiServAndAck.id, writePretty(apiServAndAck))\r\n          ctx.api.setVal(ack_holder_key, apiServAndAck.e_id)\r\n          ctx.api.getLogger.info(s\"接口服务方/代理方 ${txr_credit_code} 发布接口应答登记 ${writePretty(apiServAndAck)}\")\r\n        } else {\r\n          ctx.api.getLogger.error(s\"e_id ${apiServAndAck.e_id} != credit_code $txr_credit_code\")\r\n          throw ContractException(s\"e_id ${apiServAndAck.e_id} != credit_code $txr_credit_code\")\r\n        }\r\n      } else {\r\n        ctx.api.getLogger.error(s\"id为${apiServAndAck.d_id}, 版本为${apiServAndAck.version} 的接口定义不存在\")\r\n        throw ContractException(s\"id为${apiServAndAck.d_id}, 版本为${apiServAndAck.version} 的接口定义不存在\")\r\n      }\r\n    } else {\r\n      ctx.api.getLogger.error(s\"id为${apiServAndAck.d_id} 的接口定义不存在\")\r\n      throw ContractException(s\"id为${apiServAndAck.d_id} 的接口定义不存在\")\r\n    }\r\n    null\r\n  }\r\n\r\n  /**\r\n    * 请求存证：请求方或者代理方提交交易提交签名交易\r\n    * 应答存证：服务方或者代理方提交交易提交签名交易\r\n    *\r\n    * @param ctx\r\n    * @param reqAckProof\r\n    * @return\r\n    */\r\n  def reqAckProof(ctx: ContractContext, reqAckProof: ReqAckProof): ActionResult = {\r\n    val txr_credit_code = ctx.t.getSignature.getCertId.creditCode\r\n    // 应答注册者\r\n    val ack_holder_key = receHolderPrefix + infix + reqAckProof.e_from\r\n    // 服务注册者\r\n    val service_holder_key = servHolderPrefix + infix + reqAckProof.e_to\r\n    val ack_holder = ctx.api.getVal(ack_holder_key)\r\n    val service_holder = ctx.api.getVal(service_holder_key)\r\n    // 可根据是否有应答注册者或服务注册者来判断接口服务以及判断接口应答是否被登记\r\n    if (service_holder != null && ack_holder != null) {\r\n      // e_from与e_to的校验\r\n      // 请求方注册的应答接收\r\n      val ack_receive = ctx.api.getVal(ackRecPrefix + infix + ack_holder.asInstanceOf[String] + infix + reqAckProof.e_from)\r\n      val servAndAck_receive = read[ApiServAndAck](ack_receive.asInstanceOf[String])\r\n      // 服务方注册的接口服务\r\n      val api_service = ctx.api.getVal(apiServPrefix + infix + service_holder.asInstanceOf[String] + infix + reqAckProof.e_to)\r\n      val servAndAck_service = read[ApiServAndAck](api_service.asInstanceOf[String])\r\n      if (reqAckProof.b_req) {\r\n        // 交易提交者需是接口请求方，由e_from 获得 ack_receive 来判断，判断应答接收注册者是否就是交易提交者\r\n        if (servAndAck_receive.e_id == txr_credit_code) {\r\n          // 对Signature中的 e_id 进行校验\r\n          if (servAndAck_receive.e_id == reqAckProof.sign_r.eid && servAndAck_service.e_id == reqAckProof.sign_c.eid) {\r\n            // 使用 e_from 或 e_to 可以关联到登记应答接收和接口服务的参与方，并获得其绑定的证书，关联到定义，拿到签名算法\r\n            // 接口定义持有者\r\n            val def_holder_key = defVersionPrefix + infix + servAndAck_receive.d_id\r\n            val def_key = apiDefPrefix + infix + ctx.api.getVal(def_holder_key) + infix + servAndAck_receive.d_id + infix + servAndAck_receive.version\r\n            val api_def = read[ApiDefinition](ctx.api.getVal(def_key).asInstanceOf[String])\r\n            val sig_alg = api_def.algo_sign\r\n            ctx.api.getLogger.info(s\"def_key 为 $def_key, api_def 为 $api_def, sig_alg为 $sig_alg\")\r\n            // 验证请求方\r\n            val req_x509cert = getX509Cert(ctx, reqAckProof.sign_r.eid, reqAckProof.sign_r.cert_name)\r\n            val req_verifyRes = verify(sig_alg, BytesHex.hex2bytes(reqAckProof.sign_r.sign), reqAckProof.sign_r.hash.getBytes(StandardCharsets.UTF_8), req_x509cert.getPublicKey)\r\n            ctx.api.getLogger.info(s\"对请求方签名数据进行验签, credit_code 为 ${reqAckProof.sign_r.eid}, cert_name ${reqAckProof.sign_r.cert_name}, cert $req_x509cert, verify_req_res $req_verifyRes\")\r\n            // 验证服务方\r\n            val resp_x509cert = getX509Cert(ctx, reqAckProof.sign_c.eid, reqAckProof.sign_c.cert_name)\r\n            val resp_verifyRes = verify(sig_alg, BytesHex.hex2bytes(reqAckProof.sign_c.sign), reqAckProof.sign_c.hash.getBytes(StandardCharsets.UTF_8), resp_x509cert.getPublicKey)\r\n            ctx.api.getLogger.info(s\"对服务方签名数据进行验签, credit_code 为 ${reqAckProof.sign_c.eid}, cert_name ${reqAckProof.sign_c.cert_name}, cert $resp_x509cert, verify_resp_res $resp_verifyRes\")\r\n            if (!req_verifyRes || !resp_verifyRes) {\r\n              throw ContractException(s\"请求方签名验签结果为$req_verifyRes, 服务方签名验签结果为$resp_verifyRes\")\r\n            }\r\n          } else if (servAndAck_receive.e_id != reqAckProof.sign_r.eid && servAndAck_service.e_id == reqAckProof.sign_c.eid) {\r\n            throw ContractException(s\"sign_r e_id ${reqAckProof.sign_r.eid} 不等于接口请求方 credit_code ${servAndAck_receive.e_id}\")\r\n          } else if (servAndAck_receive.e_id == reqAckProof.sign_r.eid && servAndAck_service.e_id != reqAckProof.sign_c.eid) {\r\n            throw ContractException(s\"sign_c e_id ${reqAckProof.sign_c.eid} 不等于接口服务方 credit_code ${servAndAck_service.e_id}\")\r\n          } else {\r\n            throw ContractException(s\"sign_r e_id ${reqAckProof.sign_r.eid} 不等于接口请求方 credit_code ${servAndAck_service.e_id}, sign_c e_id ${reqAckProof.sign_c.eid} 不等于接口服务方 credit_code ${reqAckProof.sign_c.eid}\")\r\n          }\r\n          ctx.api.getLogger.info(s\"接口请求存证,请求id为${reqAckProof.cid},序号为${reqAckProof.seq},数据为${writePretty(reqAckProof)}\")\r\n          ctx.api.setVal(reqAckRequestPrefix + infix + reqAckProof.cid + infix + reqAckProof.seq, writePretty(reqAckProof))\r\n        } else {\r\n          ctx.api.getLogger.error(s\"接口请求方 e_id ${servAndAck_service.e_id} != credit_code $txr_credit_code\")\r\n          throw ContractException(s\"接口请求方 ${servAndAck_service.e_id} != credit_code $txr_credit_code\")\r\n        }\r\n      } else {\r\n        // 交易提交者需是接口服务方，由e_to 获得 api_service 来判断，判断应答注册者是否就是交易提交者\r\n        if (servAndAck_service.e_id == txr_credit_code) {\r\n          // 对Signature中的 e_id 进行校验\r\n          if (servAndAck_service.e_id == reqAckProof.sign_c.eid && servAndAck_receive.e_id == reqAckProof.sign_r.eid) {\r\n            // 使用 e_from 或 e_to 可以关联到登记应答接收和接口服务的参与方，并获得其绑定的证书，关联到定义，拿到签名算法\r\n            // 接口定义持有者\r\n            val def_holder_key = defVersionPrefix + infix + servAndAck_service.d_id\r\n            val def_key = apiDefPrefix + infix + ctx.api.getVal(def_holder_key) + infix + servAndAck_service.d_id + infix + servAndAck_service.version\r\n            val api_def = read[ApiDefinition](ctx.api.getVal(def_key).asInstanceOf[String])\r\n            val sig_alg = api_def.algo_sign\r\n            ctx.api.getLogger.info(s\"def_key 为 $def_key, api_def 为 $api_def, sig_alg为 $sig_alg\")\r\n            // 验证服务方\r\n            val resp_x509cert = getX509Cert(ctx, reqAckProof.sign_c.eid, reqAckProof.sign_c.cert_name)\r\n            val resp_verifyRes = verify(sig_alg, BytesHex.hex2bytes(reqAckProof.sign_c.sign), reqAckProof.sign_c.hash.getBytes(StandardCharsets.UTF_8), resp_x509cert.getPublicKey)\r\n            ctx.api.getLogger.info(s\"对服务方签名数据进行验签, credit_code 为 ${reqAckProof.sign_c.eid}, cert_name ${reqAckProof.sign_c.cert_name}, cert $resp_x509cert, verify_resp_res $resp_verifyRes\")\r\n            // 验证请求方\r\n            val req_x509cert = getX509Cert(ctx, reqAckProof.sign_r.eid, reqAckProof.sign_r.cert_name)\r\n            val req_verifyRes = verify(sig_alg, BytesHex.hex2bytes(reqAckProof.sign_r.sign), reqAckProof.sign_r.hash.getBytes(StandardCharsets.UTF_8), req_x509cert.getPublicKey)\r\n            ctx.api.getLogger.info(s\"对请求方签名数据进行验签, credit_code 为 ${reqAckProof.sign_r.eid}, cert_name ${reqAckProof.sign_r.cert_name}, cert $req_x509cert, verify_req_res $req_verifyRes\")\r\n            if (!resp_verifyRes || !req_verifyRes) {\r\n              throw ContractException(s\"请求方签名验签结果为$req_verifyRes, 服务方签名验签结果为$resp_verifyRes\")\r\n            }\r\n          } else if (servAndAck_service.e_id != reqAckProof.sign_c.eid && servAndAck_receive.e_id == reqAckProof.sign_r.eid) {\r\n            throw ContractException(s\"sign_c e_id ${reqAckProof.sign_c.eid} 不等于接口服务方 credit_code ${servAndAck_service.e_id}\")\r\n          } else if (servAndAck_service.e_id == reqAckProof.sign_c.eid && servAndAck_receive.e_id != reqAckProof.sign_r.eid) {\r\n            throw ContractException(s\"sign_r e_id ${reqAckProof.sign_r.eid} 不等于接口请求方 credit_code ${servAndAck_receive.e_id}\")\r\n          } else {\r\n            throw ContractException(s\"sign_r e_id ${reqAckProof.sign_r.eid} 不等于接口请求方 credit_code ${servAndAck_receive.e_id}, sign_c e_id ${reqAckProof.sign_c.eid} 不等于接口服务方 credit_code ${servAndAck_service.e_id}\")\r\n          }\r\n          ctx.api.getLogger.info(s\"接口应答存证,请求id为${reqAckProof.cid},序号为${reqAckProof.seq},数据为${writePretty(reqAckProof)}\")\r\n          ctx.api.setVal(reqAckReponsePrefix + infix + reqAckProof.cid + infix + reqAckProof.seq, writePretty(reqAckProof))\r\n        } else {\r\n          ctx.api.getLogger.error(s\"接口服务方 e_id ${servAndAck_receive.e_id} 不等于交易提交者 credit_code $txr_credit_code\")\r\n          throw ContractException(s\"接口服务方 e_id ${servAndAck_receive.e_id} 不等于交易提交者 credit_code $txr_credit_code\")\r\n        }\r\n      }\r\n    } else if (service_holder == null && ack_holder != null) {\r\n      ctx.api.getLogger.error(s\"没有接口服务id为 ${reqAckProof.e_to} 的接口服务登记\")\r\n      throw ContractException(s\"没有接口服务id为 ${reqAckProof.e_to} 的接口服务登记\")\r\n    } else if (service_holder != null && ack_holder == null) {\r\n      ctx.api.getLogger.error(s\"没有接口应答id为 ${reqAckProof.e_from} 的接口应答登记\")\r\n      throw ContractException(s\"没有接口应答id为 ${reqAckProof.e_from} 的接口应答登记\")\r\n    } else {\r\n      ctx.api.getLogger.error(s\"没有接口服务id为 ${reqAckProof.e_to} 的接口服务登记, 且没有接口应答id为 ${reqAckProof.e_from} 的接口应答登记\")\r\n      throw ContractException(s\"没有接口服务id为 ${reqAckProof.e_to} 的接口服务登记, 且没有接口应答id为 ${reqAckProof.e_from} 的接口应答登记\")\r\n    }\r\n    null\r\n  }\r\n\r\n  /**\r\n    * 用来验证内容签名\r\n    *\r\n    * @param alg       签名验签算法\r\n    * @param signature 签名数据\r\n    * @param message   被签名的数据\r\n    * @param publicKey 公钥\r\n    * @return\r\n    */\r\n  def verify(alg: String, signature: Array[Byte], message: Array[Byte], publicKey: PublicKey): Boolean = {\r\n    if (publicKey == null) throw ContractException(\"验证签名时公钥为空！\")\r\n    if (signature == null || signature.length <= 0) throw ContractException(\"待验证的签名信息为空！\")\r\n    if (message == null || message.length <= 0) throw ContractException(\"待签名内容为空！\")\r\n    try {\r\n      val s2 = java.security.Signature.getInstance(alg)\r\n      s2.initVerify(publicKey)\r\n      s2.update(message)\r\n      s2.verify(signature)\r\n    } catch {\r\n      case ex: Exception => throw ContractException(ex.getMessage)\r\n    }\r\n  }\r\n\r\n  /**\r\n    * 根据证书pem字符串，构造证书，construct certificate by pemString\r\n    *\r\n    * @param ctx\r\n    * @param creditCode\r\n    * @param certName\r\n    * @throws Exception\r\n    * @return X509Certificate\r\n    */\r\n  @throws[Exception]\r\n  def getX509Cert(ctx: ContractContext, creditCode: String, certName: String): X509Certificate = {\r\n    val cert = SerializeUtils.deserialise(ctx.api.getStateEx(ctx.api.getChainNetId, didTplName, certPrefix + creditCode + \".\" + certName).asInstanceOf[Array[Byte]]).asInstanceOf[Certificate]\r\n    // cert.certificate 是读取pem证书文件得到的字符串\r\n    val stringReader = new StringReader(cert.certificate)\r\n    val pemReader = new PemReader(stringReader)\r\n    val cf = CertificateFactory.getInstance(\"X.509\")\r\n    val certByte = pemReader.readPemObject.getContent\r\n    val x509Cert = cf.generateCertificate(new ByteArrayInputStream(certByte)).asInstanceOf[X509Certificate]\r\n    pemReader.close()\r\n    stringReader.close\r\n    x509Cert\r\n  }\r\n\r\n\r\n  override def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\r\n\r\n    // Json序列化与反序列化时使用的格式\r\n    implicit val formats = DefaultFormats\r\n\r\n    val json = parse(sdata)\r\n\r\n    try {\r\n      action match {\r\n        // 接口定义及相关登记\r\n        case ACTION.InterfaceRegister.registerApiDefinition => registerApiDefinition(ctx, json.extract[ApiDefinition])\r\n        // 接口服务登记\r\n        case ACTION.InterfaceRegister.registerApiService => registerApiService(ctx, json.extract[ApiServAndAck])\r\n        // 接口应答登记\r\n        case ACTION.InterfaceRegister.registerApiAckReceive => registerApiAckReceive(ctx, json.extract[ApiServAndAck])\r\n        // 请求应答存证\r\n        case ACTION.InterfaceReqAckProof.reqAckProof => reqAckProof(ctx, json.extract[ReqAckProof])\r\n        // 未匹配到的\r\n        case _ => throw ContractException(\"no such method\")\r\n      }\r\n    } catch {\r\n      case ex: MappingException => throw ContractException(ex.getMessage)\r\n    }\r\n  }\r\n}\r\n",
      "cType" : "CODE_SCALA",
      "rType" : "RUN_SERIAL",
      "sType" : "STATE_BLOCK",
      "cclassification" : "CONTRACT_SYSTEM"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.616Z",
      "signature" : "MEUCIFktufRCEWJPDDMq7nEGsLU9YrQPNFlzzhEF4y8cU07DAiEAmVZrk6zkpxoBV2jUUqiFV7spMfcWf0pi/Y9K14HrRUA="
    }
  }, {
    "id" : "1cef6f15-cb66-4a41-8d46-ded42a13e07b",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"be880a065bfcc88156380237eaadf7f0fbf64a29ccadd11afa8d800d7e971e95\",\"description\":\"注册接口定义\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"InterfaceCooperation.registerApiDefinition\",\"createTime\":\"2022-05-27T07:32:59.623Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.626Z",
      "signature" : "MEYCIQCZ2P3SjHHs2hSiJgst6olcLzpeZk3Rz/iuMFwmAfrECAIhAKRY6EzK0tgj0zDP1oN1qmM4Pgi1lA/VNiAIaXDkxzPc"
    }
  }, {
    "id" : "07d55586-6562-449f-bc2b-00796ffe4ef7",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"bb8305ccd5eb9687f7e188ce7db59cc84fa82466717e4ab95315790388f8a213\",\"description\":\"注册接口服务\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"InterfaceCooperation.registerApiService\",\"createTime\":\"2022-05-27T07:32:59.623Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.628Z",
      "signature" : "MEYCIQDQGP4WcdP7IDW1X8cByBtTkET1unTjBnoXzvA4nGx4MQIhAOOc2/tfpQprNIcYCqBQuXNTzHsQgV6wr/hiDyxTIwCq"
    }
  }, {
    "id" : "e1704fca-b7bc-4501-b137-0a9dc8df1e42",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"251f1f3712bc98498c766b744c67ff2bee62d4210f01c8be9a2f3965362e0542\",\"description\":\"注册接口应答\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"InterfaceCooperation.registerApiAckReceive\",\"createTime\":\"2022-05-27T07:32:59.623Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.631Z",
      "signature" : "MEQCIHRncu6A6HBD5bomv8ugGA5kzeBZZMc5mrxXgjnWI6KiAiBdukpXQXtcT1B0D8adMQarlpTmC/8CNlDsILU/fQYTxA=="
    }
  }, {
    "id" : "5295b977-972d-4565-beba-a7b370a9387a",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"b5d55e371656a809806f457c0a50c8da4dbb8f145408c01cc804eebc47e5f551\",\"description\":\"请求应答存证\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"InterfaceCooperation.reqAckProof\",\"createTime\":\"2022-05-27T07:32:59.623Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-27T15:32:59.634Z",
      "signature" : "MEUCIQCeaXLhDNADFN8qcD6MmD/nJaQBJLVcVwRA/gh7S1qRPgIgHnRyN6xpUmddbVrRZS7lwMuITzJi1OGGSilfZ+Xm59A="
    }
  } ]
}