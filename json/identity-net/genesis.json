{
  "header" : {
    "version" : 2,
    "height" : "1"
  },
  "transactions" : [ {
    "id" : "5c1bcd72-2b2e-48d3-a8c5-28aa5cf36821",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "package rep.sc.tpl.did\n\nimport org.json4s.DefaultFormats\nimport org.json4s.jackson.JsonMethods.parse\nimport rep.proto.rc2.{ActionResult, BindCertToAuthorize, Certificate, Operate, Signer}\nimport rep.sc.scalax.{ContractContext, ContractException, IContract}\nimport rep.sc.tpl.did.operation.AuthOperation.AuthorizeStatus\nimport rep.sc.tpl.did.operation.CertOperation.CertStatus\nimport rep.sc.tpl.did.operation.OperOperation.OperateStatus\nimport rep.sc.tpl.did.operation.SignerOperation.SignerStatus\nimport rep.sc.tpl.did.operation.{AuthOperation, CertOperation, OperOperation, SignerOperation}\nimport scalapb.json4s.JsonFormat\n\n\n/**\n  * @author zyf\n  */\nobject RdidOperateAuthorizeTPL {\n\n\n}\n\n/**\n  * @author zyf\n  */\nclass RdidOperateAuthorizeTPL extends IContract {\n\n  object ACTION {\n\n    object Signer {\n      val signUpSigner = \"signUpSigner\"\n      val updateSigner = \"updateSigner\"\n      val updateSignerStatus = \"updateSignerStatus\"\n    }\n\n    object Certificate {\n      val signUpCertificate = \"signUpCertificate\" // 无需授权\n      val updateCertificateStatus = \"updateCertificateStatus\" // 无需授权\n      val signUpAllTypeCertificate = \"signUpAllTypeCertificate\" // 需授权\n      val updateAllTypeCertificateStatus = \"updateAllTypeCertificateStatus\" // 需授权\n    }\n\n    object Authorize {\n      val grantOperate = \"grantOperate\"\n      val updateGrantOperateStatus = \"updateGrantOperateStatus\"\n      val bindCertToAuthorize = \"bindCertToAuthorize\"\n    }\n\n    object Operate {\n      val signUpOperate = \"signUpOperate\"\n      val updateOperateStatus = \"updateOperateStatus\"\n    }\n\n  }\n\n\n  implicit val formats = DefaultFormats\n\n  def init(ctx: ContractContext): Unit = {\n    println(s\"tid: $ctx.t.id\")\n  }\n\n  def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\n\n    // 两种序列化方式，如果复杂的 pb 结构体（比如带有枚举类型），则只能使用 pb 自带的 json 序列化方式\n    val param = parse(sdata)\n    val parser = JsonFormat.parser\n    type AuthorizeJString = String\n\n    action match {\n      case ACTION.Signer.signUpSigner =>\n        SignerOperation.signUpSigner(ctx, parser.fromJsonString(sdata)(Signer))\n\n      case ACTION.Signer.updateSigner =>\n        SignerOperation.updateSigner(ctx, parser.fromJsonString(sdata)(Signer))\n\n      case ACTION.Signer.updateSignerStatus =>\n        SignerOperation.updateSignerStatus(ctx, param.extract[SignerStatus])\n\n      case ACTION.Certificate.signUpCertificate =>\n        CertOperation.signUpCertificate(ctx, parser.fromJsonString(sdata)(Certificate))\n\n      case ACTION.Certificate.updateCertificateStatus =>\n        CertOperation.updateCertificateStatus(ctx, param.extract[CertStatus])\n\n      case ACTION.Certificate.signUpAllTypeCertificate =>\n        CertOperation.signUpAllTypeCertificate(ctx, parser.fromJsonString(sdata)(Certificate))\n\n      case ACTION.Certificate.updateAllTypeCertificateStatus =>\n        CertOperation.updateAllTypeCertificateStatus(ctx, param.extract[CertStatus])\n\n      case ACTION.Operate.signUpOperate =>\n        OperOperation.signUpOperate(ctx, parser.fromJsonString(sdata)(Operate))\n\n      case ACTION.Operate.updateOperateStatus =>\n        OperOperation.updateOperateStatus(ctx, param.extract[OperateStatus])\n\n      case ACTION.Authorize.grantOperate =>\n        AuthOperation.grantOperate(ctx, param.extract[List[AuthorizeJString]])\n\n      case ACTION.Authorize.bindCertToAuthorize =>\n        AuthOperation.bindCertToAuthorize(ctx, parser.fromJsonString(sdata)(BindCertToAuthorize))\n\n      case ACTION.Authorize.updateGrantOperateStatus =>\n        AuthOperation.updateGrantOperateStatus(ctx, param.extract[AuthorizeStatus])\n\n      case _ =>\n        throw ContractException(JsonFormat.toJsonString(ActionResult(100000, \"没有对应的方法\")))\n    }\n  }\n}\n",
      "cType" : "CODE_SCALA",
      "rType" : "RUN_SERIAL",
      "sType" : "STATE_BLOCK",
      "cclassification" : "CONTRACT_SYSTEM"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.257Z",
      "signature" : "MEYCIQDkn6W9JZLH7FJckUhnd9SO6HHlCpMrDof+qdir1wGCcAIhAK5J8IqwLF5IUqUC6uPFkc0OcsipbVP6meEDkmWE+lSY"
    }
  }, {
    "id" : "3d4eda2f-67e2-46e6-86b7-01ad3d9eb769",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"super_admin\",\"creditCode\":\"951002007l78123233\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBZDCCAQqgAwIBAgIGAYEEX3LxMAoGCCqGSM49BAMCMDkxFDASBgNVBAMMC3N1\\r\\ncGVyX2FkbWluMQ4wDAYDVQQLDAVpc2NhczERMA8GA1UECgwIUmVwQ2hhaW4wHhcN\\r\\nMjIwNTI3MDcxNjEzWhcNMjcwNTI2MDcxNjEzWjA5MRQwEgYDVQQDDAtzdXBlcl9h\\r\\nZG1pbjEOMAwGA1UECwwFaXNjYXMxETAPBgNVBAoMCFJlcENoYWluMFkwEwYHKoZI\\r\\nzj0CAQYIKoZIzj0DAQcDQgAE0SsXKYp6BqzCk0BvfKPSIeCtHEAE2N53xM2CkPNE\\r\\n3lueJp8G6S3jHJuzesV/1IMmbzVzk8xMotgMfJFEOcAtBDAKBggqhkjOPQQDAgNI\\r\\nADBFAiEAh8uOog9ZkpP939xaTqna8kGpLwYmZ6FukL6C85VgweQCIC/2hSUY/bJO\\r\\nUQ27QWcjGxBTGdW1GfLS/4HNr9h923IJ\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-06-07T13:15:03.352Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"951002007l78123233\",\"certName\":\"super_admin\"},\"certHash\":\"bfa99c1336052c87649787edcfee51fedf632301d7369f645034c8ac7e3e0d98\",\"version\":\"1.0\"}],\"createTime\":\"2022-06-07T13:15:03.352Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.735Z",
      "signature" : "MEUCIA3d6MappURaSaXUclUUjUSD+gjdTehhoaqzJIOmJjK3AiEAzxF7Guw1pBBLmLE+CQV1R4a0GAfZM78Fi9Hq2QSu1H8="
    }
  }, {
    "id" : "0a1529d2-86a7-4684-9118-f344f8ed33fb",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"node1\",\"creditCode\":\"121000005l35120456\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBVjCB/qADAgECAgYBgQRfc0swCgYIKoZIzj0EAwIwMzEOMAwGA1UEAwwFbm9k\\r\\nZTExDjAMBgNVBAsMBWlzY2FzMREwDwYDVQQKDAhSZXBDaGFpbjAeFw0yMjA1Mjcw\\r\\nNzE2MTNaFw0yNzA1MjYwNzE2MTNaMDMxDjAMBgNVBAMMBW5vZGUxMQ4wDAYDVQQL\\r\\nDAVpc2NhczERMA8GA1UECgwIUmVwQ2hhaW4wWTATBgcqhkjOPQIBBggqhkjOPQMB\\r\\nBwNCAAS2dFJZHZe07B9cZAugHd1dotPTAf8Lb05dW/644EXqTaXst4MzVt43grLp\\r\\nuhEkvdtFB6n75yOrc0zQ+Q5fUFuQMAoGCCqGSM49BAMCA0cAMEQCIBHI9RGCplmK\\r\\nlovEmnUMG7WpCs3m5G+SUsrGj9DFu7HXAiBEewxv+oZdbgi2RZs+2d5uEydvZW/8\\r\\n2TSY7Ip3isk0aQ==\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-06-07T13:15:03.750Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"121000005l35120456\",\"certName\":\"node1\"},\"certHash\":\"14a092c3d9cdbd18bde03d665cea97d1f8deea0c69bd9145a230ba0ea91a4bed\",\"version\":\"1.0\"}],\"createTime\":\"2022-06-07T13:15:03.750Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.752Z",
      "signature" : "MEQCICkQX1PFZZIzESHowpvyQdly1k0AKpWgYMyT72hUWiJ/AiBKJEdSBo6wdpZyWLOkIqR1VpQsvqS13pONwQ77lS1UUw=="
    }
  }, {
    "id" : "8a454b38-6f11-4081-9418-771b2c954638",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"node2\",\"creditCode\":\"12110107bi45jh675g\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBVjCB/qADAgECAgYBgQRfc1EwCgYIKoZIzj0EAwIwMzEOMAwGA1UEAwwFbm9k\\r\\nZTIxDjAMBgNVBAsMBWlzY2FzMREwDwYDVQQKDAhSZXBDaGFpbjAeFw0yMjA1Mjcw\\r\\nNzE2MTNaFw0yNzA1MjYwNzE2MTNaMDMxDjAMBgNVBAMMBW5vZGUyMQ4wDAYDVQQL\\r\\nDAVpc2NhczERMA8GA1UECgwIUmVwQ2hhaW4wWTATBgcqhkjOPQIBBggqhkjOPQMB\\r\\nBwNCAAT9CcKGs5t447n4j7qqsjd5zsc9EUcXCPRlvVYa0HHllEvZhLiLn8PFXIBG\\r\\nyc/4DVlgbaSoP+R+DCBxc4ctlA/xMAoGCCqGSM49BAMCA0cAMEQCIARYMcxuzXwZ\\r\\nzLt7bOYCmzVI16gUxP8VUG2lXpcKe7+UAiBzMp7PYkhiZvk0qaivHIQlS6gDhnDh\\r\\nMvUmIX9EpPcNjQ==\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-06-07T13:15:03.761Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"12110107bi45jh675g\",\"certName\":\"node2\"},\"certHash\":\"a353b7069b5f353a4299ec98e0c927366ff9f8de9acd3320061f8e7bbd9edc31\",\"version\":\"1.0\"}],\"createTime\":\"2022-06-07T13:15:03.761Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.762Z",
      "signature" : "MEQCIBzrrDYTNNQocaGsVslO21wgF+vyLRUH+HUP0NEs404pAiAmAbxCq/5R1fhMzWxYzZ7jzjb97g02EFMErrbHrWWH+g=="
    }
  }, {
    "id" : "e672c213-bea8-412d-bea7-b27ad8a9856c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"node3\",\"creditCode\":\"122000002n00123567\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBVjCB/qADAgECAgYBgQRfc1wwCgYIKoZIzj0EAwIwMzEOMAwGA1UEAwwFbm9k\\r\\nZTMxDjAMBgNVBAsMBWlzY2FzMREwDwYDVQQKDAhSZXBDaGFpbjAeFw0yMjA1Mjcw\\r\\nNzE2MTNaFw0yNzA1MjYwNzE2MTNaMDMxDjAMBgNVBAMMBW5vZGUzMQ4wDAYDVQQL\\r\\nDAVpc2NhczERMA8GA1UECgwIUmVwQ2hhaW4wWTATBgcqhkjOPQIBBggqhkjOPQMB\\r\\nBwNCAARXK2acTVy1JuqDTDPLqxE4AtoKD5n14GXokDG466SCK2ujp7yFdyjLiLR3\\r\\njGFfIP7xUd3hj/95R/1tA9BAdYJ5MAoGCCqGSM49BAMCA0cAMEQCICPI1F0dt8Yj\\r\\nUWW2oz2g1+peD9aYY2dv1ajYDoI2AQ2kAiByQgwU0LZjo9qktmHLw0qmzNoo6D4k\\r\\npC441kRm373ASQ==\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-06-07T13:15:03.769Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"122000002n00123567\",\"certName\":\"node3\"},\"certHash\":\"3fff355994e86903ba89066637513029e0806acd121df529d8931fe06364f207\",\"version\":\"1.0\"}],\"createTime\":\"2022-06-07T13:15:03.769Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.770Z",
      "signature" : "MEUCIGbf9gOQeUq1YTS81uzR8PrMBOH+SK61MTzD7rdJA4+VAiEA0ydCdr3x/xnPAaHILMfF56ywkNmXkI74Ma07HGB+DJw="
    }
  }, {
    "id" : "48e72b6f-1d64-499f-9e03-e34e5b1beb0c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"node4\",\"creditCode\":\"921000005k36123789\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBWDCB/qADAgECAgYBgQRfc2MwCgYIKoZIzj0EAwIwMzEOMAwGA1UEAwwFbm9k\\r\\nZTQxDjAMBgNVBAsMBWlzY2FzMREwDwYDVQQKDAhSZXBDaGFpbjAeFw0yMjA1Mjcw\\r\\nNzE2MTNaFw0yNzA1MjYwNzE2MTNaMDMxDjAMBgNVBAMMBW5vZGU0MQ4wDAYDVQQL\\r\\nDAVpc2NhczERMA8GA1UECgwIUmVwQ2hhaW4wWTATBgcqhkjOPQIBBggqhkjOPQMB\\r\\nBwNCAATkWdfpSiA9NJasf9fLeu8YYgQzwcsko0DSJ31nF0HhquKWDS8C++xTB9V7\\r\\n3Me7ErFmgAHPwEEy1YzienzdDVQoMAoGCCqGSM49BAMCA0kAMEYCIQCMcslpWQ2P\\r\\nk5sSX9D8CjDclS/Y9SvInoygGy2FjUcYygIhAJ4AtwU66drGZSB/Sc4G4dVCHA8K\\r\\n8IudOJjmAHAa4mJb\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-06-07T13:15:03.776Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"921000005k36123789\",\"certName\":\"node4\"},\"certHash\":\"8c5729dd8d97aa877450ea6e5dbadec1e1c207c7a505101545c8d5b8c3c7a2b6\",\"version\":\"1.0\"}],\"createTime\":\"2022-06-07T13:15:03.776Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.777Z",
      "signature" : "MEUCIF/NXDUFHY5MS28jWKWXTjoyRklBxfZ3jQ3IMduhPG0mAiEAldSLKi2W76wXPl/PqswwlCHB8YP3WT0rCSe1/T+IB/4="
    }
  }, {
    "id" : "bd8191dd-f253-4fe7-8fa3-f861aadc3419",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"node5\",\"creditCode\":\"921000006e0012v696\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBVjCB/qADAgECAgYBgQRfc2gwCgYIKoZIzj0EAwIwMzEOMAwGA1UEAwwFbm9k\\r\\nZTUxDjAMBgNVBAsMBWlzY2FzMREwDwYDVQQKDAhSZXBDaGFpbjAeFw0yMjA1Mjcw\\r\\nNzE2MTNaFw0yNzA1MjYwNzE2MTNaMDMxDjAMBgNVBAMMBW5vZGU1MQ4wDAYDVQQL\\r\\nDAVpc2NhczERMA8GA1UECgwIUmVwQ2hhaW4wWTATBgcqhkjOPQIBBggqhkjOPQMB\\r\\nBwNCAAR5mHjtFWyP+VujryX8q54By8MAaI9TOesJzbMKM1EOSBIrKZmvYt9orclX\\r\\nrXAU72TV468D6GQSSm2//lHccnEgMAoGCCqGSM49BAMCA0cAMEQCIEd1NKDMPCNA\\r\\nCVIfr+mvTnGFp/pHuMFe71WsgP89+FRtAiBCzfChKUfCvlfWL0hUJ8XISraf1zVo\\r\\ng7DRMNKBSBn51Q==\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-06-07T13:15:03.783Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"921000006e0012v696\",\"certName\":\"node5\"},\"certHash\":\"3cc7f09679b86c1214e084e99279d945b68de916e17f850e472121831ff2d0e1\",\"version\":\"1.0\"}],\"createTime\":\"2022-06-07T13:15:03.783Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.784Z",
      "signature" : "MEUCIEyi4tjOBoKciAmBNb5d26I3sG5Uc/stfkR+QvOLAjNiAiEAjuix1BjngH33bvlyrLnbTABjTjgE746ZkPyWPiAfI38="
    }
  }, {
    "id" : "6f7e5206-c9b7-4849-8e33-2db23465464d",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"7d93aeecec616f7f36e3333d0a9264366f36c563a10c978f159b034824898808\",\"description\":\"注册RDID\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.signUpSigner\",\"createTime\":\"2022-06-07T13:15:03.808Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.813Z",
      "signature" : "MEUCIQCCAwNbCNgkVgpXsILY9wMr2GnDLPNXovKc2Il09hbNowIgTtuTDUGirRWiaihv/RplniKW4FN/mfor92tY8HVz2gc="
    }
  }, {
    "id" : "ed47ce8e-ddfc-42d8-9e34-cbbf9488c95b",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"122fd24a7b84f3b9f8a91c0bfd31910a655de38d040aba44f874d9bbb3e8f777\",\"description\":\"禁用或启用RDID\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateSignerStatus\",\"createTime\":\"2022-06-07T13:15:03.815Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.816Z",
      "signature" : "MEUCIQCqVvh1mJJFPzMDDXGhFH2ukW3lwNBFSSinOXQYgNcChwIgOWgzA/yXqznt5e92YyNLLTyOerx+qEUZMN3OvRlWs9U="
    }
  }, {
    "id" : "c7759208-ea65-4809-8444-b6be0e469c81",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"345148e45a3cbd72783b453f072c08af60e7f692b0882eeb2ede98b4ff10a9dc\",\"description\":\"更新信息\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateSigner\",\"createTime\":\"2022-06-07T13:15:03.817Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.818Z",
      "signature" : "MEYCIQDSGpp8xYHujv0Yl1rxUxAZYUfIl9CcVG7FdqR8rlr9NwIhAJiY8/6z68BioGPV3Y4b3DY3eyni3EMZNjpfxSugKSxT"
    }
  }, {
    "id" : "a3bd2d57-0cae-49bf-863f-ee91c943dae7",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"c34b7ad979e0cddf1e0fff9140c4aebe5df4ea87dad8fa1e9fa0dd13ad3f55ee\",\"description\":\"用户注册证书\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.signUpCertificate\",\"createTime\":\"2022-06-07T13:15:03.819Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.820Z",
      "signature" : "MEQCIBdRDLgR9uSOPQnwpcIizDfWSxaZ9CV+2Z9R/REFxy+HAiBMgaLwm3DhgufX4V/wZbWpLveIv7AA7DkUb65gNMheog=="
    }
  }, {
    "id" : "e24bd26f-0001-493e-ac43-d8473d3458c9",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"5e0e7d0eb29e2e7b55926f32d358466b25eb09ebdd320a936c16898d2752b01a\",\"description\":\"用户禁用或启用证书\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateCertificateStatus\",\"createTime\":\"2022-06-07T13:15:03.821Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.822Z",
      "signature" : "MEUCIQC2lPQPD/luqHwWMasOPtJogNdXBYb413aLbvnuBmZg1AIgYuIR02YsjGk6IgtUIgF12hJ3036EWDpC7oDBRcn5Tmc="
    }
  }, {
    "id" : "02fd0779-eaf1-439f-8169-d46528e38ccd",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"7358803962fd55455211f2824c5376f342715fd358f4a24eaa06761ebf503c79\",\"description\":\"用户可为所有人注册证书，需授权\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.signUpAllTypeCertificate\",\"createTime\":\"2022-06-07T13:15:03.825Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.825Z",
      "signature" : "MEUCIQDQ1nVfNm55yPO651/t2wFww6xgaj856eqLDM/94xM5JAIgVo5IRGagb68Qr+ckaDNUwJGuXK3erbyHXRNBVrsNdbA="
    }
  }, {
    "id" : "d2955daf-9385-44fc-a612-6b5b45ee37c9",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"6b2c5c52c74ef82365b7898d8685c2523ecf0d049648135081e2972c96f9ae18\",\"description\":\"用户可为所有人禁用或启用证书，需授权，super_admin特殊处理\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateAllTypeCertificateStatus\",\"createTime\":\"2022-06-07T13:15:03.827Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.827Z",
      "signature" : "MEUCIBy5mGmrxy0H0oH/Y3vmzm9gHWyulNnYW04DosMbFJpwAiEA1bG3vWFZkghqdZSQpmGEjVcByWgM5sEopItxnhkzD3U="
    }
  }, {
    "id" : "20b765c4-b4d9-475f-9664-530f1c6d219e",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"01f66ad1019321a4986e903bf6d446f7460817528bd6ecf16f48cec17c6653cb\",\"description\":\"注册操作，自己注册自己\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.signUpOperate\",\"createTime\":\"2022-06-07T13:15:03.829Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.830Z",
      "signature" : "MEQCIGxhJ7C1YCCz0Zk5TA/lDriO2F0+uXdDR7i06/57i35JAiATSa02uiTAmUqH60aFSnYD7lZlhDHc8k4MVxi1Zastkg=="
    }
  }, {
    "id" : "fb03bc08-8b30-4ef1-8c3d-d20380bbb131",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"d68a87979fba2d6de2cebed5820e605597a929cb0fd23d7a3fe9302babb33c3b\",\"description\":\"禁用或启用操作，自己更新自己名下的操作\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateOperateStatus\",\"createTime\":\"2022-06-07T13:15:03.832Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.833Z",
      "signature" : "MEUCIQDdHQGzzQMWubw1hkYTFMO9Zg82dqjrgNCJUVYSHm6fcAIgIjltPk7zocZBMUZEOQNHVreyP168R4zEMm+KezBU2tw="
    }
  }, {
    "id" : "b2b529ea-a55d-4f86-b4c8-63c5d4be21e9",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"ccc1e3d69eedfa68f70d60ed8820a64dada2d3b2c66dda72585c4444a16f2aa1\",\"description\":\"授权操作\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.grantOperate\",\"createTime\":\"2022-06-07T13:15:03.839Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.840Z",
      "signature" : "MEQCIFCz6034xLt3c8D5igNR92ayYf8CaMpWcilBv5pVW9CjAiBgQ9XJxYpZUgIJmO9QUqAANZgK7cBNB+4St01InKdgMg=="
    }
  }, {
    "id" : "836ba777-fa41-4d5c-a97f-c684dbb13ba7",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"d74f17115a3c42f2de0214503fca50737a4135840f8e61c6db42d7bcd0cb7f15\",\"description\":\"禁用或启用授权\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateGrantOperateStatus\",\"createTime\":\"2022-06-07T13:15:03.842Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.842Z",
      "signature" : "MEUCIGFOrRwB76QTzwwXMCbhGQlcpkQzjXrnraRr4NJC5p5OAiEAqtCvvINWSxnZh5Ya3AvWBmD+Bn7zie+eXcbmJ8gcWrk="
    }
  }, {
    "id" : "ea033722-e6bf-4a85-a64f-776548043ca7",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"62528762a01b0b5cdbedc6a0d50e12ac06805d466c0f4239dedf0f855b3c75bd\",\"description\":\"绑定证书到授权操作\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.bindCertToAuthorize\",\"createTime\":\"2022-06-07T13:15:03.843Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.844Z",
      "signature" : "MEUCIQDVfdM662EvUEJJ3W72tz/jV5Jo7FjMzAy2YULh5s/ljQIgVTPX/4vMNX/tmTVjuutcfoghs3rh8olaY1QdFziQwzQ="
    }
  }, {
    "id" : "e65712fc-c55a-410e-8c1d-ee7790ddcd71",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"d3f2db1d2ab212b967b6b61c7f74dc2247c1aa1e1172066617c3c1a0caa00056\",\"description\":\"发布合约操作\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"*.deploy\",\"createTime\":\"2022-06-07T13:15:03.845Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.846Z",
      "signature" : "MEUCIDgk4w9tffkw8J/hbXdkde1J26machGv9/oWK8iS8cL2AiEAumMa8kcWRdnul6lfEi0b7WWT/X8+yGYSoWB6FON4UNE="
    }
  }, {
    "id" : "ffeb19c0-f33b-4f6a-ab80-0b3b2ba1b47b",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"b52e35d84f16d268357fc94059b965d843b2827f0654a800bfe8d15c247d0cf2\",\"description\":\"改变合约状态操作\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"*.setState\",\"createTime\":\"2022-06-07T13:15:03.847Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.848Z",
      "signature" : "MEUCIE5rDeCbIinexNuCAfJtCdCa94kN43Y0+FH7xctPbmYQAiEA98Ac7bIDku6FG6uRQCAnNbBMBsZqhcXO75/XOIbovDo="
    }
  }, {
    "id" : "8bcd5aae-e25f-467d-9baf-00654d60f01a",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"38766c3ecf02276e9aee804e7b5e700127bc72e7bb22a8b66fffcf2102bb2f07\",\"description\":\"获取链信息\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"chaininfo.chaininfo\",\"createTime\":\"2022-06-07T13:15:03.855Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.857Z",
      "signature" : "MEUCIQDBevu4kxHyoQQzrhGyGcaTwrYKVmHv6juTlAZWv1NumQIgXWZaRtxPScytRSGTE3l26VukY2Vrd/Y2EsTnmcb5FdY="
    }
  }, {
    "id" : "9baa9784-db2e-4feb-876a-4c79c7fdd11c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"527281a9a94d769b45e38d8c1ca516d3965571e895e0ab66b8d873240030bc0a\",\"description\":\"返回组网节点数量\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"chaininfo.node\",\"createTime\":\"2022-06-07T13:15:03.858Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.859Z",
      "signature" : "MEUCIHOLs/dfQC7dNZ5bqNqTstFA4TX7XLtQeLt2baN4piYOAiEAk4UDMmNOm1bE/q7ttUvBDHtTwwFtGLcMKXTW+7pVgUw="
    }
  }, {
    "id" : "66ea5e8f-ea5b-4d53-9cd8-64bb6114d436",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"08a8818c21d7afd7c31663e7e5b4f766a0e0b3278c7ccd46a362bbc7571a2072\",\"description\":\"返回系统缓存交易数量\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"chaininfo.getcachetransnumber\",\"createTime\":\"2022-06-07T13:15:03.860Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.860Z",
      "signature" : "MEYCIQCpxPstUOGd3PbufAIPCs2ExAbPpbw3emQsCbGFiFTJSwIhAK5k+QzIeFUnqCujHP8k7ruV45jlCXTtX6Mi7bWNDq+w"
    }
  }, {
    "id" : "67445edb-c97b-4f08-92ff-4d6814f7cba8",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"db5ade19754294f20c36a356e961820e99d9e4e29ba8179be9043a7ae44eccd7\",\"description\":\"返回系统接收到的交易数量\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"chaininfo.getAcceptedTransNumber\",\"createTime\":\"2022-06-07T13:15:03.862Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.862Z",
      "signature" : "MEQCIAJp0ogHikLAyhxl7uI8ReEk85paS06utRhroTq2d/k4AiAWaflnBVO2yjgR1v4KBnvPwtjZD54uN+vt+we7GC5Cwg=="
    }
  }, {
    "id" : "0980bc0a-8e13-49a5-a3ef-5da459ac6b9e",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"06b901074a00254571514c5f75a45f77cb1a7859c62f94a2a4b7825981f96c82\",\"description\":\"返回指定id的区块\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"block.hash\",\"createTime\":\"2022-06-07T13:15:03.863Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.864Z",
      "signature" : "MEYCIQCm/CLHvIASXtCrOSrQxO0VLnm8JzgYMkQjaVsVNARn1AIhAMQ8aDqQJy/75bhGngr/AsQqpgQxK1TspWeCrTSqzXhx"
    }
  }, {
    "id" : "74a89bc7-d091-4b8e-a8a2-352b210341b0",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"a277d109a69401c79af2c3adb985d62d16c193380d6afc8f256d80edbcabfac0\",\"description\":\"返回指定高度的区块\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"block.blockHeight\",\"createTime\":\"2022-06-07T13:15:03.865Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.866Z",
      "signature" : "MEUCICGWL4Tl+tF8ERsgxvZDS9BLAG/XWrvkia8IEVJBZ6hDAiEArqZMsM8en824yZJhhEUu/jbjNRUhKHCYhLo1Cz9Glmk="
    }
  }, {
    "id" : "ee48c10b-2d99-4e8d-baf8-ac5c48921cc6",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"a74a6de7ab02ab6ec0a8c98d964abb1cfc343784c00fde91c53f6272661645df\",\"description\":\"返回指定高度区块包含的交易数\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"block.getTransNumberOfBlock\",\"createTime\":\"2022-06-07T13:15:03.867Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.867Z",
      "signature" : "MEYCIQC1XqDje9Khn+qxp0oFkfjjJzzxoyxTInnYdDlURSVNzgIhAP9hAA0OydLrXVWKW+7C4mNAcgbughn8LElBdO+58kUi"
    }
  }, {
    "id" : "5db39a3f-d352-4165-a364-f3cdab6a5020",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"da7b2965e3f93cfed897ba1fc7cb170f6ec1f06f71421de327db3dfb2fb7d669\",\"description\":\"返回指定高度的区块的出块时间\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"block.blocktime\",\"createTime\":\"2022-06-07T13:15:03.868Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.869Z",
      "signature" : "MEYCIQCaka6Wdmm5Iqdvl6VIqsHG2oUj/FFsUH9zLnSWtR4T2gIhANP3qyWwaZ8ONwbHlm6aAKZMCOwk4kqrGM1TctMcEgue"
    }
  }, {
    "id" : "98fb4319-9b1c-44b1-b1c5-6f7018fb974b",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"39c4cb23fbfe8dd44a245d477f20316bde260fc890439acff9a38ed2414e6c2d\",\"description\":\"返回指定交易的入块时间\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"block.blocktimeoftran\",\"createTime\":\"2022-06-07T13:15:03.871Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.871Z",
      "signature" : "MEQCICtmcDxKj5YVzCKhmdpiSsoiAFcd1cNvyrwzEJwlYT8fAiAJ87GgVwzuaDNmz979Rt6g1PgEEAPidw51yimZNDYaaQ=="
    }
  }, {
    "id" : "4b8cdcbb-9e3a-4e10-aa11-742d2132cc3c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"077bd0f9595d36b5b01787f9e33ac3b0ca87ef3596075a739bdbdecb69299670\",\"description\":\"返回指定高度的区块字节流\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"block.stream\",\"createTime\":\"2022-06-07T13:15:03.873Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.874Z",
      "signature" : "MEQCIA4mtJvxnhsyhRswMQE3kyX9nuIjOQqNAlEcRjeVLyXKAiAQoD2nmzXDYLGBKrOuk5SJlBoItBI5OElsjenYL0Rinw=="
    }
  }, {
    "id" : "ddcbcb5a-15f1-4447-84e9-9f21e22b95a4",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"ce922519a3c3ecaf9b0986c2449c7680895c15f4b0e9818e994e14a4d28b6aaf\",\"description\":\"返回指定id的交易\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"transaction\",\"createTime\":\"2022-06-07T13:15:03.875Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.876Z",
      "signature" : "MEUCIQC73sQ0ie78uRJZrzzR5eiENTH5n5N4n9Z/9B5nGMeukgIgIdkjqZJUPWvi7f6/5pJepJkjJ19XwmKQidZNWSkG7Kw="
    }
  }, {
    "id" : "2948e691-a8ad-4223-83f1-841625981390",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"4b24c7d54882e6e371f7c211f7d8b10c438073e8ddfa97ba09c660ecbf66d813\",\"description\":\"返回指定id的交易字节流\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"transaction.stream\",\"createTime\":\"2022-06-07T13:15:03.877Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.878Z",
      "signature" : "MEUCIQDh47asQhHItGcXpcaEFn1CLnOgHuICdo4JCxFlHQWQ9wIgON5KoLJ1OW/pCwMExXlLc8thOi2U/JUw9qPcW6oWlNs="
    }
  }, {
    "id" : "7582c23d-a1fa-4dd6-95bc-3d3c67bc27a4",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"118beab27e3f3054f6a898642a69cbdf159754c688b04f2f181878f567f8b88c\",\"description\":\"提交带签名的交易\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"transaction.postTranByString\",\"createTime\":\"2022-06-07T13:15:03.879Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.879Z",
      "signature" : "MEUCIF0a6Ek8nQcx4HaTn9gzt+06OIMaM8qNAPHedTVaW/xyAiEA7JSEXcdrOrqwWOoE83Q09GpoOcT3k5xfsGqNXbcyJLk="
    }
  }, {
    "id" : "11805d7a-4c4c-44c3-835f-eb7ad30e2249",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"b448bc33c662ac91896d97dfab59afcb274105d1e150ed4a73dce532188b65fe\",\"description\":\"提交带签名的交易字节流\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"transaction.postTranStream\",\"createTime\":\"2022-06-07T13:15:03.881Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.881Z",
      "signature" : "MEQCIFuaEvWiID+FL6i4ds9FYj9w1auRFxajh/XQn9v0sKRcAiAxiGOxkl61DYY3Zhjc4PlvW4bRKdEk05ZUWUpo8gylQQ=="
    }
  }, {
    "id" : "e6e83f68-c4d1-4851-a825-190d6c288417",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"4cc1b52b7c7723267816a45268dd4c3377228d3cd6c09006a4d0f3a181d84760\",\"description\":\"提交交易\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"transaction.postTran\",\"createTime\":\"2022-06-07T13:15:03.883Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.883Z",
      "signature" : "MEQCIG8uGuYAZNeO9IYtnFhbBEYxlsymjfccicUucL0K3UfdAiAtSTHQY6emH0MZMeD0oidKc4cZIV2q6KEoAGBMU6NObw=="
    }
  }, {
    "id" : "e2e1c347-ca02-4915-a553-13b3bb161c0a",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"c5cd0570537941f07c80299479eb62bde5e33cc5008e161148e749627d4a0cd9\",\"description\":\"回指定id的交易信息及所在区块高度\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"transaction.tranInfoAndHeight\",\"createTime\":\"2022-06-07T13:15:03.885Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.886Z",
      "signature" : "MEUCIQCqOGIXmbNvA2IKJKZViT+HU5sSl+DrA6dNmHDXo3TAqwIgOLyrDzKGYUM0QE91mSZsaEefWy+S49XOOvZB/g9Klog="
    }
  }, {
    "id" : "bccdcbbf-eedc-40cd-95ae-cb6666345105",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"82223c7d347b9900900e405d0ca633afedcb4646216789d94a262b243322620a\",\"description\":\"查询合约存储在DB中的数据\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"db.query\",\"createTime\":\"2022-06-07T13:15:03.887Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.888Z",
      "signature" : "MEQCIHvK9hWLziuOBuOTlA0BSydiR1+bwtt1LpdHVzyDAFX+AiArbaC//pzfkjrX6eVM9BSd16SecgeuLJ7RHlbPPvwBmg=="
    }
  }, {
    "id" : "a797883d-06ad-4e28-a303-f58a9554d616",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "grantOperate",
      "args" : [ "[\"{\\\"id\\\":\\\"62922079-51cd-41d1-8c60-a27f6df50a7b\\\",\\\"grant\\\":\\\"951002007l78123233\\\",\\\"granted\\\":[\\\"121000005l35120456\\\",\\\"12110107bi45jh675g\\\",\\\"122000002n00123567\\\",\\\"921000005k36123789\\\",\\\"921000006e0012v696\\\"],\\\"opId\\\":[\\\"7d93aeecec616f7f36e3333d0a9264366f36c563a10c978f159b034824898808\\\",\\\"122fd24a7b84f3b9f8a91c0bfd31910a655de38d040aba44f874d9bbb3e8f777\\\",\\\"345148e45a3cbd72783b453f072c08af60e7f692b0882eeb2ede98b4ff10a9dc\\\",\\\"c34b7ad979e0cddf1e0fff9140c4aebe5df4ea87dad8fa1e9fa0dd13ad3f55ee\\\",\\\"5e0e7d0eb29e2e7b55926f32d358466b25eb09ebdd320a936c16898d2752b01a\\\",\\\"7358803962fd55455211f2824c5376f342715fd358f4a24eaa06761ebf503c79\\\",\\\"6b2c5c52c74ef82365b7898d8685c2523ecf0d049648135081e2972c96f9ae18\\\",\\\"01f66ad1019321a4986e903bf6d446f7460817528bd6ecf16f48cec17c6653cb\\\",\\\"d68a87979fba2d6de2cebed5820e605597a929cb0fd23d7a3fe9302babb33c3b\\\",\\\"ccc1e3d69eedfa68f70d60ed8820a64dada2d3b2c66dda72585c4444a16f2aa1\\\",\\\"d74f17115a3c42f2de0214503fca50737a4135840f8e61c6db42d7bcd0cb7f15\\\",\\\"62528762a01b0b5cdbedc6a0d50e12ac06805d466c0f4239dedf0f855b3c75bd\\\",\\\"d3f2db1d2ab212b967b6b61c7f74dc2247c1aa1e1172066617c3c1a0caa00056\\\",\\\"b52e35d84f16d268357fc94059b965d843b2827f0654a800bfe8d15c247d0cf2\\\",\\\"38766c3ecf02276e9aee804e7b5e700127bc72e7bb22a8b66fffcf2102bb2f07\\\",\\\"527281a9a94d769b45e38d8c1ca516d3965571e895e0ab66b8d873240030bc0a\\\",\\\"08a8818c21d7afd7c31663e7e5b4f766a0e0b3278c7ccd46a362bbc7571a2072\\\",\\\"db5ade19754294f20c36a356e961820e99d9e4e29ba8179be9043a7ae44eccd7\\\",\\\"06b901074a00254571514c5f75a45f77cb1a7859c62f94a2a4b7825981f96c82\\\",\\\"a277d109a69401c79af2c3adb985d62d16c193380d6afc8f256d80edbcabfac0\\\",\\\"a74a6de7ab02ab6ec0a8c98d964abb1cfc343784c00fde91c53f6272661645df\\\",\\\"da7b2965e3f93cfed897ba1fc7cb170f6ec1f06f71421de327db3dfb2fb7d669\\\",\\\"39c4cb23fbfe8dd44a245d477f20316bde260fc890439acff9a38ed2414e6c2d\\\",\\\"077bd0f9595d36b5b01787f9e33ac3b0ca87ef3596075a739bdbdecb69299670\\\",\\\"ce922519a3c3ecaf9b0986c2449c7680895c15f4b0e9818e994e14a4d28b6aaf\\\",\\\"4b24c7d54882e6e371f7c211f7d8b10c438073e8ddfa97ba09c660ecbf66d813\\\",\\\"118beab27e3f3054f6a898642a69cbdf159754c688b04f2f181878f567f8b88c\\\",\\\"b448bc33c662ac91896d97dfab59afcb274105d1e150ed4a73dce532188b65fe\\\",\\\"4cc1b52b7c7723267816a45268dd4c3377228d3cd6c09006a4d0f3a181d84760\\\",\\\"c5cd0570537941f07c80299479eb62bde5e33cc5008e161148e749627d4a0cd9\\\",\\\"82223c7d347b9900900e405d0ca633afedcb4646216789d94a262b243322620a\\\"],\\\"isTransfer\\\":\\\"TRANSFER_REPEATEDLY\\\",\\\"createTime\\\":\\\"2022-06-07T13:15:03.890Z\\\",\\\"authorizeValid\\\":true,\\\"version\\\":\\\"1.0\\\"}\"]" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.938Z",
      "signature" : "MEUCIBWdPHNFNK9b7ayWD6NZmUi8nuYobpFagnONZIZ1yOJuAiEAhRnSPK+90Mc0hb2LleOvYzqNLOjMOgsykUNb1bOr5Ac="
    }
  }, {
    "id" : "b8f15f8f-61c4-42e5-93cc-66c391966a85",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "ContractAssetsTPL",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "\n/*\n * Copyright  2019 Blockchain Technology and Application Joint Lab, Linkel Technology Co., Ltd, Beijing, Fintech Research Center of ISCAS.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BA SIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage rep.sc.tpl\n\nimport org.json4s._\nimport org.json4s.jackson.JsonMethods._\nimport rep.proto.rc2.ActionResult\nimport rep.sc.scalax.IContract\nimport rep.sc.scalax.ContractContext\nimport rep.sc.scalax.ContractException\n\n/**\n  * 资产管理合约\n  */\n\nfinal case class Transfer(from: String, to: String, amount: Int)\n\nclass ContractAssetsTPL extends IContract {\n\n  // 需要跨合约读账户\n  var chaincodeName = \"\"\n  var chaincodeVersion = 0\n  //val prefix = IdTool.getCid(ChaincodeId(chaincodeName, chaincodeVersion))\n\n  implicit val formats = DefaultFormats\n\n  def init(ctx: ContractContext) {\n    chaincodeName = ctx.api.getAccountContractCodeName\n    chaincodeVersion = ctx.api.getAccountContractVersion\n    println(s\"tid: $ctx.t.id\")\n  }\n\n  def set(ctx: ContractContext, data: Map[String, Int]): ActionResult = {\n    println(s\"set data:$data\")\n    for ((k, v) <- data) {\n      ctx.api.setVal(k, v)\n    }\n    null\n  }\n\n  def transfer(ctx: ContractContext, data: Transfer): ActionResult = {\n    if (!data.from.equals(ctx.t.getSignature.getCertId.creditCode))\n      throw ContractException(\"只允许从本人账户转出\")\n    val signerKey = data.to\n    // 跨合约读账户，该处并未反序列化\n    //todo 跨合约读需要修改\n    /*if (IdTool.isDidContract) {\n      if (ctx.api.getStateEx(chaincodeName, \"signer_\" + data.to) == null)\n        throw ContractException(\"目标账户不存在\")\n    } else {\n      if (ctx.api.getStateEx(chaincodeName, data.to) == null)\n        throw ContractException(\"目标账户不存在\")\n    }*/\n    val sfrom: Any = ctx.api.getVal(data.from)\n    val dfrom = sfrom.asInstanceOf[Int]\n    if (dfrom < data.amount)\n      throw ContractException(\"余额不足\")\n    ctx.api.setVal(data.from, dfrom - data.amount)\n    val dto = ctx.api.getVal(data.to).toString.toInt\n    ctx.api.setVal(data.to, dto + data.amount)\n    null\n  }\n\n  def put_proof(ctx: ContractContext, data: Map[String, Any]): ActionResult = {\n    //先检查该hash是否已经存在,如果已存在,抛异常\n    for ((k, v) <- data) {\n      val pv0: Any = ctx.api.getVal(k)\n      if (pv0 != null)\n        throw ContractException(s\"[$k] 已存在，当前值为 [$pv0]\")\n      ctx.api.setVal(k, v)\n      print(\"putProof:\" + k + \":\" + v)\n    }\n    null\n  }\n\n  /**\n    * 根据action,找到对应的method，并将传入的json字符串parse为method需要的传入参数\n    */\n  def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\n    val json = parse(sdata)\n    action match {\n      case \"transfer\" =>\n        transfer(ctx, json.extract[Transfer])\n      case \"set\" =>\n        set(ctx, json.extract[Map[String, Int]])\n      case \"putProof\" =>\n        put_proof(ctx, json.extract[Map[String, Any]])\n    }\n  }\n\n}\n",
      "cType" : "CODE_SCALA",
      "rType" : "RUN_SERIAL",
      "sType" : "STATE_BLOCK",
      "cclassification" : "CONTRACT_SYSTEM"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-06-07T21:15:03.941Z",
      "signature" : "MEUCIQDRoxeeDQsUBm1IWE2sCnGtg+I8gU+sSJGGFC/Zx09UNgIgNUCVVUf+uxFw89TwF3Wg8Met8vLbnHzQgaM7oiG4Oak="
    }
  }, {
    "id" : "2a0208cb-9f4c-41cb-a050-cb9263d1ddfa",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"97849ffa376d40bca8537f08aaa278a2a1c2bc7021a2f2db1301cf14179ba56e\",\"description\":\"转账交易\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"ContractAssetsTPL.transfer\",\"createTime\":\"2022-06-07T13:15:03.944Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-06-07T21:15:03.945Z",
      "signature" : "MEUCIHHOl5lokGqj0SDh3auvF9fw3euImpwNIMfasepp7BSUAiEA2TrcDfPp5rtPZE2rHtXRP6xk+b+f0R/dOdQckOFuZTc="
    }
  }, {
    "id" : "30fc75ee-7a21-49e6-b4b0-224e6ea6eafd",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"b877825de71d915677bf1a61e48d61df0187166c3f6afa5fdae3a98058cae769\",\"description\":\"初始化账户\",\"register\":\"121000005l35120456\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"ContractAssetsTPL.set\",\"createTime\":\"2022-06-07T13:15:03.944Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-06-07T21:15:03.947Z",
      "signature" : "MEUCIDZZ/HLCw4PxfS2jBCSy+N14VfRVyoERC2sKOiVcWzjtAiEAn9A8Pvswvk1SHgA2k2iI0yCtrvUQZVS1XEQBmR9sFbE="
    }
  }, {
    "id" : "f7b626ba-1677-40f7-9960-63f17d12c606",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"7a183b2f5b57b0d966efd031a239170e1ed2d3209217a5f7e850fa6326233bcc\",\"description\":\"存证\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"ContractAssetsTPL.putProof\",\"createTime\":\"2022-06-07T13:15:03.944Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-06-07T21:15:03.949Z",
      "signature" : "MEYCIQCRp8DdJv3Vifa81NQSUcUzXR3v1Kvv0F29iG4cjvPMhAIhAOqiB0e3ByCOl6rBUtRq/2dIDapEo64t7e1ITxzMTXt/"
    }
  }, {
    "id" : "7609e1df-e9e6-407c-af07-f4d76a6aec16",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractAssetsTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "set",
      "args" : [ "{\r\n  \"121000005l35120456\" : 10000000,\r\n  \"12110107bi45jh675g\" : 10000000,\r\n  \"122000002n00123567\" : 10000000,\r\n  \"921000005k36123789\" : 10000000,\r\n  \"921000006e0012v696\" : 10000000\r\n}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.951Z",
      "signature" : "MEUCIBkjS0PWUNKcTebfygFA4bZI1WXmMy3UxtyhJzw4uL8cAiEA+o/511YoRiK+8szIphE2TYAaqb75zqnp/8W79GMMwXg="
    }
  }, {
    "id" : "d2eebdc2-7044-4915-b7b1-10953472fd93",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "RVerifiableCredentialTPL",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "package rep.sc.tpl.did\n\nimport org.json4s.DefaultFormats\nimport org.json4s.jackson.JsonMethods.parse\nimport rep.proto.rc2.{ActionResult, CreAttr, CreClaStruct, VerCreStatus}\nimport rep.sc.scalax.{ContractContext, ContractException, IContract}\nimport scalapb.json4s.JsonFormat\nimport rep.sc.tpl.did.DidTplPrefix._\n\n/**\n * 可验证凭据Verifiable Credential管理合约，\n * 主要提供凭据属性结构CCS管理及凭据状态VCS管理的相关合约方法，\n * 可验证凭据VC本身由相关使用方在链下传递使用，链上存储其属性结构和状态等可公开信息\n *\n * @author jayTsang created\n */\n\nclass RVerifiableCredentialTPL extends IContract{\n\n  import RVerifiableCredentialTPL._\n\n  override def init(ctx: ContractContext): Unit = {\n    println(s\"Inited the contract ${ctx.t.getCid.chaincodeName} by TX with the tid: ${ctx.t.id}\")\n  }\n\n  implicit val formats = DefaultFormats\n\n  override def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\n    val param = parse(sdata)\n\n    action match {\n      case Action.SignupCCS =>\n        SignupCCS(ctx, param.extract[SignupCCSParam])\n      case Action.UpdateCCSStatus =>\n        UpdateCCSStatus(ctx, param.extract[UpdateCCSStatusParam])\n      case Action.SignupVCStatus =>\n        SignupVCStatus(ctx, param.extract[SignupVCStatusParam])\n      case Action.UpdateVCStatus =>\n        UpdateVCStatus(ctx, param.extract[UpdateVCStatusParam])\n      case Action.RevokeVCClaims =>\n        RevokeVCClaims(ctx, param.extract[RevokeVCClaimsParam])\n      case f =>\n        throw ContractException(\n          JsonFormat.toJsonString(ActionResult(STATUS_CODE_NO_FUNCTION, s\"没有对应的合约方法:${f}\"))\n        )\n    }\n  }\n\n  /**\n   * 注册可验证凭据属性结构CCS\n   * @param ctx\n   * @param param\n   * @return\n   */\n  def SignupCCS(ctx: ContractContext, param: SignupCCSParam): ActionResult = {\n    assertSignupCCSParam(param)\n\n    val ccsStateKey = ccsPrefix + param.id\n\n    assertNewWorldstate(\n      ctx.api.getVal(ccsStateKey),\n      s\"已存在可验证凭据属性结构，CCS(id:${param.id})\"\n    )\n\n    val creator = ctx.api.getDIDURIPrefix + ctx.t.signature.get.certId.get.creditCode\n    val valid = true\n    val version = \"1.0\"\n    val ccs = CreClaStruct(\n      id = param.id,\n      name = param.name,\n      ccsVersion = param.version,\n      description = param.description,\n      creator = creator,\n      created = param.created,\n      valid = valid,\n      attributes = param.attributes.map(\n        attr => CreAttr(attr.name, attr.`type`, attr.required, attr.description)\n      ),\n      version = version\n    )\n\n    ctx.api.setVal(ccsStateKey, ccs)\n\n    ActionResult(STATUS_CODE_OK, s\"成功调用注册可验证凭据属性结构方法，CCS(id: ${ccs.id})\")\n  }\n\n  /**\n   * 更新可验证凭据属性结构CCS的有效性\n   * @param ctx\n   * @param param\n   * @return\n   */\n  def UpdateCCSStatus(ctx: ContractContext, param: UpdateCCSStatusParam): ActionResult = {\n    assertUpdateCCSStatusParam(param)\n\n    val ccsStateKey = ccsPrefix + param.id\n    val ccs = ctx.api.getVal(ccsStateKey).asInstanceOf[CreClaStruct]\n\n    assertExistedWorldstate(\n      ccs,\n      s\"没有对应的可验证凭据属性结构，CCS(id: ${param.id})\"\n    )\n    assertInvokerIsCreator(\n      ctx,\n      ccs,\n      s\"更新可验证凭据属性结构有效性方法的调用者不是相应的创建者，CCS(id: ${ccs.id})\"\n    )\n\n    ctx.api.setVal(ccsStateKey, ccs.withValid(param.valid))\n\n    ActionResult(STATUS_CODE_OK, s\"成功调用更新可验证凭据属性结构有效性方法，CCS(id: ${ccs.id})\")\n  }\n\n  /**\n   * 注册可验证凭据状态信息VCS\n   * @param ctx\n   * @param param\n   * @return\n   */\n  def SignupVCStatus(ctx: ContractContext, param: SignupVCStatusParam): ActionResult = {\n    assertSignupVCStatusParam(param)\n\n    val vcsStateKey = vcsPrefix + param.id\n\n    assertNewWorldstate(\n      ctx.api.getVal(vcsStateKey),\n      s\"已存在可验证凭据状态信息，VCS(id:${param.id})\"\n    )\n\n    val creator = ctx.api.getDIDURIPrefix + ctx.t.signature.get.certId.get.creditCode\n    val version = \"1.0\"\n    val vcs = VerCreStatus(\n      id = param.id,\n      status = param.status,\n      revokedClaimIndex = Seq(),\n      creator = creator,\n      version = version\n    )\n    ctx.api.setVal(vcsStateKey, vcs)\n\n    ActionResult(STATUS_CODE_OK, s\"成功调用注册可验证凭据状态信息方法，VCS(id: ${vcs.id})\")\n  }\n\n  /**\n   * 更新可验证凭据状态V，即更新整个可验证凭据的状态\n   * @param ctx\n   * @param param\n   * @return\n   */\n  def UpdateVCStatus(ctx: ContractContext, param: UpdateVCStatusParam): ActionResult = {\n    assertUpdateVCStatusParam(param)\n\n    val vcsStateKey = vcsPrefix + param.id\n    val vcs = ctx.api.getVal(vcsStateKey).asInstanceOf[VerCreStatus]\n\n    assertExistedWorldstate(\n      vcs,\n      s\"没有对应的可验证凭据状态，VCS(id: ${param.id})\"\n    )\n    assertInvokerIsCreator(\n      ctx,\n      vcs,\n      s\"更新可验证凭据状态方法的调用者不是相应的创建者，VCS(id: ${vcs.id})\"\n    )\n\n    ctx.api.setVal(vcsStateKey, vcs.withStatus(param.status))\n\n    ActionResult(STATUS_CODE_OK, s\"成功调用更新可验证凭据状态方法，VCS(id: ${vcs.id})\")\n  }\n\n  /**\n   * 撤销可验证凭据属性，即废除可验证凭据中部分凭据属性\n   * @param ctx\n   * @param param\n   * @return\n   */\n  def RevokeVCClaims(ctx: ContractContext, param: RevokeVCClaimsParam): ActionResult = {\n    assertRevokeVCClaimsParam(param)\n\n    val vcsStateKey = vcsPrefix + param.id\n    val vcs = ctx.api.getVal(vcsStateKey).asInstanceOf[VerCreStatus]\n\n    assertExistedWorldstate(\n      vcs,\n      s\"没有对应的可验证凭据状态，VCS(id: ${param.id})\"\n    )\n    assertInvokerIsCreator(\n      ctx,\n      vcs,\n      s\"撤销可验证凭据属性方法的调用者不是相应的创建者，VCS(id: ${vcs.id})\"\n    )\n\n    val revokedClaimIndex = vcs.revokedClaimIndex\n      .union(param.revokedClaimIndex).distinct\n    ctx.api.setVal(vcsStateKey, vcs.withRevokedClaimIndex(revokedClaimIndex))\n\n    ActionResult(STATUS_CODE_OK, s\"成功调用撤销可验证凭据属性方法，VCS(id: ${vcs.id})\")\n  }\n}\n\nobject RVerifiableCredentialTPL {\n\n  object Action {\n    // actions for verifiable credential claim struct\n    val SignupCCS = \"signupCCS\"\n    val UpdateCCSStatus = \"updateCCSStatus\"\n\n    // actions for verifiable credential/claims status\n    val SignupVCStatus = \"signupVCStatus\"\n    val UpdateVCStatus = \"updateVCStatus\"\n    val RevokeVCClaims = \"revokeVCClaims\"\n  }\n\n  final case class SignupCCSAttrParam(\n                                       name: String,\n                                       `type`: String,\n                                       required: Boolean = true,\n                                       description: String\n                                     )\n  final case class SignupCCSParam(\n                                   id: String,\n                                   name: String,\n                                   version: String, // ccsVersion\n                                   created: String,\n                                   description: String,\n                                   attributes: Seq[SignupCCSAttrParam]\n                                 )\n  final case class UpdateCCSStatusParam(id: String, valid: Boolean)\n\n  final case class SignupVCStatusParam(id: String, status: String)\n  final case class UpdateVCStatusParam(id: String, status: String)\n  final case class RevokeVCClaimsParam(id: String, revokedClaimIndex: Seq[String])\n\n  val STATUS_CODE_OK             = 500200 // 合约方法调用成功\n  val STATUS_CODE_NO_FUNCTION    = 500300 // 无对应合约方法\n  val STATUS_CODE_BAD_REQUEST    = 500400 // 合约方法参数有误\n  val STATUS_CODE_UNAUTHORIZED   = 500401 // 没有该合约方法调用权限\n  val STATUS_CODE_NOT_FOUND      = 500404 // 找不到对应合约状态资源worldstate\n  val STATUS_CODE_ALREADY_EXISTS = 500410 // 对应合约状态资源worldstate已存在\n\n  val DID_LOCATION_DELIMITER = \"#\"\n\n  def assertSignupCCSParam(param: SignupCCSParam) = {\n    assertRequiredParamStrField(\"id\", param.id)\n    assertRequiredParamStrField(\"name\", param.name)\n    assertRequiredParamStrField(\"version\", param.version)\n    assertRequiredParamStrField(\"description\", param.description)\n    assertRequiredParamStrField(\"created\", param.created)\n    assertRequiredParamSeqSignupCCSAttrField(\"attributes\", param.attributes)\n  }\n  def assertUpdateCCSStatusParam(param: UpdateCCSStatusParam) = {\n    assertRequiredParamStrField(\"id\", param.id)\n  }\n\n  def assertSignupVCStatusParam(param: SignupVCStatusParam) = {\n    assertRequiredParamStrField(\"id\", param.id)\n    assertRequiredParamStrField(\"status\", param.status)\n  }\n  def assertUpdateVCStatusParam(param: UpdateVCStatusParam) = {\n    assertRequiredParamStrField(\"id\", param.id)\n    assertRequiredParamStrField(\"status\", param.status)\n  }\n  def assertRevokeVCClaimsParam(param: RevokeVCClaimsParam) = {\n    assertRequiredParamStrField(\"id\", param.id)\n    assertRequiredParamSeqStrField(\"revokedClaimIndex\", param.revokedClaimIndex)\n  }\n\n  def assertRequiredParamStrField(fieldName: String, fieldValue: String): Null = {\n    if (fieldValue.isBlank) {\n      throw ContractException(JsonFormat.toJsonString(\n        ActionResult(STATUS_CODE_BAD_REQUEST, s\"参数字段${fieldName}不能为空字符串\")\n      ))\n    }\n    null\n  }\n  def assertRequiredParamSeqStrField(fieldName: String, fieldValue: Seq[String]): Null = {\n    if (fieldValue.length == 0) {\n      throw ContractException(\n        JsonFormat.toJsonString(\n          ActionResult(STATUS_CODE_BAD_REQUEST, s\"参数字段${fieldName}不能为空数组\")\n        )\n      )\n    }\n    null\n  }\n  def assertRequiredParamSeqSignupCCSAttrField(fieldName: String, fieldValue: Seq[SignupCCSAttrParam]): Null = {\n    if (fieldValue.length == 0) {\n      throw ContractException(\n        JsonFormat.toJsonString(\n          ActionResult(STATUS_CODE_BAD_REQUEST, s\"参数字段${fieldName}不能为空数组\")\n        )\n      )\n    }\n    fieldValue.zipWithIndex.foreach {\n      case(attr, i) => {\n        assertRequiredParamStrField(s\"${fieldName}[${i}].name\", attr.name)\n        assertRequiredParamStrField(s\"${fieldName}[${i}].type\", attr.`type`)\n        assertRequiredParamStrField(s\"${fieldName}[${i}].description\", attr.description)\n      }\n    }\n    null\n  }\n\n  /**\n   * worldstate不应已存在\n   * @param worldstate\n   * @param message\n   */\n  def assertNewWorldstate(worldstate: Any, message: String) = {\n    if(worldstate != null) {\n      throw ContractException(\n        JsonFormat.toJsonString(\n          ActionResult(STATUS_CODE_ALREADY_EXISTS, message)\n        )\n      )\n    }\n  }\n\n  /**\n   * worldstate应当已存在\n   * @param worldstate\n   * @param message\n   */\n  def assertExistedWorldstate(worldstate: Any, message: String) = {\n    if( worldstate == null) {\n      throw ContractException(\n        JsonFormat.toJsonString(ActionResult(STATUS_CODE_NOT_FOUND, message))\n      )\n    }\n  }\n\n  /**\n   * 合约方法调用者应当是worldstate的创建者\n   * @param worldstate\n   * @param message\n   */\n  def assertInvokerIsCreator(ctx: ContractContext, worldstate: Any, message: String) = {\n    var creator = \"\"\n    worldstate match {\n      case ccs: CreClaStruct => creator = ccs.creator.split(\":\").last\n      case vcs: VerCreStatus => creator = vcs.creator.split(\":\").last\n    }\n    if(creator != ctx.t.signature.get.certId.get.creditCode) {\n      throw ContractException(\n        JsonFormat.toJsonString(\n          ActionResult(\n            STATUS_CODE_UNAUTHORIZED,\n            message\n          )\n        )\n      )\n    }\n  }\n}\n",
      "cType" : "CODE_SCALA",
      "rType" : "RUN_SERIAL",
      "sType" : "STATE_BLOCK",
      "cclassification" : "CONTRACT_SYSTEM"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-06-07T21:15:03.954Z",
      "signature" : "MEYCIQDVMMzYmgoVHU0d5Bu5AFUmMWnCs+d+y9DB6lu0TLx17wIhAMav6qH2yKK768tx1BRbJ/HqUhBpt/RiKunNRNwEUYDf"
    }
  }, {
    "id" : "f6074a38-ad98-4203-b134-69435550a0a3",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"c643132be5d94b56eb21812c315b8770fb896d16d4b8592bd5413574c6eea94f\",\"description\":\"注册可验证凭据属性结构\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RVerifiableCredentialTPL.signupCCS\",\"createTime\":\"2022-06-07T13:15:03.944Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-06-07T21:15:03.960Z",
      "signature" : "MEUCIQDaJ1jc+sw3+HFjaVcAldrtC+b1kaq65aHIR8YhdrnjuwIgUkfXb+RO+fgEIvYvdv1aw8elC1GV2fv4R8i/lsOsjLU="
    }
  }, {
    "id" : "70607e7c-66ca-46c0-b0bb-826eae2582f5",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"4fdebb02299b05441c20b12c021d13bf4469271d69429f600bd03bb4bbd75583\",\"description\":\"更新可验证凭据属性结构有效状态\",\"register\":\"121000005l35120456\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RVerifiableCredentialTPL.updateCCSStatus\",\"createTime\":\"2022-06-07T13:15:03.944Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-06-07T21:15:03.962Z",
      "signature" : "MEUCIQC/qDy6B4yMNNeb32j3FnVOA5BV+8IEEvb6Q/+6iLlynwIgWoXzYuAZIItYKAlLQPXR7rN5ft/eJ07kF9TEQmUCwtA="
    }
  }, {
    "id" : "3d3962d1-c778-44a1-a18c-f412466239f5",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"ce12f269b48bee1e8fc2d793b9bb89b738ce5db56fc8669e3354c462dc4af08b\",\"description\":\"注册可验证凭据状态\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RVerifiableCredentialTPL.signupVCStatus\",\"createTime\":\"2022-06-07T13:15:03.944Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-06-07T21:15:03.964Z",
      "signature" : "MEUCICe/aPsCneTDr7iY8WjnZDvhyDxaWqf6YmoGwYAczPLyAiEA1tzP+6acFCkWNpYIUZSL5OzBWepXXEuZoPcyg9cm7I4="
    }
  }, {
    "id" : "4e63ad5c-66ae-4237-9de1-5f996028e7ba",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"031832c78dedc3007170d741b7fc772439eec855f85054d81cb3f93dd42d06d4\",\"description\":\"更新可验证凭据状态\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RVerifiableCredentialTPL.updateVCStatus\",\"createTime\":\"2022-06-07T13:15:03.944Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-06-07T21:15:03.966Z",
      "signature" : "MEUCIQD/Ly2HK1RYlC4IGGumkBDuwXi/Abqf+w3gNHuw1E6GPgIgMj0ongk8NlSiIWvAm4bANOcPyNDyqI4aKMXMs6SvyF0="
    }
  }, {
    "id" : "b601cc66-37b9-49c2-9dba-f7d8e5e1d1d6",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"3d8ca6ebe2693af9ed9081ea49c4d15c3bab63aa773834f0db40fb2eb54b20d9\",\"description\":\"撤销可验证凭据属性状态\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RVerifiableCredentialTPL.revokeVCClaims\",\"createTime\":\"2022-06-07T13:15:03.944Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-06-07T21:15:03.967Z",
      "signature" : "MEUCIETnQn/I3NuLnvhzcNBGUG3qWgfdqEKG46ndq9/wT2/IAiEA/FKoN3m86vA2nn6RQRwRoCLABTEchDeVEb6jnDGQRlE="
    }
  }, {
    "id" : "971e72aa-141f-4a33-a779-c404923403aa",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "InterfaceCooperation",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "package rep.sc.tpl.cooper\n\nimport org.bouncycastle.util.io.pem.PemReader\nimport org.json4s.jackson.JsonMethods.parse\nimport org.json4s.jackson.Serialization.{read, writePretty}\nimport org.json4s.{DefaultFormats, MappingException}\nimport rep.crypto.BytesHex\nimport rep.proto.rc2.{ActionResult, Certificate}\nimport rep.sc.scalax.{ContractContext, ContractException, IContract}\nimport rep.sc.tpl.did.DidTplPrefix.certPrefix\nimport rep.utils.SerializeUtils\n\nimport java.io.{ByteArrayInputStream, StringReader}\nimport java.nio.charset.StandardCharsets\nimport java.security.PublicKey\nimport java.security.cert.{CertificateFactory, X509Certificate}\n\n\n/**\n  * 接口定义\n  *\n  * @param id           接口定义ID\n  * @param `type`       接口定义的类型，1：grpc，2：wsdl\n  * @param version      接口定义版本号\n  * @param name         接口名\n  * @param algo_hash    生成内容 Hash 采用的算法\n  * @param algo_sign    对内容 Hash 的生成签名的算法\n  * @param para         参数数据结构定义\n  * @param serv         接口服务定义，包括初始接口请求、中间接口请求、结束接口请求三者的方法及参数定义\n  * @param serv_doc     接口服务说明\n  * @param callBack     应答接收定义，包括初始接口应答、中间接口应答、结束接口应答三者的方法及参数定义\n  * @param callback_doc 应答接收说明\n  */\nfinal case class ApiDefinition(id: String, `type`: String, version: String, name: String, algo_hash: String, algo_sign: String, para: Option[String],\n                               serv: Option[String], serv_doc: Option[String], callBack: Option[String], callback_doc: Option[String])\n\n/**\n  * 接口服务和应答\n  *\n  * @param id      接口服务 Id 或 应答接收 Id\n  * @param name    接口服务或者应答名字\n  * @param d_id    接口服务所实现的接口定义 Id 或 应答接收所实现的接口定义 Id\n  * @param version 接口服务所实现的接口定义版本 或 应答接收所实现的接口定义版本\n  * @param e_id    提供接口服务的参与方 Id 或 提供应答接收的参与方 Id\n  * @param addr    接口服务地址 或 应答接收地址\n  * @param port    接口服务端口 或 应答接收端口\n  */\nfinal case class ApiServAndAck(id: String, name: String, d_id: String, version: String, e_id: String, addr: String, port: Int)\n\n/**\n  *\n  * @param eid        身份ID\n  * @param cert_name  证书别名\n  * @param hash       内容Hash\n  * @param timeCreate 签名时刻\n  * @param sign       数字签名\n  */\nfinal case class Signature(eid: String, cert_name: String, hash: String, timeCreate: Long, sign: String)\n\n/**\n  *\n  * @param cid        接口请求 Id\n  * @param e_from     请求方的应答接收 Id\n  * @param e_to       请求的接口服务 Id\n  * @param method     调用的方法\n  * @param b_req      请求 or 应答标志, True 代表请求; False 代表应答\n  * @param b_end      结束标志, True 代表结束（即本次请求/应答为最后一个）,False代表未结束\n  * @param seq        请求或应答的序号, 从1开始\n  * @param hash       请求/应答内容 Hash依据 b_req 和 b_end 的值，分别对应 rb、ri、re 和 cb、ci、ce 方法的请求/应答内容的按照接口定义中指定的 Hash 算法生成的 Hash\n  * @param hash_claim 选择性披露 Hash，最后一个应答后，由所有请求和应答的 Hash 按顺序拼接后取 Hash 生成\n  * @param tm_create  请求/应答建立的时间\n  * @param sign_r     接口请求方按照接口定义中指定的签名算法对内容 Hash 的签名\n  * @param sign_c     接口服务方按照接口定义中指定的签名算法对内容 Hash 的签名\n  */\nfinal case class ReqAckProof(cid: String, e_from: String, e_to: String, method: String, b_req: Boolean, b_end: Boolean, seq: Int,\n                             hash: String, hash_claim: Option[String], tm_create: Long, sign_r: Signature, sign_c: Signature)\n\n/**\n  * @author zyf\n  */\nclass InterfaceCooperation extends IContract {\n\n  // 从账户管理合约中读取账户 ID\n  val didTplName = \"RdidOperateAuthorizeTPL\"\n  // 分割横线\n  val infix = \"-\"\n  // 前缀标识\n  val apiDefPrefix = \"api-def-main\"\n  val defVersionPrefix = \"api-def-version\"\n  val defHolderPrefix = \"api-def-holder\"\n  val apiServPrefix = \"api-service-main\"\n  val ackRecPrefix = \"ack-receive-main\"\n  val servHolderPrefix = \"api-service-holder\"\n  val receHolderPrefix = \"ack-receive-holder\"\n  val reqAckRequestPrefix = \"req-ack-proof-request\"\n  val reqAckReponsePrefix = \"req-ack-proof-response\"\n\n  // Json序列化与反序列化时使用的格式\n  implicit val formats = DefaultFormats\n\n  object ACTION {\n\n    object InterfaceRegister {\n      val registerApiDefinition = \"registerApiDefinition\"\n      val registerApiService = \"registerApiService\"\n      val registerApiAckReceive = \"registerApiAckReceive\"\n    }\n\n    object InterfaceReqAckProof {\n      val reqAckProof = \"reqAckProof\"\n    }\n\n  }\n\n  override def init(ctx: ContractContext): Unit = {\n\n    println(s\"init contract, tx‘s id is ${ctx.t.id}, contract’s name is ${ctx.t.getCid.chaincodeName}, contract’s version is ${ctx.t.getCid.version}\")\n    ctx.api.getLogger.info(s\"init contract, tx‘s id is ${ctx.t.id}, contract’s name is ${ctx.t.getCid.chaincodeName}, contract’s version is ${ctx.t.getCid.version}\")\n\n  }\n\n  /**\n    * 注册接口定义\n    *\n    * @param ctx\n    * @param apiDefinition\n    * @return\n    */\n  def registerApiDefinition(ctx: ContractContext, apiDefinition: ApiDefinition): ActionResult = {\n    val txr_credit_code = ctx.t.getSignature.getCertId.creditCode\n    val def_key = apiDefPrefix + infix + txr_credit_code + infix + apiDefinition.id + infix + apiDefinition.version\n    val def_version_key = defVersionPrefix + infix + txr_credit_code + infix + apiDefinition.id + infix + apiDefinition.version\n    val def_holder_key = defVersionPrefix + infix + apiDefinition.id\n    // 判断是否是自己注册的\n    if (ctx.api.getVal(def_holder_key) == null || ctx.api.getVal(def_holder_key) == txr_credit_code) {\n      // 自己先前注册过，现在要注册的是新的版本\n      if (ctx.api.getVal(def_key) != null) {\n        ctx.api.getLogger.info(s\"接口定义方 $txr_credit_code 更新定义API ${writePretty(apiDefinition)}\")\n      }\n      // 保存apiDefinition，使用jsonString\n      ctx.api.setVal(def_key, writePretty(apiDefinition))\n      // 设置当前版本号\n      ctx.api.setVal(def_version_key, apiDefinition.version)\n      // 设置接口定义者，即该接口定义是谁来定义的，只能由此人进行更新\n      ctx.api.setVal(def_holder_key, txr_credit_code)\n      ctx.api.getLogger.info(s\"接口定义方 $txr_credit_code 定义API ${writePretty(apiDefinition)}\")\n    } else {\n      throw ContractException(s\"用户 $txr_credit_code 非注册接口定义者,不能执行更新操作\")\n    }\n    null\n  }\n\n  /**\n    * 接口服务登记，接口服务方来调用该方法\n    * 接口服务方或者代理方 发布指定接口定义的接口请求实现实例\n    *\n    * @param ctx\n    * @param apiServAndAck\n    * @return\n    */\n  def registerApiService(ctx: ContractContext, apiServAndAck: ApiServAndAck): ActionResult = {\n    val txr_credit_code = ctx.t.getSignature.getCertId.creditCode\n    val def_holder_key = defVersionPrefix + infix + apiServAndAck.d_id\n    val service_holder_key = servHolderPrefix + infix + apiServAndAck.id\n    val def_holder = ctx.api.getVal(def_holder_key)\n    if (def_holder != null) {\n      val def_key = apiDefPrefix + infix + def_holder.asInstanceOf[String] + infix + apiServAndAck.d_id + infix + apiServAndAck.version\n      // 判断接口定义(id+version)是否存在\n      if (ctx.api.getVal(def_key) != null) {\n        // 判断参与方是否被注册,且是e_id == credit_code\n        if (txr_credit_code == apiServAndAck.e_id) {\n          ctx.api.setVal(apiServPrefix + infix + apiServAndAck.e_id + infix + apiServAndAck.id, writePretty(apiServAndAck))\n          ctx.api.setVal(service_holder_key, apiServAndAck.e_id)\n          ctx.api.getLogger.info(s\"接口服务方/代理方 ${txr_credit_code} 发布接口服务登记 ${writePretty(apiServAndAck)}\")\n        } else {\n          ctx.api.getLogger.error(s\"e_id ${apiServAndAck.e_id} != credit_code $txr_credit_code\")\n          throw ContractException(s\"e_id ${apiServAndAck.e_id} != credit_code $txr_credit_code\")\n        }\n      } else {\n        ctx.api.getLogger.error(s\"id为${apiServAndAck.d_id}, 版本为${apiServAndAck.version} 的接口定义不存在\")\n        throw ContractException(s\"id为${apiServAndAck.d_id}, 版本为${apiServAndAck.version} 的接口定义不存在\")\n      }\n    } else {\n      ctx.api.getLogger.error(s\"id为${apiServAndAck.d_id} 的接口定义不存在\")\n      throw ContractException(s\"id为${apiServAndAck.d_id} 的接口定义不存在\")\n    }\n    null\n  }\n\n  /**\n    * 应答接收登记，接口请求方来调用该方法\n    * 接口请求方或者代理方发布指定接口定义的接口应答实现实例\n    *\n    * @param ctx\n    * @param apiServAndAck\n    * @return\n    */\n  def registerApiAckReceive(ctx: ContractContext, apiServAndAck: ApiServAndAck): ActionResult = {\n    val txr_credit_code = ctx.t.getSignature.getCertId.creditCode\n    val def_holder_key = defVersionPrefix + infix + apiServAndAck.d_id\n    val ack_holder_key = receHolderPrefix + infix + apiServAndAck.id\n    val def_holder = ctx.api.getVal(def_holder_key)\n    if (def_holder != null) {\n      val def_key = apiDefPrefix + infix + def_holder.asInstanceOf[String] + infix + apiServAndAck.d_id + infix + apiServAndAck.version\n      // 判断接口定义(id+version)是否存在\n      if (ctx.api.getVal(def_key) != null) {\n        // 判断参与方是否被注册,且是e_id == credit_code\n        // TODO 判断服务是否已经被注册？\n        if (txr_credit_code == apiServAndAck.e_id) {\n          ctx.api.setVal(ackRecPrefix + infix + apiServAndAck.e_id + infix + apiServAndAck.id, writePretty(apiServAndAck))\n          ctx.api.setVal(ack_holder_key, apiServAndAck.e_id)\n          ctx.api.getLogger.info(s\"接口服务方/代理方 ${txr_credit_code} 发布接口应答登记 ${writePretty(apiServAndAck)}\")\n        } else {\n          ctx.api.getLogger.error(s\"e_id ${apiServAndAck.e_id} != credit_code $txr_credit_code\")\n          throw ContractException(s\"e_id ${apiServAndAck.e_id} != credit_code $txr_credit_code\")\n        }\n      } else {\n        ctx.api.getLogger.error(s\"id为${apiServAndAck.d_id}, 版本为${apiServAndAck.version} 的接口定义不存在\")\n        throw ContractException(s\"id为${apiServAndAck.d_id}, 版本为${apiServAndAck.version} 的接口定义不存在\")\n      }\n    } else {\n      ctx.api.getLogger.error(s\"id为${apiServAndAck.d_id} 的接口定义不存在\")\n      throw ContractException(s\"id为${apiServAndAck.d_id} 的接口定义不存在\")\n    }\n    null\n  }\n\n  /**\n    * 请求存证：请求方或者代理方提交交易提交签名交易\n    * 应答存证：服务方或者代理方提交交易提交签名交易\n    *\n    * @param ctx\n    * @param reqAckProof\n    * @return\n    */\n  def reqAckProof(ctx: ContractContext, reqAckProof: ReqAckProof): ActionResult = {\n    val txr_credit_code = ctx.t.getSignature.getCertId.creditCode\n    // 应答注册者\n    val ack_holder_key = receHolderPrefix + infix + reqAckProof.e_from\n    // 服务注册者\n    val service_holder_key = servHolderPrefix + infix + reqAckProof.e_to\n    val ack_holder = ctx.api.getVal(ack_holder_key)\n    val service_holder = ctx.api.getVal(service_holder_key)\n    // 可根据是否有应答注册者或服务注册者来判断接口服务以及判断接口应答是否被登记\n    if (service_holder != null && ack_holder != null) {\n      // e_from与e_to的校验\n      // 请求方注册的应答接收\n      val ack_receive = ctx.api.getVal(ackRecPrefix + infix + ack_holder.asInstanceOf[String] + infix + reqAckProof.e_from)\n      val servAndAck_receive = read[ApiServAndAck](ack_receive.asInstanceOf[String])\n      // 服务方注册的接口服务\n      val api_service = ctx.api.getVal(apiServPrefix + infix + service_holder.asInstanceOf[String] + infix + reqAckProof.e_to)\n      val servAndAck_service = read[ApiServAndAck](api_service.asInstanceOf[String])\n      if (reqAckProof.b_req) {\n        // 交易提交者需是接口请求方，由e_from 获得 ack_receive 来判断，判断应答接收注册者是否就是交易提交者\n        if (servAndAck_receive.e_id == txr_credit_code) {\n          // 对Signature中的 e_id 进行校验\n          if (servAndAck_receive.e_id == reqAckProof.sign_r.eid && servAndAck_service.e_id == reqAckProof.sign_c.eid) {\n            // 使用 e_from 或 e_to 可以关联到登记应答接收和接口服务的参与方，并获得其绑定的证书，关联到定义，拿到签名算法\n            // 接口定义持有者\n            val def_holder_key = defVersionPrefix + infix + servAndAck_receive.d_id\n            val def_key = apiDefPrefix + infix + ctx.api.getVal(def_holder_key) + infix + servAndAck_receive.d_id + infix + servAndAck_receive.version\n            val api_def = read[ApiDefinition](ctx.api.getVal(def_key).asInstanceOf[String])\n            val sig_alg = api_def.algo_sign\n            ctx.api.getLogger.info(s\"def_key 为 $def_key, api_def 为 $api_def, sig_alg为 $sig_alg\")\n            // 验证请求方\n            val req_x509cert = getX509Cert(ctx, reqAckProof.sign_r.eid, reqAckProof.sign_r.cert_name)\n            val req_verifyRes = verify(sig_alg, BytesHex.hex2bytes(reqAckProof.sign_r.sign), reqAckProof.sign_r.hash.getBytes(StandardCharsets.UTF_8), req_x509cert.getPublicKey)\n            ctx.api.getLogger.info(s\"对请求方签名数据进行验签, credit_code 为 ${reqAckProof.sign_r.eid}, cert_name ${reqAckProof.sign_r.cert_name}, cert $req_x509cert, verify_req_res $req_verifyRes\")\n            // 验证服务方\n            val resp_x509cert = getX509Cert(ctx, reqAckProof.sign_c.eid, reqAckProof.sign_c.cert_name)\n            val resp_verifyRes = verify(sig_alg, BytesHex.hex2bytes(reqAckProof.sign_c.sign), reqAckProof.sign_c.hash.getBytes(StandardCharsets.UTF_8), resp_x509cert.getPublicKey)\n            ctx.api.getLogger.info(s\"对服务方签名数据进行验签, credit_code 为 ${reqAckProof.sign_c.eid}, cert_name ${reqAckProof.sign_c.cert_name}, cert $resp_x509cert, verify_resp_res $resp_verifyRes\")\n            if (!req_verifyRes || !resp_verifyRes) {\n              throw ContractException(s\"请求方签名验签结果为$req_verifyRes, 服务方签名验签结果为$resp_verifyRes\")\n            }\n          } else if (servAndAck_receive.e_id != reqAckProof.sign_r.eid && servAndAck_service.e_id == reqAckProof.sign_c.eid) {\n            throw ContractException(s\"sign_r e_id ${reqAckProof.sign_r.eid} 不等于接口请求方 credit_code ${servAndAck_receive.e_id}\")\n          } else if (servAndAck_receive.e_id == reqAckProof.sign_r.eid && servAndAck_service.e_id != reqAckProof.sign_c.eid) {\n            throw ContractException(s\"sign_c e_id ${reqAckProof.sign_c.eid} 不等于接口服务方 credit_code ${servAndAck_service.e_id}\")\n          } else {\n            throw ContractException(s\"sign_r e_id ${reqAckProof.sign_r.eid} 不等于接口请求方 credit_code ${servAndAck_service.e_id}, sign_c e_id ${reqAckProof.sign_c.eid} 不等于接口服务方 credit_code ${reqAckProof.sign_c.eid}\")\n          }\n          ctx.api.getLogger.info(s\"接口请求存证,请求id为${reqAckProof.cid},序号为${reqAckProof.seq},数据为${writePretty(reqAckProof)}\")\n          ctx.api.setVal(reqAckRequestPrefix + infix + reqAckProof.cid + infix + reqAckProof.seq, writePretty(reqAckProof))\n        } else {\n          ctx.api.getLogger.error(s\"接口请求方 e_id ${servAndAck_service.e_id} != credit_code $txr_credit_code\")\n          throw ContractException(s\"接口请求方 ${servAndAck_service.e_id} != credit_code $txr_credit_code\")\n        }\n      } else {\n        // 交易提交者需是接口服务方，由e_to 获得 api_service 来判断，判断应答注册者是否就是交易提交者\n        if (servAndAck_service.e_id == txr_credit_code) {\n          // 对Signature中的 e_id 进行校验\n          if (servAndAck_service.e_id == reqAckProof.sign_c.eid && servAndAck_receive.e_id == reqAckProof.sign_r.eid) {\n            // 使用 e_from 或 e_to 可以关联到登记应答接收和接口服务的参与方，并获得其绑定的证书，关联到定义，拿到签名算法\n            // 接口定义持有者\n            val def_holder_key = defVersionPrefix + infix + servAndAck_service.d_id\n            val def_key = apiDefPrefix + infix + ctx.api.getVal(def_holder_key) + infix + servAndAck_service.d_id + infix + servAndAck_service.version\n            val api_def = read[ApiDefinition](ctx.api.getVal(def_key).asInstanceOf[String])\n            val sig_alg = api_def.algo_sign\n            ctx.api.getLogger.info(s\"def_key 为 $def_key, api_def 为 $api_def, sig_alg为 $sig_alg\")\n            // 验证服务方\n            val resp_x509cert = getX509Cert(ctx, reqAckProof.sign_c.eid, reqAckProof.sign_c.cert_name)\n            val resp_verifyRes = verify(sig_alg, BytesHex.hex2bytes(reqAckProof.sign_c.sign), reqAckProof.sign_c.hash.getBytes(StandardCharsets.UTF_8), resp_x509cert.getPublicKey)\n            ctx.api.getLogger.info(s\"对服务方签名数据进行验签, credit_code 为 ${reqAckProof.sign_c.eid}, cert_name ${reqAckProof.sign_c.cert_name}, cert $resp_x509cert, verify_resp_res $resp_verifyRes\")\n            // 验证请求方\n            val req_x509cert = getX509Cert(ctx, reqAckProof.sign_r.eid, reqAckProof.sign_r.cert_name)\n            val req_verifyRes = verify(sig_alg, BytesHex.hex2bytes(reqAckProof.sign_r.sign), reqAckProof.sign_r.hash.getBytes(StandardCharsets.UTF_8), req_x509cert.getPublicKey)\n            ctx.api.getLogger.info(s\"对请求方签名数据进行验签, credit_code 为 ${reqAckProof.sign_r.eid}, cert_name ${reqAckProof.sign_r.cert_name}, cert $req_x509cert, verify_req_res $req_verifyRes\")\n            if (!resp_verifyRes || !req_verifyRes) {\n              throw ContractException(s\"请求方签名验签结果为$req_verifyRes, 服务方签名验签结果为$resp_verifyRes\")\n            }\n          } else if (servAndAck_service.e_id != reqAckProof.sign_c.eid && servAndAck_receive.e_id == reqAckProof.sign_r.eid) {\n            throw ContractException(s\"sign_c e_id ${reqAckProof.sign_c.eid} 不等于接口服务方 credit_code ${servAndAck_service.e_id}\")\n          } else if (servAndAck_service.e_id == reqAckProof.sign_c.eid && servAndAck_receive.e_id != reqAckProof.sign_r.eid) {\n            throw ContractException(s\"sign_r e_id ${reqAckProof.sign_r.eid} 不等于接口请求方 credit_code ${servAndAck_receive.e_id}\")\n          } else {\n            throw ContractException(s\"sign_r e_id ${reqAckProof.sign_r.eid} 不等于接口请求方 credit_code ${servAndAck_receive.e_id}, sign_c e_id ${reqAckProof.sign_c.eid} 不等于接口服务方 credit_code ${servAndAck_service.e_id}\")\n          }\n          ctx.api.getLogger.info(s\"接口应答存证,请求id为${reqAckProof.cid},序号为${reqAckProof.seq},数据为${writePretty(reqAckProof)}\")\n          ctx.api.setVal(reqAckReponsePrefix + infix + reqAckProof.cid + infix + reqAckProof.seq, writePretty(reqAckProof))\n        } else {\n          ctx.api.getLogger.error(s\"接口服务方 e_id ${servAndAck_receive.e_id} 不等于交易提交者 credit_code $txr_credit_code\")\n          throw ContractException(s\"接口服务方 e_id ${servAndAck_receive.e_id} 不等于交易提交者 credit_code $txr_credit_code\")\n        }\n      }\n    } else if (service_holder == null && ack_holder != null) {\n      ctx.api.getLogger.error(s\"没有接口服务id为 ${reqAckProof.e_to} 的接口服务登记\")\n      throw ContractException(s\"没有接口服务id为 ${reqAckProof.e_to} 的接口服务登记\")\n    } else if (service_holder != null && ack_holder == null) {\n      ctx.api.getLogger.error(s\"没有接口应答id为 ${reqAckProof.e_from} 的接口应答登记\")\n      throw ContractException(s\"没有接口应答id为 ${reqAckProof.e_from} 的接口应答登记\")\n    } else {\n      ctx.api.getLogger.error(s\"没有接口服务id为 ${reqAckProof.e_to} 的接口服务登记, 且没有接口应答id为 ${reqAckProof.e_from} 的接口应答登记\")\n      throw ContractException(s\"没有接口服务id为 ${reqAckProof.e_to} 的接口服务登记, 且没有接口应答id为 ${reqAckProof.e_from} 的接口应答登记\")\n    }\n    null\n  }\n\n  /**\n    * 用来验证内容签名\n    *\n    * @param alg       签名验签算法\n    * @param signature 签名数据\n    * @param message   被签名的数据\n    * @param publicKey 公钥\n    * @return\n    */\n  def verify(alg: String, signature: Array[Byte], message: Array[Byte], publicKey: PublicKey): Boolean = {\n    if (publicKey == null) throw ContractException(\"验证签名时公钥为空！\")\n    if (signature == null || signature.length <= 0) throw ContractException(\"待验证的签名信息为空！\")\n    if (message == null || message.length <= 0) throw ContractException(\"待签名内容为空！\")\n    try {\n      val s2 = java.security.Signature.getInstance(alg)\n      s2.initVerify(publicKey)\n      s2.update(message)\n      s2.verify(signature)\n    } catch {\n      case ex: Exception => throw ContractException(ex.getMessage)\n    }\n  }\n\n  /**\n    * 根据证书pem字符串，构造证书，construct certificate by pemString\n    *\n    * @param ctx\n    * @param creditCode\n    * @param certName\n    * @throws Exception\n    * @return X509Certificate\n    */\n  @throws[Exception]\n  def getX509Cert(ctx: ContractContext, creditCode: String, certName: String): X509Certificate = {\n    val cert = SerializeUtils.deserialise(ctx.api.getStateEx(ctx.api.getChainNetId, didTplName, certPrefix + creditCode + \".\" + certName).asInstanceOf[Array[Byte]]).asInstanceOf[Certificate]\n    // cert.certificate 是读取pem证书文件得到的字符串\n    val stringReader = new StringReader(cert.certificate)\n    val pemReader = new PemReader(stringReader)\n    val cf = CertificateFactory.getInstance(\"X.509\")\n    val certByte = pemReader.readPemObject.getContent\n    val x509Cert = cf.generateCertificate(new ByteArrayInputStream(certByte)).asInstanceOf[X509Certificate]\n    pemReader.close()\n    stringReader.close\n    x509Cert\n  }\n\n\n  override def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\n\n    // Json序列化与反序列化时使用的格式\n    implicit val formats = DefaultFormats\n\n    val json = parse(sdata)\n\n    try {\n      action match {\n        // 接口定义及相关登记\n        case ACTION.InterfaceRegister.registerApiDefinition => registerApiDefinition(ctx, json.extract[ApiDefinition])\n        // 接口服务登记\n        case ACTION.InterfaceRegister.registerApiService => registerApiService(ctx, json.extract[ApiServAndAck])\n        // 接口应答登记\n        case ACTION.InterfaceRegister.registerApiAckReceive => registerApiAckReceive(ctx, json.extract[ApiServAndAck])\n        // 请求应答存证\n        case ACTION.InterfaceReqAckProof.reqAckProof => reqAckProof(ctx, json.extract[ReqAckProof])\n        // 未匹配到的\n        case _ => throw ContractException(\"no such method\")\n      }\n    } catch {\n      case ex: MappingException => throw ContractException(ex.getMessage)\n    }\n  }\n}\n",
      "cType" : "CODE_SCALA",
      "rType" : "RUN_SERIAL",
      "sType" : "STATE_BLOCK",
      "cclassification" : "CONTRACT_SYSTEM"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.971Z",
      "signature" : "MEQCICmsKyTUd0JYEYFYwWkMHTlKhNDTAAixY5VJ5jUXBH6nAiAQShZfAugNTkWvViLFYAwmwNdqmu22FY+zA8tCEl7bMw=="
    }
  }, {
    "id" : "89dde3f0-fa74-485f-9ced-af6994cd5b5d",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"be880a065bfcc88156380237eaadf7f0fbf64a29ccadd11afa8d800d7e971e95\",\"description\":\"注册接口定义\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"InterfaceCooperation.registerApiDefinition\",\"createTime\":\"2022-06-07T13:15:03.977Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.979Z",
      "signature" : "MEYCIQDiBljkXN4t4Lf/ZLlTNTxRADSYWO1eQwZt7NyaN3winQIhAIA+kkyvFrxo8tO2Wa0MKhPxgwQ2oZ4yoGh8F2yivUDY"
    }
  }, {
    "id" : "52d778e6-1206-42f7-931f-0cc3c33e0391",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"bb8305ccd5eb9687f7e188ce7db59cc84fa82466717e4ab95315790388f8a213\",\"description\":\"注册接口服务\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"InterfaceCooperation.registerApiService\",\"createTime\":\"2022-06-07T13:15:03.977Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.981Z",
      "signature" : "MEUCIBMmcg/xmlBjddrUlqjncprHKx6PjHOs7rONc+3WMrFNAiEAo3uVcbQT+MG7DNt54aNLb5bI8YUv0x8pyd/52R8NWXM="
    }
  }, {
    "id" : "4668f924-248f-46ca-ae69-8c3fdebd948c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"251f1f3712bc98498c766b744c67ff2bee62d4210f01c8be9a2f3965362e0542\",\"description\":\"注册接口应答\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"InterfaceCooperation.registerApiAckReceive\",\"createTime\":\"2022-06-07T13:15:03.977Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.983Z",
      "signature" : "MEUCIQCSnfPYtgrw/wHLwk5qMvNFCLlTkGDqxOpEzHV3z8g1GgIgCOVRnpacIofUPWsmVQ5OCOls8yGUO6k7qe8o07vKrmc="
    }
  }, {
    "id" : "bf22b66e-9857-4a17-9a65-3b534ebcb1af",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"b5d55e371656a809806f457c0a50c8da4dbb8f145408c01cc804eebc47e5f551\",\"description\":\"请求应答存证\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"InterfaceCooperation.reqAckProof\",\"createTime\":\"2022-06-07T13:15:03.977Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-06-07T21:15:03.985Z",
      "signature" : "MEYCIQC+FtRwDe3aG1SUKPT2ZELzpBK4Jo8sBOXzKRSDZ9Ed8wIhAKmuSMm0WW86mLI7EMNKWwHmNaFGcNulnrJfaG74ZKtP"
    }
  } ]
}