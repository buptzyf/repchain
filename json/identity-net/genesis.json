{
  "header" : {
    "version" : 2,
    "height" : "1"
  },
  "transactions" : [ {
    "id" : "29e1f484-7265-4917-bdb9-e0dada993551",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "package rep.sc.tpl.did\n\nimport org.json4s.DefaultFormats\nimport org.json4s.jackson.JsonMethods.parse\nimport rep.proto.rc2.{ActionResult, BindCertToAuthorize, Certificate, Operate, Signer}\nimport rep.sc.scalax.{ContractContext, ContractException, IContract}\nimport rep.sc.tpl.did.operation.AuthOperation.AuthorizeStatus\nimport rep.sc.tpl.did.operation.CertOperation.CertStatus\nimport rep.sc.tpl.did.operation.OperOperation.OperateStatus\nimport rep.sc.tpl.did.operation.SignerOperation.SignerStatus\nimport rep.sc.tpl.did.operation.{AuthOperation, CertOperation, OperOperation, SignerOperation}\nimport scalapb.json4s.JsonFormat\n\n\n/**\n  * @author zyf\n  */\nobject RdidOperateAuthorizeTPL {\n\n\n}\n\n/**\n  * @author zyf\n  */\nclass RdidOperateAuthorizeTPL extends IContract {\n\n  object ACTION {\n\n    object Signer {\n      val signUpSigner = \"signUpSigner\"\n      val updateSigner = \"updateSigner\"\n      val updateSignerStatus = \"updateSignerStatus\"\n    }\n\n    object Certificate {\n      val signUpCertificate = \"signUpCertificate\" // 无需授权\n      val updateCertificateStatus = \"updateCertificateStatus\" // 无需授权\n      val signUpAllTypeCertificate = \"signUpAllTypeCertificate\" // 需授权\n      val updateAllTypeCertificateStatus = \"updateAllTypeCertificateStatus\" // 需授权\n    }\n\n    object Authorize {\n      val grantOperate = \"grantOperate\"\n      val updateGrantOperateStatus = \"updateGrantOperateStatus\"\n      val bindCertToAuthorize = \"bindCertToAuthorize\"\n    }\n\n    object Operate {\n      val signUpOperate = \"signUpOperate\"\n      val updateOperateStatus = \"updateOperateStatus\"\n    }\n\n  }\n\n\n  implicit val formats = DefaultFormats\n\n  def init(ctx: ContractContext): Unit = {\n    println(s\"tid: $ctx.t.id\")\n  }\n\n  def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\n\n    // 两种序列化方式，如果复杂的 pb 结构体（比如带有枚举类型），则只能使用 pb 自带的 json 序列化方式\n    val param = parse(sdata)\n    val parser = JsonFormat.parser\n    type AuthorizeJString = String\n\n    action match {\n      case ACTION.Signer.signUpSigner =>\n        SignerOperation.signUpSigner(ctx, parser.fromJsonString(sdata)(Signer))\n\n      case ACTION.Signer.updateSigner =>\n        SignerOperation.updateSigner(ctx, parser.fromJsonString(sdata)(Signer))\n\n      case ACTION.Signer.updateSignerStatus =>\n        SignerOperation.updateSignerStatus(ctx, param.extract[SignerStatus])\n\n      case ACTION.Certificate.signUpCertificate =>\n        CertOperation.signUpCertificate(ctx, parser.fromJsonString(sdata)(Certificate))\n\n      case ACTION.Certificate.updateCertificateStatus =>\n        CertOperation.updateCertificateStatus(ctx, param.extract[CertStatus])\n\n      case ACTION.Certificate.signUpAllTypeCertificate =>\n        CertOperation.signUpAllTypeCertificate(ctx, parser.fromJsonString(sdata)(Certificate))\n\n      case ACTION.Certificate.updateAllTypeCertificateStatus =>\n        CertOperation.updateAllTypeCertificateStatus(ctx, param.extract[CertStatus])\n\n      case ACTION.Operate.signUpOperate =>\n        OperOperation.signUpOperate(ctx, parser.fromJsonString(sdata)(Operate))\n\n      case ACTION.Operate.updateOperateStatus =>\n        OperOperation.updateOperateStatus(ctx, param.extract[OperateStatus])\n\n      case ACTION.Authorize.grantOperate =>\n        AuthOperation.grantOperate(ctx, param.extract[List[AuthorizeJString]])\n\n      case ACTION.Authorize.bindCertToAuthorize =>\n        AuthOperation.bindCertToAuthorize(ctx, parser.fromJsonString(sdata)(BindCertToAuthorize))\n\n      case ACTION.Authorize.updateGrantOperateStatus =>\n        AuthOperation.updateGrantOperateStatus(ctx, param.extract[AuthorizeStatus])\n\n      case _ =>\n        throw ContractException(JsonFormat.toJsonString(ActionResult(100000, \"没有对应的方法\")))\n    }\n  }\n}\n",
      "cType" : "CODE_SCALA",
      "rType" : "RUN_SERIAL",
      "sType" : "STATE_BLOCK",
      "cclassification" : "CONTRACT_SYSTEM"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:57.051Z",
      "signature" : "MEUCIQCmYVy4q4IaIoC0z4Trbkn6DFB6i2zKINUI/ujMSq2FtAIgL2aLr3CbcqEu5rVZD28O/NpjEp604Aj16GcN90FnK9k="
    }
  }, {
    "id" : "db91f5a7-493e-4d79-94e0-5af4f6b938f0",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"super_admin\",\"creditCode\":\"951002007l78123233\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\nMIIBYzCCAQigAwIBAgIEXe8B6zAKBggqhkjOPQQDAjA5MREwDwYDVQQKDAhyZXBj\\naGFpbjEOMAwGA1UECwwFaXNjYXMxFDASBgNVBAMMC3N1cGVyX2FkbWluMB4XDTE5\\nMTIxMDAyMjQ0M1oXDTIwMTIwOTAyMjQ0M1owOTERMA8GA1UECgwIcmVwY2hhaW4x\\nDjAMBgNVBAsMBWlzY2FzMRQwEgYDVQQDDAtzdXBlcl9hZG1pbjBZMBMGByqGSM49\\nAgEGCCqGSM49AwEHA0IABK9m+cb8jaYQ+ts/hK4INuQbOwAwoIhVa3uaRxsOsgoR\\n+QaPuwcZAIbGWSa9bn8oGjSBDQutmE5XONbdiDwPRtwwCgYIKoZIzj0EAwIDSQAw\\nRgIhAKZto+39OFced9YDaXYkOLrLcKD+8RbF57vzHpJrnFd1AiEAhNEK8MOsAlhM\\neRZmlXsq4KsvQFs+Wav9N9qJ+GGRpCs=\\n-----END CERTIFICATE-----\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-05-26T14:13:57.388Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"951002007l78123233\",\"certName\":\"super_admin\"},\"certHash\":\"574b99f7d2915afe386f5fcd147778e6990a1082e9b4a006ac3da958ff80757d\",\"version\":\"1.0\"}],\"createTime\":\"2022-05-26T14:13:57.388Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:58.770Z",
      "signature" : "MEQCICBcbomFQ+TIJG/fxLadX6pI6gVaVfqhWZ15v+XCGSkNAiBhKcckeuGemc++n6h0JHncfuGbgi9D6a0Yuxl/cuQm1w=="
    }
  }, {
    "id" : "ca339210-aee8-43ca-9f9a-843d0a5ffe2f",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"node1\",\"creditCode\":\"121000005l35120456\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\nMIIBTDCB9KADAgECAgRd7wBCMAoGCCqGSM49BAMCMC8xETAPBgNVBAoMCHJlcGNo\\nYWluMQ4wDAYDVQQLDAVpc2NhczEKMAgGA1UEAwwBMTAeFw0xOTEyMTAwMjE3Mzha\\nFw0yMDEyMDkwMjE3MzhaMC8xETAPBgNVBAoMCHJlcGNoYWluMQ4wDAYDVQQLDAVp\\nc2NhczEKMAgGA1UEAwwBMTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABJu7PT4Z\\ns5hqqNha9SrP60TecIDVYGry0v6ayV5lP8w5FJ2UtRECrpUxuoO2pfaHfxyYIXCZ\\nA8w7YaZU0s4CEfcwCgYIKoZIzj0EAwIDRwAwRAIgcAxkxmiNexPx8CF+DvII7168\\neeVcfsJwoMcFFLKCWrECICSIkc9vC6Vwze3s2UwBuIiSlwNxZ0YDJcdlbcmESWHy\\n-----END CERTIFICATE-----\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-05-26T14:13:58.826Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"121000005l35120456\",\"certName\":\"node1\"},\"certHash\":\"e6e6e8495cf9eeabce5b463820d4005dc0314c594c119789f3d8da0c6542db26\",\"version\":\"1.0\"}],\"createTime\":\"2022-05-26T14:13:58.826Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:58.831Z",
      "signature" : "MEUCIEM8kYf04e6Pkcee5K1JNCb6ylTf35AM9FGJoH3MNT+vAiEA37+ericdIB72d39823DGFLE8PZDsxvusU/ZEvfsxlas="
    }
  }, {
    "id" : "ab1ce6f6-a609-4035-ab4f-ca1b8bf50a03",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"node2\",\"creditCode\":\"12110107bi45jh675g\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\nMIIBTTCB9KADAgECAgRd7wDfMAoGCCqGSM49BAMCMC8xETAPBgNVBAoMCHJlcGNo\\nYWluMQ4wDAYDVQQLDAVpc2NhczEKMAgGA1UEAwwBMjAeFw0xOTEyMTAwMjIwMTVa\\nFw0yMDEyMDkwMjIwMTVaMC8xETAPBgNVBAoMCHJlcGNoYWluMQ4wDAYDVQQLDAVp\\nc2NhczEKMAgGA1UEAwwBMjBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABIqbpyaG\\nr7ST/JsS86YBzlG/S3WqyXBCk00OvUfGcynwJt8m0vUnj8Z5QxNtsTUtMilzVayn\\nB7dVpeM1rFB/bGEwCgYIKoZIzj0EAwIDSAAwRQIhAKzfA6yHLF57HoEk+aVRCVpv\\nvAvvQZuHKkYdzS7/TeXjAiBCtWh8sRO4kXjn9e8H0GHxmt+zQPHTr5UJt0b47BDB\\nlg==\\n-----END CERTIFICATE-----\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-05-26T14:13:58.862Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"12110107bi45jh675g\",\"certName\":\"node2\"},\"certHash\":\"ff1a363137a9c696c128c75bbb0fa93427ed79c245ae9a6552b3df1e16e7b20b\",\"version\":\"1.0\"}],\"createTime\":\"2022-05-26T14:13:58.862Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:58.867Z",
      "signature" : "MEUCIQDEZ6vpFVZyanF/IbdMR+RyAmGlmhsQDVzuoSZjCD1uEwIgfV4I+g0/uLl71Rd+IEvVMyKrb1vKa1/WZl0EEY7uF6o="
    }
  }, {
    "id" : "c72100d0-3b3c-4d82-bd11-2e74a78be15c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"node3\",\"creditCode\":\"122000002n00123567\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\nMIIBTDCB9KADAgECAgRd7wElMAoGCCqGSM49BAMCMC8xETAPBgNVBAoMCHJlcGNo\\nYWluMQ4wDAYDVQQLDAVpc2NhczEKMAgGA1UEAwwBMzAeFw0xOTEyMTAwMjIxMjVa\\nFw0yMDEyMDkwMjIxMjVaMC8xETAPBgNVBAoMCHJlcGNoYWluMQ4wDAYDVQQLDAVp\\nc2NhczEKMAgGA1UEAwwBMzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABHemUcIh\\nMpmOiWcbw5BBorqD+0LHaBzYVyKeYj2Sk3HR1M/JIb3R40xHEQbJPdb3SrgClSt6\\nLBiYiNENQBBJLw0wCgYIKoZIzj0EAwIDRwAwRAIgHX8epaHLqyPcNEj+fdD9zn/u\\nj8juebSZq42IRBAYTm0CICy+hKIZyVkNxPjV3tR+k+DjaWrDFSio57VuBbD8Cwvx\\n-----END CERTIFICATE-----\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-05-26T14:13:58.893Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"122000002n00123567\",\"certName\":\"node3\"},\"certHash\":\"bd366ff11687127b0a2108a83fe283e2abfd247d74b849674723f71692129f2d\",\"version\":\"1.0\"}],\"createTime\":\"2022-05-26T14:13:58.893Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:58.898Z",
      "signature" : "MEUCIHjECmk9/3QACAEwLXyYiJRhbfqmYCNuUmAjRjm7bXN2AiEA52FVFj8xzYK3VbVowto7WZS6Y9XuDLD/WLxJccE/Mdo="
    }
  }, {
    "id" : "5c51e616-487b-49dc-8ef2-426df680c99f",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"node4\",\"creditCode\":\"921000005k36123789\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\nMIIBTTCB9KADAgECAgRd7wFdMAoGCCqGSM49BAMCMC8xETAPBgNVBAoMCHJlcGNo\\nYWluMQ4wDAYDVQQLDAVpc2NhczEKMAgGA1UEAwwBNDAeFw0xOTEyMTAwMjIyMjFa\\nFw0yMDEyMDkwMjIyMjFaMC8xETAPBgNVBAoMCHJlcGNoYWluMQ4wDAYDVQQLDAVp\\nc2NhczEKMAgGA1UEAwwBNDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABAjzZaK8\\nUAvLLIpYgH3IVoezCK/sOz+BG1vb19BEdhbPJA/r1xBuDKG1DK9qIVSbAvfHrioH\\nNiceJs6Mym9TgYcwCgYIKoZIzj0EAwIDSAAwRQIgcaGwPxUC//H+yQFRq16m9aZp\\naYwh+NwRs1SQ9USC170CIQCgTXpMxcTbfsKWiPY7QsTGCHn/c0+XS3nVIR2FWno5\\nBg==\\n-----END CERTIFICATE-----\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-05-26T14:13:58.923Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"921000005k36123789\",\"certName\":\"node4\"},\"certHash\":\"6c82fd97dfc8553660a40c6d20b4ebd16de33921010990f4da7ee145c3b48298\",\"version\":\"1.0\"}],\"createTime\":\"2022-05-26T14:13:58.923Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:58.928Z",
      "signature" : "MEUCIHrIDoXHVVRTL4wGfM3EYg0G9Pe7u8Q5UNciO1PPlTPkAiEAo92EMVQkNVtGz+Y3AJGxBOTYWajmxgKsC8qvhj986Fs="
    }
  }, {
    "id" : "09a440d8-819c-472b-9825-2f831d39b29f",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpSigner",
      "args" : [ "{\"name\":\"node5\",\"creditCode\":\"921000006e0012v696\",\"mobile\":\"18912345678\",\"authenticationCerts\":[{\"certificate\":\"-----BEGIN CERTIFICATE-----\\nMIIBTTCB9KADAgECAgRd7wGTMAoGCCqGSM49BAMCMC8xETAPBgNVBAoMCHJlcGNo\\nYWluMQ4wDAYDVQQLDAVpc2NhczEKMAgGA1UEAwwBNTAeFw0xOTEyMTAwMjIzMTVa\\nFw0yMDEyMDkwMjIzMTVaMC8xETAPBgNVBAoMCHJlcGNoYWluMQ4wDAYDVQQLDAVp\\nc2NhczEKMAgGA1UEAwwBNTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABNVDTgfE\\nOQaHL8uQd6Zb4VqQQOuuz/f12zIKQ9QcMaRs87H1o3JBoydjUHSV6e60tXtHt1Ty\\nvaswF9EfMooKpaYwCgYIKoZIzj0EAwIDSAAwRQIhAIHfXVE5IuR73YubAG2gvtZS\\nBHb0TBNri/dYEiCTYP6JAiBBpr0Ssf468NQo74ZjpZmnPBQ88fQApE9RA5WGPAY0\\niA==\\n-----END CERTIFICATE-----\\n\",\"algType\":\"SHA256withECDSA\",\"certValid\":true,\"regTime\":\"2022-05-26T14:13:58.953Z\",\"certType\":\"CERT_AUTHENTICATION\",\"id\":{\"creditCode\":\"921000006e0012v696\",\"certName\":\"node5\"},\"certHash\":\"885bdc9926bfb4db673f28f8428e0b6b4a26a6a5d3e3b16e602e645cb97516f8\",\"version\":\"1.0\"}],\"createTime\":\"2022-05-26T14:13:58.953Z\",\"signerValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:58.956Z",
      "signature" : "MEUCIQDT7geU6tpp+QjL4riBGK9uhugvwYdaUsIHx8yL7lt8kAIgDj6Fb7FpaILl4/fgDK8zGvJP6aY1Wfue/M1nGazwWiY="
    }
  }, {
    "id" : "41b592b0-abfa-4762-b932-6db8282d09fd",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"7d93aeecec616f7f36e3333d0a9264366f36c563a10c978f159b034824898808\",\"description\":\"注册RDID\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.signUpSigner\",\"createTime\":\"2022-05-26T14:13:59.052Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.069Z",
      "signature" : "MEUCIGxsP59k3DfqJ0qzvm6XZk+64rKgctdyAb6J4uTtNNIFAiEA1TeIFg1N2gcdDv2Vp8G3/cxyRCw4TfWpEI6R7xeiicw="
    }
  }, {
    "id" : "c47021fb-b8e7-4044-8697-073373b3cf72",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"122fd24a7b84f3b9f8a91c0bfd31910a655de38d040aba44f874d9bbb3e8f777\",\"description\":\"禁用或启用RDID\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateSignerStatus\",\"createTime\":\"2022-05-26T14:13:59.075Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.078Z",
      "signature" : "MEYCIQDTxT0Kq+oGR75HrNTFtr/iuAn4A3BCC2uswBH3HZvWKAIhALqNblT3iQxcG9tNyZhbUX3sFmb/rW68WCamzMDuOn7g"
    }
  }, {
    "id" : "e4622f20-59be-40fa-ba47-6a8824366694",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"345148e45a3cbd72783b453f072c08af60e7f692b0882eeb2ede98b4ff10a9dc\",\"description\":\"更新信息\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateSigner\",\"createTime\":\"2022-05-26T14:13:59.086Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.087Z",
      "signature" : "MEUCIQCVIV61+bjLmDZfiaFBp8bMJu1YDMQW5RooiS3J2uV+RwIgfR2TL+rlZy5JFkHX1kyTz6CZB+M9Q3YhmDNAY2M4DOU="
    }
  }, {
    "id" : "20d33a2c-faa9-4f61-9bb4-b5513817818c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"c34b7ad979e0cddf1e0fff9140c4aebe5df4ea87dad8fa1e9fa0dd13ad3f55ee\",\"description\":\"用户注册证书\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.signUpCertificate\",\"createTime\":\"2022-05-26T14:13:59.095Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.096Z",
      "signature" : "MEUCICAdwhs7i5+I25BaDfU7Dp47Ur45SyrlWwxTYVWDDT8oAiEA4a5MLo3dkph1VTDwmjWXIqaCYY/4Os9wjJZ0M0S1KaY="
    }
  }, {
    "id" : "45b2fde7-3303-4720-8ae8-821beca59576",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"5e0e7d0eb29e2e7b55926f32d358466b25eb09ebdd320a936c16898d2752b01a\",\"description\":\"用户禁用或启用证书\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateCertificateStatus\",\"createTime\":\"2022-05-26T14:13:59.103Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.104Z",
      "signature" : "MEYCIQDdodplJNfimcamI7sUSm1Y9kiP4+Ap/ABNSZRKh4s0xgIhALhYt+wUIaC6NyVth+kAuPwG0pw6rOh9J0bOIzpGumB2"
    }
  }, {
    "id" : "7bd98603-e819-4acb-8d7a-c3eb9796ac7d",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"7358803962fd55455211f2824c5376f342715fd358f4a24eaa06761ebf503c79\",\"description\":\"用户可为所有人注册证书，需授权\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.signUpAllTypeCertificate\",\"createTime\":\"2022-05-26T14:13:59.117Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.118Z",
      "signature" : "MEYCIQCJCHZsc99zoBE+8QrVtw6FN03QFgYF/KscQZ4N7fMKBAIhAOrfqOoJx3R8w5Me+w1sb5dBUtup6ZW4A09KIBxQKDpx"
    }
  }, {
    "id" : "054b4d0e-21b5-4142-953c-306643984d46",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"6b2c5c52c74ef82365b7898d8685c2523ecf0d049648135081e2972c96f9ae18\",\"description\":\"用户可为所有人禁用或启用证书，需授权，super_admin特殊处理\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateAllTypeCertificateStatus\",\"createTime\":\"2022-05-26T14:13:59.125Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.128Z",
      "signature" : "MEQCIEYkJM2/ZWtaCIu/lmjeIkw7P6UAJ6bNKGm4RtSeeB/3AiAP4O8yQrQIjXMg4lqrwflL6qcE3mZOhm8Io3B5q9Fsbw=="
    }
  }, {
    "id" : "9547d313-e421-40b0-aadb-73974f2a640c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"01f66ad1019321a4986e903bf6d446f7460817528bd6ecf16f48cec17c6653cb\",\"description\":\"注册操作，自己注册自己\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.signUpOperate\",\"createTime\":\"2022-05-26T14:13:59.136Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.138Z",
      "signature" : "MEQCIFrwsyn6jOrOWnU8cCCjZ7ogKboLCh/SGDAWDNaaA6rtAiBYqIRBFR1hnnz2/6j59RdXJIIrx/ayDg5HMOaD8hJltw=="
    }
  }, {
    "id" : "1a9119f1-8fe9-4e67-8367-1acc7d5c2712",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"d68a87979fba2d6de2cebed5820e605597a929cb0fd23d7a3fe9302babb33c3b\",\"description\":\"禁用或启用操作，自己更新自己名下的操作\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateOperateStatus\",\"createTime\":\"2022-05-26T14:13:59.144Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.146Z",
      "signature" : "MEYCIQDoDVUzRO4X8L7p/pNIxFfCM987dQpDNYQe5FU+AJMSVAIhANzrO+CTEVza7S3kZWAF4E0d+b6O4G4wGONVBJYAOFmG"
    }
  }, {
    "id" : "4e6bcfde-568e-46b0-b159-088eb21ca67f",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"ccc1e3d69eedfa68f70d60ed8820a64dada2d3b2c66dda72585c4444a16f2aa1\",\"description\":\"授权操作\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.grantOperate\",\"createTime\":\"2022-05-26T14:13:59.155Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.157Z",
      "signature" : "MEQCIFleu0HOEuFrpATm8eY/6pc+a2HoE6nzntBpf9EnF1ZoAiAijUZ4dClWV4W2SUWiveJ43fcLxVb/3DB2Rcxj7KPoGQ=="
    }
  }, {
    "id" : "9878be73-7d56-4d13-ab90-f4dbceb36990",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"d74f17115a3c42f2de0214503fca50737a4135840f8e61c6db42d7bcd0cb7f15\",\"description\":\"禁用或启用授权\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.updateGrantOperateStatus\",\"createTime\":\"2022-05-26T14:13:59.164Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.165Z",
      "signature" : "MEYCIQCB2hvBDwmca1CV+qH/7nBPCDIdCYEVn+Xzmks+e29phgIhAPgyYKyFjkRY4e43v8npHHWUjA832EpqhVfTlABGjXhf"
    }
  }, {
    "id" : "f29f7aac-aab5-449d-966f-d987d1e9e86a",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"62528762a01b0b5cdbedc6a0d50e12ac06805d466c0f4239dedf0f855b3c75bd\",\"description\":\"绑定证书到授权操作\",\"register\":\"951002007l78123233\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RdidOperateAuthorizeTPL.bindCertToAuthorize\",\"createTime\":\"2022-05-26T14:13:59.171Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.173Z",
      "signature" : "MEQCIFOrr+aBDCmJ0Lxu00QF1/K9exUs0qLgDc5B6JjhxTjwAiAn2Y7S/5FTTDT2P71EA/BxdHEg2z/3O6NzxOef4K5cOQ=="
    }
  }, {
    "id" : "9e0f9f3f-e981-45d9-8f2d-c72e59a0e27c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"d3f2db1d2ab212b967b6b61c7f74dc2247c1aa1e1172066617c3c1a0caa00056\",\"description\":\"发布合约操作\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"*.deploy\",\"createTime\":\"2022-05-26T14:13:59.180Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.181Z",
      "signature" : "MEYCIQCvlemOFa+a6t44Jp8kZSiyYnPut+fv3AlcCMLPcw8MVgIhAND3zu7kMfBpQPaCr2flGCh9LrS6fXw8+ohK83b+WjvT"
    }
  }, {
    "id" : "8a2cbe9b-7945-4d76-82f7-9c9453db1df5",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"b52e35d84f16d268357fc94059b965d843b2827f0654a800bfe8d15c247d0cf2\",\"description\":\"改变合约状态操作\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"*.setState\",\"createTime\":\"2022-05-26T14:13:59.188Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.189Z",
      "signature" : "MEQCIDUoVwMqf2v2+4ut6kEJ/8/tmECJCo7xkV0y4yVD2WkSAiACLu+nrWid/qsVHSfwHKzEpoN/aYNSlBiES5Xa7P+Jyg=="
    }
  }, {
    "id" : "13690579-3765-45a9-8c03-6b217116f7cb",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"38766c3ecf02276e9aee804e7b5e700127bc72e7bb22a8b66fffcf2102bb2f07\",\"description\":\"获取链信息\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"chaininfo.chaininfo\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-26T14:13:59.218Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.223Z",
      "signature" : "MEUCIQClbqsUKNLCc48w2cl36xTJAL/lzGBkzsf8Ltt9CNODZgIgLLJOxOO66VYwAfBBF9YAKNw96fWXCdGRDrMgjvYUpvA="
    }
  }, {
    "id" : "79ba3b21-7499-4bf6-bbf5-8a12bd7e2641",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"527281a9a94d769b45e38d8c1ca516d3965571e895e0ab66b8d873240030bc0a\",\"description\":\"返回组网节点数量\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"chaininfo.node\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-26T14:13:59.231Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.232Z",
      "signature" : "MEQCID0aAknObc6l50IaZhwJ7BFyZZjlh10GKfa97ok7H5V8AiAhSUVo/JyYN7FrpsKtFnfjoX6RZpDi6w07Y0ws1gHndg=="
    }
  }, {
    "id" : "f7e5ad48-c10e-450f-a10e-1f6ab0c00a89",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"08a8818c21d7afd7c31663e7e5b4f766a0e0b3278c7ccd46a362bbc7571a2072\",\"description\":\"返回系统缓存交易数量\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"chaininfo.getcachetransnumber\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-26T14:13:59.239Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.241Z",
      "signature" : "MEYCIQCXwwcwJ73hKkjTUMLBhELDMST47v9yS5wcsGTuzYR+DwIhANT/mjsdVjS0I5AlZltgDRanC6/nY/gC0rIbVxBeGStm"
    }
  }, {
    "id" : "acec3571-4e65-48ac-8cf7-ad0c8d88bc72",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"db5ade19754294f20c36a356e961820e99d9e4e29ba8179be9043a7ae44eccd7\",\"description\":\"返回系统接收到的交易数量\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"chaininfo.getAcceptedTransNumber\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-26T14:13:59.248Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.249Z",
      "signature" : "MEQCIH4Z++3TwkAS6HD9pMRGbGuUr4YspluDn9NtYnmO8gK6AiBX/Fl+BcJF9xwi25kCNRmu1c9jOYyXO8hvZ5uGqLK5Tw=="
    }
  }, {
    "id" : "d8624922-8207-44f5-9551-6208ba30891c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"06b901074a00254571514c5f75a45f77cb1a7859c62f94a2a4b7825981f96c82\",\"description\":\"返回指定id的区块\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"block.hash\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-26T14:13:59.256Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.257Z",
      "signature" : "MEYCIQDo5Z+frAbMhXmm+4Zd+nQPcAq/e+kQkVKaAWvVCM3zswIhAI8QKdCFw76BxufeP2pgUtGJIaJ+LR6m50ANE4gxc/KQ"
    }
  }, {
    "id" : "4ee65bb0-d41a-4958-9fee-bcd6434046aa",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"a277d109a69401c79af2c3adb985d62d16c193380d6afc8f256d80edbcabfac0\",\"description\":\"返回指定高度的区块\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"block.blockHeight\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-26T14:13:59.264Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.265Z",
      "signature" : "MEUCIDFaNkt2ZXKtHuJHpwROg6BJvXnXyC2EdExuyxqwYzSGAiEAtgd/qf9tsl9BiIIV3p5okaA/45kwzI+4/KFurFxG0rE="
    }
  }, {
    "id" : "35313ba5-8292-4649-aee5-d1fd3d5cc400",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"a74a6de7ab02ab6ec0a8c98d964abb1cfc343784c00fde91c53f6272661645df\",\"description\":\"返回指定高度区块包含的交易数\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"block.getTransNumberOfBlock\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-26T14:13:59.272Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.273Z",
      "signature" : "MEUCIQC7qzMH5qBeJ/jJQlbEIYrnkX6NzksDV6k52MYAymIJSwIgNRxYszF60Ty6TtK0vsJ4aOHKOAjKFIvXBkSbMDWjBrQ="
    }
  }, {
    "id" : "5ca768e8-e31c-4fa4-8332-c04f0c154d6a",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"da7b2965e3f93cfed897ba1fc7cb170f6ec1f06f71421de327db3dfb2fb7d669\",\"description\":\"返回指定高度的区块的出块时间\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"block.blocktime\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-26T14:13:59.278Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.279Z",
      "signature" : "MEQCID9j3SNkIn3f6sRi7ruMgrC+pfbt+0bz0BmKdqsJ7wQbAiBcPnXco7qzHDVxLn2o3nhswYKyhOsEpMOsJY0WMAXAtg=="
    }
  }, {
    "id" : "2ed62ce3-c404-4015-8dd0-1c3e8fa4970e",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"39c4cb23fbfe8dd44a245d477f20316bde260fc890439acff9a38ed2414e6c2d\",\"description\":\"返回指定交易的入块时间\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"block.blocktimeoftran\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-26T14:13:59.286Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.287Z",
      "signature" : "MEUCIEw2zFoinNM1/0F9TqLwtQW8jK7P63AAB7vICiJkzHj7AiEAzZqUnHmhSkPmixC+SAZYA8okSUMxURyoc6+d00gvRwI="
    }
  }, {
    "id" : "2e0766b6-6996-48f6-8ee3-5af918385fc9",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"077bd0f9595d36b5b01787f9e33ac3b0ca87ef3596075a739bdbdecb69299670\",\"description\":\"返回指定高度的区块字节流\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"block.stream\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-26T14:13:59.295Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.297Z",
      "signature" : "MEUCIQDLJIoLdG7WkU96GH0fxEEyyeGCaDq/qKC6ksTredN84AIgBojnnK9GbeKwA6NTaWla41NOOzr5thbGL6sPYi8Vbmw="
    }
  }, {
    "id" : "5791ea6b-04c8-4ec6-8e65-ddb026324927",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"ce922519a3c3ecaf9b0986c2449c7680895c15f4b0e9818e994e14a4d28b6aaf\",\"description\":\"返回指定id的交易\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-26T14:13:59.303Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.304Z",
      "signature" : "MEQCICSJh7Uf7u7TMRQ8+vNqGCLAoXgg/N4KJ+/doTV38zhqAiBLHJyevFrnEUpErMcdtzhwBy4FlKIz1nOKJ87YJjk+TA=="
    }
  }, {
    "id" : "9275d03b-1530-49ea-824f-9545765a589a",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"4b24c7d54882e6e371f7c211f7d8b10c438073e8ddfa97ba09c660ecbf66d813\",\"description\":\"返回指定id的交易字节流\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.stream\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-26T14:13:59.309Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.310Z",
      "signature" : "MEQCICfrsQQfsQnuz2YkP2IUlk8ouIyCmaXJ4d/pyT0vDDDJAiB1iiwP3Jt6orM40yFjb7tzPhZH45VmfkfA6OkFvLyX1Q=="
    }
  }, {
    "id" : "c305f700-d8bf-4b09-b3a5-7efc33b124cc",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"118beab27e3f3054f6a898642a69cbdf159754c688b04f2f181878f567f8b88c\",\"description\":\"提交带签名的交易\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.postTranByString\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-26T14:13:59.316Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.317Z",
      "signature" : "MEQCIGHI2u275UQUd0ZpUYhMMQO4wIMx782E5kn6dRtkaiYSAiA0YINEVpC0R8kbo6z32tDNnjWINK/+9Kmy8xFpy6LSKg=="
    }
  }, {
    "id" : "afda320c-d415-4c3c-b4f7-e18bbc97553c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"b448bc33c662ac91896d97dfab59afcb274105d1e150ed4a73dce532188b65fe\",\"description\":\"提交带签名的交易字节流\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.postTranStream\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-26T14:13:59.323Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.324Z",
      "signature" : "MEQCIBBVnGAM8Y/FEZ/9SxAgJd6MHFJsDrU5wvhQEoghWzPVAiAGey2sijAop7ecEYWM+ItKGM+H4jfigJUO9BN1AcYh6w=="
    }
  }, {
    "id" : "d0976452-1e93-46fd-96ed-4fb298169066",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"4cc1b52b7c7723267816a45268dd4c3377228d3cd6c09006a4d0f3a181d84760\",\"description\":\"提交交易\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_SERVICE\",\"operateServiceName\":[\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"createTime\":\"2022-05-26T14:13:59.330Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.331Z",
      "signature" : "MEUCIQConhNGxTnB2WjBceoaesn1GLi2IlPs4j6C3Bky4sN98AIgKDQ+Km5oiTmiZtW/dacPkxHmWkbqeT3CL8WHryh+qKA="
    }
  }, {
    "id" : "1d129dd5-ab72-4c91-b8aa-51c80478181d",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "grantOperate",
      "args" : [ "[\"{\\\"id\\\":\\\"4553ccfe-772d-4ae7-9d89-add4d53b0159\\\",\\\"grant\\\":\\\"951002007l78123233\\\",\\\"granted\\\":[\\\"121000005l35120456\\\",\\\"12110107bi45jh675g\\\",\\\"122000002n00123567\\\",\\\"921000005k36123789\\\",\\\"921000006e0012v696\\\"],\\\"opId\\\":[\\\"7d93aeecec616f7f36e3333d0a9264366f36c563a10c978f159b034824898808\\\",\\\"122fd24a7b84f3b9f8a91c0bfd31910a655de38d040aba44f874d9bbb3e8f777\\\",\\\"345148e45a3cbd72783b453f072c08af60e7f692b0882eeb2ede98b4ff10a9dc\\\",\\\"c34b7ad979e0cddf1e0fff9140c4aebe5df4ea87dad8fa1e9fa0dd13ad3f55ee\\\",\\\"5e0e7d0eb29e2e7b55926f32d358466b25eb09ebdd320a936c16898d2752b01a\\\",\\\"7358803962fd55455211f2824c5376f342715fd358f4a24eaa06761ebf503c79\\\",\\\"6b2c5c52c74ef82365b7898d8685c2523ecf0d049648135081e2972c96f9ae18\\\",\\\"01f66ad1019321a4986e903bf6d446f7460817528bd6ecf16f48cec17c6653cb\\\",\\\"d68a87979fba2d6de2cebed5820e605597a929cb0fd23d7a3fe9302babb33c3b\\\",\\\"ccc1e3d69eedfa68f70d60ed8820a64dada2d3b2c66dda72585c4444a16f2aa1\\\",\\\"d74f17115a3c42f2de0214503fca50737a4135840f8e61c6db42d7bcd0cb7f15\\\",\\\"62528762a01b0b5cdbedc6a0d50e12ac06805d466c0f4239dedf0f855b3c75bd\\\",\\\"d3f2db1d2ab212b967b6b61c7f74dc2247c1aa1e1172066617c3c1a0caa00056\\\",\\\"b52e35d84f16d268357fc94059b965d843b2827f0654a800bfe8d15c247d0cf2\\\",\\\"38766c3ecf02276e9aee804e7b5e700127bc72e7bb22a8b66fffcf2102bb2f07\\\",\\\"527281a9a94d769b45e38d8c1ca516d3965571e895e0ab66b8d873240030bc0a\\\",\\\"08a8818c21d7afd7c31663e7e5b4f766a0e0b3278c7ccd46a362bbc7571a2072\\\",\\\"db5ade19754294f20c36a356e961820e99d9e4e29ba8179be9043a7ae44eccd7\\\",\\\"06b901074a00254571514c5f75a45f77cb1a7859c62f94a2a4b7825981f96c82\\\",\\\"a277d109a69401c79af2c3adb985d62d16c193380d6afc8f256d80edbcabfac0\\\",\\\"a74a6de7ab02ab6ec0a8c98d964abb1cfc343784c00fde91c53f6272661645df\\\",\\\"da7b2965e3f93cfed897ba1fc7cb170f6ec1f06f71421de327db3dfb2fb7d669\\\",\\\"39c4cb23fbfe8dd44a245d477f20316bde260fc890439acff9a38ed2414e6c2d\\\",\\\"077bd0f9595d36b5b01787f9e33ac3b0ca87ef3596075a739bdbdecb69299670\\\",\\\"ce922519a3c3ecaf9b0986c2449c7680895c15f4b0e9818e994e14a4d28b6aaf\\\",\\\"4b24c7d54882e6e371f7c211f7d8b10c438073e8ddfa97ba09c660ecbf66d813\\\",\\\"118beab27e3f3054f6a898642a69cbdf159754c688b04f2f181878f567f8b88c\\\",\\\"b448bc33c662ac91896d97dfab59afcb274105d1e150ed4a73dce532188b65fe\\\",\\\"4cc1b52b7c7723267816a45268dd4c3377228d3cd6c09006a4d0f3a181d84760\\\"],\\\"isTransfer\\\":\\\"TRANSFER_REPEATEDLY\\\",\\\"createTime\\\":\\\"2022-05-26T14:13:59.345Z\\\",\\\"authorizeValid\\\":true,\\\"version\\\":\\\"1.0\\\"}\"]" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.503Z",
      "signature" : "MEUCIFpQO+vRDsGFu3jvk1MEKUpkA0t89srdPBiqICZn5tKcAiEA+s+XtLbZ04wE+BgYWFkZdy89XzNX6v3rgEQV9ggq2MY="
    }
  }, {
    "id" : "bf1c06d7-69c2-4b31-80f8-34fbbdd7f32a",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "ContractAssetsTPL",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "\n/*\n * Copyright  2019 Blockchain Technology and Application Joint Lab, Linkel Technology Co., Ltd, Beijing, Fintech Research Center of ISCAS.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BA SIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage rep.sc.tpl\n\nimport org.json4s._\nimport org.json4s.jackson.JsonMethods._\nimport rep.proto.rc2.ActionResult\nimport rep.sc.scalax.IContract\nimport rep.sc.scalax.ContractContext\nimport rep.sc.scalax.ContractException\n\n/**\n  * 资产管理合约\n  */\n\nfinal case class Transfer(from: String, to: String, amount: Int)\n\nclass ContractAssetsTPL extends IContract {\n\n  // 需要跨合约读账户\n  var chaincodeName = \"\"\n  var chaincodeVersion = 0\n  //val prefix = IdTool.getCid(ChaincodeId(chaincodeName, chaincodeVersion))\n\n  implicit val formats = DefaultFormats\n\n  def init(ctx: ContractContext) {\n    chaincodeName = ctx.api.getAccountContractCodeName\n    chaincodeVersion = ctx.api.getAccountContractVersion\n    println(s\"tid: $ctx.t.id\")\n  }\n\n  def set(ctx: ContractContext, data: Map[String, Int]): ActionResult = {\n    println(s\"set data:$data\")\n    for ((k, v) <- data) {\n      ctx.api.setVal(k, v)\n    }\n    null\n  }\n\n  def transfer(ctx: ContractContext, data: Transfer): ActionResult = {\n    if (!data.from.equals(ctx.t.getSignature.getCertId.creditCode))\n      throw ContractException(\"只允许从本人账户转出\")\n    val signerKey = data.to\n    // 跨合约读账户，该处并未反序列化\n    //todo 跨合约读需要修改\n    /*if (IdTool.isDidContract) {\n      if (ctx.api.getStateEx(chaincodeName, \"signer_\" + data.to) == null)\n        throw ContractException(\"目标账户不存在\")\n    } else {\n      if (ctx.api.getStateEx(chaincodeName, data.to) == null)\n        throw ContractException(\"目标账户不存在\")\n    }*/\n    val sfrom: Any = ctx.api.getVal(data.from)\n    val dfrom = sfrom.asInstanceOf[Int]\n    if (dfrom < data.amount)\n      throw ContractException(\"余额不足\")\n    ctx.api.setVal(data.from, dfrom - data.amount)\n    val dto = ctx.api.getVal(data.to).toString.toInt\n    ctx.api.setVal(data.to, dto + data.amount)\n    null\n  }\n\n  def put_proof(ctx: ContractContext, data: Map[String, Any]): ActionResult = {\n    //先检查该hash是否已经存在,如果已存在,抛异常\n    for ((k, v) <- data) {\n      val pv0: Any = ctx.api.getVal(k)\n      if (pv0 != null)\n        throw ContractException(s\"[$k] 已存在，当前值为 [$pv0]\")\n      ctx.api.setVal(k, v)\n      print(\"putProof:\" + k + \":\" + v)\n    }\n    null\n  }\n\n  /**\n    * 根据action,找到对应的method，并将传入的json字符串parse为method需要的传入参数\n    */\n  def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\n    val json = parse(sdata)\n    action match {\n      case \"transfer\" =>\n        transfer(ctx, json.extract[Transfer])\n      case \"set\" =>\n        set(ctx, json.extract[Map[String, Int]])\n      case \"putProof\" =>\n        put_proof(ctx, json.extract[Map[String, Any]])\n    }\n  }\n\n}\n",
      "cType" : "CODE_SCALA",
      "rType" : "RUN_SERIAL",
      "sType" : "STATE_BLOCK",
      "cclassification" : "CONTRACT_SYSTEM"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-26T22:13:59.513Z",
      "signature" : "MEUCIQCM2EVgJGcYyOy2V3czQEHZyxPetZTevlXZNeGC9rcJIwIgOxhfUFWCZ61PUBYp6/cnlzFyy/FgcJbokzgpoXpSQUA="
    }
  }, {
    "id" : "4414d64c-b5bd-4260-8a37-010167cbbe78",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"97849ffa376d40bca8537f08aaa278a2a1c2bc7021a2f2db1301cf14179ba56e\",\"description\":\"转账交易\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"ContractAssetsTPL.transfer\",\"createTime\":\"2022-05-26T14:13:59.528Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-26T22:13:59.530Z",
      "signature" : "MEUCIQDYi+DMMiCJhl+pFC7mgr3wGqkC/tc81y1GpsxzhravjgIgcDuB3R9qMfWQ0eNj1Mxz0H+XMXtqtMMrvlDP08z9aVk="
    }
  }, {
    "id" : "460b037f-4d2f-4c99-adfc-efbe97431cab",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"b877825de71d915677bf1a61e48d61df0187166c3f6afa5fdae3a98058cae769\",\"description\":\"初始化账户\",\"register\":\"121000005l35120456\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"ContractAssetsTPL.set\",\"createTime\":\"2022-05-26T14:13:59.528Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-26T22:13:59.539Z",
      "signature" : "MEYCIQDszHqrQsQlM2wQx4It34RFMPi194bcG/D6E4OKXxYUoAIhALA9DVt1zKqWOT/dpjRvrTNFMxsn8TCLcrOZeDbj7eGO"
    }
  }, {
    "id" : "eb94e50b-cbfd-4165-8e48-3447fe3d8f93",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"7a183b2f5b57b0d966efd031a239170e1ed2d3209217a5f7e850fa6326233bcc\",\"description\":\"存证\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"ContractAssetsTPL.putProof\",\"createTime\":\"2022-05-26T14:13:59.528Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-26T22:13:59.547Z",
      "signature" : "MEYCIQCLNKBvV3ZbXEV8ROlq7ws8nZqSg9P4KDO2hjNYxBblwAIhAJJjB+E42iQefX5ut/F9U9oFdiqG58Zpc/gDsenVf4/E"
    }
  }, {
    "id" : "3b7cc0a0-9c50-4d06-87a0-f0ab06907a57",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractAssetsTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "set",
      "args" : [ "{\r\n  \"121000005l35120456\" : 10000000,\r\n  \"12110107bi45jh675g\" : 10000000,\r\n  \"122000002n00123567\" : 10000000,\r\n  \"921000005k36123789\" : 10000000,\r\n  \"921000006e0012v696\" : 10000000\r\n}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.554Z",
      "signature" : "MEUCIQD5nEo5Tsz78hOxmVNk7qJLtM7ad4EE8T8i0RCToYvOlQIgNG88w/VsTqcuLL0MNToCnLZcx47lgPTa86uHOtzOzY8="
    }
  }, {
    "id" : "86c72ce1-99de-4e52-bbb4-c4bc9bcbf508",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "RVerifiableCredentialTPL",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "package rep.sc.tpl.did\n\nimport org.json4s.DefaultFormats\nimport org.json4s.jackson.JsonMethods.parse\nimport rep.proto.rc2.{ActionResult, CreAttr, CreClaStruct, VerCreStatus}\nimport rep.sc.scalax.{ContractContext, ContractException, IContract}\nimport scalapb.json4s.JsonFormat\nimport rep.sc.tpl.did.DidTplPrefix._\n\n/**\n * 可验证凭据Verifiable Credential管理合约，\n * 主要提供凭据属性结构CCS管理及凭据状态VCS管理的相关合约方法，\n * 可验证凭据VC本身由相关使用方在链下传递使用，链上存储其属性结构和状态等可公开信息\n *\n * @author jayTsang created\n */\n\nclass RVerifiableCredentialTPL extends IContract{\n\n  import RVerifiableCredentialTPL._\n\n  override def init(ctx: ContractContext): Unit = {\n    println(s\"Inited the contract ${ctx.t.getCid.chaincodeName} by TX with the tid: ${ctx.t.id}\")\n  }\n\n  implicit val formats = DefaultFormats\n\n  override def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\n    val param = parse(sdata)\n\n    action match {\n      case Action.SignupCCS =>\n        SignupCCS(ctx, param.extract[SignupCCSParam])\n      case Action.UpdateCCSStatus =>\n        UpdateCCSStatus(ctx, param.extract[UpdateCCSStatusParam])\n      case Action.SignupVCStatus =>\n        SignupVCStatus(ctx, param.extract[SignupVCStatusParam])\n      case Action.UpdateVCStatus =>\n        UpdateVCStatus(ctx, param.extract[UpdateVCStatusParam])\n      case Action.RevokeVCClaims =>\n        RevokeVCClaims(ctx, param.extract[RevokeVCClaimsParam])\n      case f =>\n        throw ContractException(\n          JsonFormat.toJsonString(ActionResult(STATUS_CODE_NO_FUNCTION, s\"没有对应的合约方法:${f}\"))\n        )\n    }\n  }\n\n  /**\n   * 注册可验证凭据属性结构CCS\n   * @param ctx\n   * @param param\n   * @return\n   */\n  def SignupCCS(ctx: ContractContext, param: SignupCCSParam): ActionResult = {\n    assertSignupCCSParam(param)\n\n    val ccsStateKey = ccsPrefix + param.id\n\n    assertNewWorldstate(\n      ctx.api.getVal(ccsStateKey),\n      s\"已存在可验证凭据属性结构，CCS(id:${param.id})\"\n    )\n\n    val creator = ctx.api.getDIDURIPrefix + ctx.t.signature.get.certId.get.creditCode\n    val valid = true\n    val version = \"1.0\"\n    val ccs = CreClaStruct(\n      id = param.id,\n      name = param.name,\n      ccsVersion = param.version,\n      description = param.description,\n      creator = creator,\n      created = param.created,\n      valid = valid,\n      attributes = param.attributes.map(\n        attr => CreAttr(attr.name, attr.`type`, attr.required, attr.description)\n      ),\n      version = version\n    )\n\n    ctx.api.setVal(ccsStateKey, ccs)\n\n    ActionResult(STATUS_CODE_OK, s\"成功调用注册可验证凭据属性结构方法，CCS(id: ${ccs.id})\")\n  }\n\n  /**\n   * 更新可验证凭据属性结构CCS的有效性\n   * @param ctx\n   * @param param\n   * @return\n   */\n  def UpdateCCSStatus(ctx: ContractContext, param: UpdateCCSStatusParam): ActionResult = {\n    assertUpdateCCSStatusParam(param)\n\n    val ccsStateKey = ccsPrefix + param.id\n    val ccs = ctx.api.getVal(ccsStateKey).asInstanceOf[CreClaStruct]\n\n    assertExistedWorldstate(\n      ccs,\n      s\"没有对应的可验证凭据属性结构，CCS(id: ${param.id})\"\n    )\n    assertInvokerIsCreator(\n      ctx,\n      ccs,\n      s\"更新可验证凭据属性结构有效性方法的调用者不是相应的创建者，CCS(id: ${ccs.id})\"\n    )\n\n    ctx.api.setVal(ccsStateKey, ccs.withValid(param.valid))\n\n    ActionResult(STATUS_CODE_OK, s\"成功调用更新可验证凭据属性结构有效性方法，CCS(id: ${ccs.id})\")\n  }\n\n  /**\n   * 注册可验证凭据状态信息VCS\n   * @param ctx\n   * @param param\n   * @return\n   */\n  def SignupVCStatus(ctx: ContractContext, param: SignupVCStatusParam): ActionResult = {\n    assertSignupVCStatusParam(param)\n\n    val vcsStateKey = vcsPrefix + param.id\n\n    assertNewWorldstate(\n      ctx.api.getVal(vcsStateKey),\n      s\"已存在可验证凭据状态信息，VCS(id:${param.id})\"\n    )\n\n    val creator = ctx.api.getDIDURIPrefix + ctx.t.signature.get.certId.get.creditCode\n    val version = \"1.0\"\n    val vcs = VerCreStatus(\n      id = param.id,\n      status = param.status,\n      revokedClaimIndex = Seq(),\n      creator = creator,\n      version = version\n    )\n    ctx.api.setVal(vcsStateKey, vcs)\n\n    ActionResult(STATUS_CODE_OK, s\"成功调用注册可验证凭据状态信息方法，VCS(id: ${vcs.id})\")\n  }\n\n  /**\n   * 更新可验证凭据状态V，即更新整个可验证凭据的状态\n   * @param ctx\n   * @param param\n   * @return\n   */\n  def UpdateVCStatus(ctx: ContractContext, param: UpdateVCStatusParam): ActionResult = {\n    assertUpdateVCStatusParam(param)\n\n    val vcsStateKey = vcsPrefix + param.id\n    val vcs = ctx.api.getVal(vcsStateKey).asInstanceOf[VerCreStatus]\n\n    assertExistedWorldstate(\n      vcs,\n      s\"没有对应的可验证凭据状态，VCS(id: ${param.id})\"\n    )\n    assertInvokerIsCreator(\n      ctx,\n      vcs,\n      s\"更新可验证凭据状态方法的调用者不是相应的创建者，VCS(id: ${vcs.id})\"\n    )\n\n    ctx.api.setVal(vcsStateKey, vcs.withStatus(param.status))\n\n    ActionResult(STATUS_CODE_OK, s\"成功调用更新可验证凭据状态方法，VCS(id: ${vcs.id})\")\n  }\n\n  /**\n   * 撤销可验证凭据属性，即废除可验证凭据中部分凭据属性\n   * @param ctx\n   * @param param\n   * @return\n   */\n  def RevokeVCClaims(ctx: ContractContext, param: RevokeVCClaimsParam): ActionResult = {\n    assertRevokeVCClaimsParam(param)\n\n    val vcsStateKey = vcsPrefix + param.id\n    val vcs = ctx.api.getVal(vcsStateKey).asInstanceOf[VerCreStatus]\n\n    assertExistedWorldstate(\n      vcs,\n      s\"没有对应的可验证凭据状态，VCS(id: ${param.id})\"\n    )\n    assertInvokerIsCreator(\n      ctx,\n      vcs,\n      s\"撤销可验证凭据属性方法的调用者不是相应的创建者，VCS(id: ${vcs.id})\"\n    )\n\n    val revokedClaimIndex = vcs.revokedClaimIndex\n      .union(param.revokedClaimIndex).distinct\n    ctx.api.setVal(vcsStateKey, vcs.withRevokedClaimIndex(revokedClaimIndex))\n\n    ActionResult(STATUS_CODE_OK, s\"成功调用撤销可验证凭据属性方法，VCS(id: ${vcs.id})\")\n  }\n}\n\nobject RVerifiableCredentialTPL {\n\n  object Action {\n    // actions for verifiable credential claim struct\n    val SignupCCS = \"signupCCS\"\n    val UpdateCCSStatus = \"updateCCSStatus\"\n\n    // actions for verifiable credential/claims status\n    val SignupVCStatus = \"signupVCStatus\"\n    val UpdateVCStatus = \"updateVCStatus\"\n    val RevokeVCClaims = \"revokeVCClaims\"\n  }\n\n  final case class SignupCCSAttrParam(\n                                       name: String,\n                                       `type`: String,\n                                       required: Boolean = true,\n                                       description: String\n                                     )\n  final case class SignupCCSParam(\n                                   id: String,\n                                   name: String,\n                                   version: String, // ccsVersion\n                                   created: String,\n                                   description: String,\n                                   attributes: Seq[SignupCCSAttrParam]\n                                 )\n  final case class UpdateCCSStatusParam(id: String, valid: Boolean)\n\n  final case class SignupVCStatusParam(id: String, status: String)\n  final case class UpdateVCStatusParam(id: String, status: String)\n  final case class RevokeVCClaimsParam(id: String, revokedClaimIndex: Seq[String])\n\n  val STATUS_CODE_OK             = 500200 // 合约方法调用成功\n  val STATUS_CODE_NO_FUNCTION    = 500300 // 无对应合约方法\n  val STATUS_CODE_BAD_REQUEST    = 500400 // 合约方法参数有误\n  val STATUS_CODE_UNAUTHORIZED   = 500401 // 没有该合约方法调用权限\n  val STATUS_CODE_NOT_FOUND      = 500404 // 找不到对应合约状态资源worldstate\n  val STATUS_CODE_ALREADY_EXISTS = 500410 // 对应合约状态资源worldstate已存在\n\n  val DID_LOCATION_DELIMITER = \"#\"\n\n  def assertSignupCCSParam(param: SignupCCSParam) = {\n    assertRequiredParamStrField(\"id\", param.id)\n    assertRequiredParamStrField(\"name\", param.name)\n    assertRequiredParamStrField(\"version\", param.version)\n    assertRequiredParamStrField(\"description\", param.description)\n    assertRequiredParamStrField(\"created\", param.created)\n    assertRequiredParamSeqSignupCCSAttrField(\"attributes\", param.attributes)\n  }\n  def assertUpdateCCSStatusParam(param: UpdateCCSStatusParam) = {\n    assertRequiredParamStrField(\"id\", param.id)\n  }\n\n  def assertSignupVCStatusParam(param: SignupVCStatusParam) = {\n    assertRequiredParamStrField(\"id\", param.id)\n    assertRequiredParamStrField(\"status\", param.status)\n  }\n  def assertUpdateVCStatusParam(param: UpdateVCStatusParam) = {\n    assertRequiredParamStrField(\"id\", param.id)\n    assertRequiredParamStrField(\"status\", param.status)\n  }\n  def assertRevokeVCClaimsParam(param: RevokeVCClaimsParam) = {\n    assertRequiredParamStrField(\"id\", param.id)\n    assertRequiredParamSeqStrField(\"revokedClaimIndex\", param.revokedClaimIndex)\n  }\n\n  def assertRequiredParamStrField(fieldName: String, fieldValue: String): Null = {\n    if (fieldValue.isBlank) {\n      throw ContractException(JsonFormat.toJsonString(\n        ActionResult(STATUS_CODE_BAD_REQUEST, s\"参数字段${fieldName}不能为空字符串\")\n      ))\n    }\n    null\n  }\n  def assertRequiredParamSeqStrField(fieldName: String, fieldValue: Seq[String]): Null = {\n    if (fieldValue.length == 0) {\n      throw ContractException(\n        JsonFormat.toJsonString(\n          ActionResult(STATUS_CODE_BAD_REQUEST, s\"参数字段${fieldName}不能为空数组\")\n        )\n      )\n    }\n    null\n  }\n  def assertRequiredParamSeqSignupCCSAttrField(fieldName: String, fieldValue: Seq[SignupCCSAttrParam]): Null = {\n    if (fieldValue.length == 0) {\n      throw ContractException(\n        JsonFormat.toJsonString(\n          ActionResult(STATUS_CODE_BAD_REQUEST, s\"参数字段${fieldName}不能为空数组\")\n        )\n      )\n    }\n    fieldValue.zipWithIndex.foreach {\n      case(attr, i) => {\n        assertRequiredParamStrField(s\"${fieldName}[${i}].name\", attr.name)\n        assertRequiredParamStrField(s\"${fieldName}[${i}].type\", attr.`type`)\n        assertRequiredParamStrField(s\"${fieldName}[${i}].description\", attr.description)\n      }\n    }\n    null\n  }\n\n  /**\n   * worldstate不应已存在\n   * @param worldstate\n   * @param message\n   */\n  def assertNewWorldstate(worldstate: Any, message: String) = {\n    if(worldstate != null) {\n      throw ContractException(\n        JsonFormat.toJsonString(\n          ActionResult(STATUS_CODE_ALREADY_EXISTS, message)\n        )\n      )\n    }\n  }\n\n  /**\n   * worldstate应当已存在\n   * @param worldstate\n   * @param message\n   */\n  def assertExistedWorldstate(worldstate: Any, message: String) = {\n    if( worldstate == null) {\n      throw ContractException(\n        JsonFormat.toJsonString(ActionResult(STATUS_CODE_NOT_FOUND, message))\n      )\n    }\n  }\n\n  /**\n   * 合约方法调用者应当是worldstate的创建者\n   * @param worldstate\n   * @param message\n   */\n  def assertInvokerIsCreator(ctx: ContractContext, worldstate: Any, message: String) = {\n    var creator = \"\"\n    worldstate match {\n      case ccs: CreClaStruct => creator = ccs.creator.split(\":\").last\n      case vcs: VerCreStatus => creator = vcs.creator.split(\":\").last\n    }\n    if(creator != ctx.t.signature.get.certId.get.creditCode) {\n      throw ContractException(\n        JsonFormat.toJsonString(\n          ActionResult(\n            STATUS_CODE_UNAUTHORIZED,\n            message\n          )\n        )\n      )\n    }\n  }\n}\n",
      "cType" : "CODE_SCALA",
      "rType" : "RUN_SERIAL",
      "sType" : "STATE_BLOCK",
      "cclassification" : "CONTRACT_SYSTEM"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-26T22:13:59.565Z",
      "signature" : "MEUCIQCJqAy34w+DmWbrfn76bNinDSNrFujMSZQHneLSDjtzpgIgU/cpkvCUoaXlFP60bQpOFaeNUyrG+x0qtNCiD8NcebM="
    }
  }, {
    "id" : "4db5ab57-2f3e-4836-b737-4cf2fbdcfc6e",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"c643132be5d94b56eb21812c315b8770fb896d16d4b8592bd5413574c6eea94f\",\"description\":\"注册可验证凭据属性结构\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RVerifiableCredentialTPL.signupCCS\",\"createTime\":\"2022-05-26T14:13:59.528Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-26T22:13:59.588Z",
      "signature" : "MEQCIBtvU9Daowa73MqFyMMNPkXxeUXiJr/kzFmEMqUOJd9NAiBXIOMxI6oQsbs3w8tUhc85eCrrndRZ1t9QY57eZxfz1g=="
    }
  }, {
    "id" : "37bd5da2-ca2c-420d-aa2c-837411f7a953",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"4fdebb02299b05441c20b12c021d13bf4469271d69429f600bd03bb4bbd75583\",\"description\":\"更新可验证凭据属性结构有效状态\",\"register\":\"121000005l35120456\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RVerifiableCredentialTPL.updateCCSStatus\",\"createTime\":\"2022-05-26T14:13:59.528Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-26T22:13:59.594Z",
      "signature" : "MEQCIHxgU7Wr7BNbtU/I9HVnXwNZCMfCibtu+qEmyNCyUABTAiAWISZ5vxIQtmsVTFer7shY7w0ftMumduQ4vPlSeKo6cA=="
    }
  }, {
    "id" : "302f09db-a81e-4b96-9570-afc9becc898d",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"ce12f269b48bee1e8fc2d793b9bb89b738ce5db56fc8669e3354c462dc4af08b\",\"description\":\"注册可验证凭据状态\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RVerifiableCredentialTPL.signupVCStatus\",\"createTime\":\"2022-05-26T14:13:59.528Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-26T22:13:59.600Z",
      "signature" : "MEUCICsrwzOdEn8QXhPHBfh6drSXmdFKTAJh6iwIrd/w9OHFAiEA2cpuJ6QYq0af0Hdpli30Uc5qqlnKhj4Y/24UqQ7X4D0="
    }
  }, {
    "id" : "04c16eb5-3179-4a29-8392-4138be02bee1",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"031832c78dedc3007170d741b7fc772439eec855f85054d81cb3f93dd42d06d4\",\"description\":\"更新可验证凭据状态\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RVerifiableCredentialTPL.updateVCStatus\",\"createTime\":\"2022-05-26T14:13:59.528Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-26T22:13:59.606Z",
      "signature" : "MEUCIBTpfjglIFTcYHWlAADL5AfFJjpX93FT5HZ0ep/Jn7pLAiEA/RHywZZU3sLeBYQxrcciHZVIiRNxm/pymfyr58cmeao="
    }
  }, {
    "id" : "1bf793e7-32bb-4683-a37f-4e7eabfc978a",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"3d8ca6ebe2693af9ed9081ea49c4d15c3bab63aa773834f0db40fb2eb54b20d9\",\"description\":\"撤销可验证凭据属性状态\",\"register\":\"121000005l35120456\",\"isPublish\":true,\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"RVerifiableCredentialTPL.revokeVCClaims\",\"createTime\":\"2022-05-26T14:13:59.528Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2022-05-26T22:13:59.613Z",
      "signature" : "MEUCIQCVkWDlgeNe36E8DL/6c+HxhAQh/bDt6KTAHmrLamtEDAIgCYiyAv5Y+c4KyO8Vn60THRq+IIIZ7mafOk/HpBbNfoI="
    }
  }, {
    "id" : "3304b6ee-21c2-4ef4-8164-ab38a716a1e0",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "InterfaceCooperation",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "package rep.sc.tpl.cooper\n\nimport org.bouncycastle.util.io.pem.PemReader\nimport org.json4s.jackson.JsonMethods.parse\nimport org.json4s.jackson.Serialization.{read, writePretty}\nimport org.json4s.{DefaultFormats, MappingException}\nimport rep.crypto.BytesHex\nimport rep.proto.rc2.{ActionResult, Certificate}\nimport rep.sc.scalax.{ContractContext, ContractException, IContract}\nimport rep.sc.tpl.did.DidTplPrefix.certPrefix\nimport rep.utils.SerializeUtils\n\nimport java.io.{ByteArrayInputStream, StringReader}\nimport java.nio.charset.StandardCharsets\nimport java.security.PublicKey\nimport java.security.cert.{CertificateFactory, X509Certificate}\n\n\n/**\n  * 接口定义\n  *\n  * @param id           接口定义ID\n  * @param `type`       接口定义的类型，1：grpc，2：wsdl\n  * @param version      接口定义版本号\n  * @param name         接口名\n  * @param algo_hash    生成内容 Hash 采用的算法\n  * @param algo_sign    对内容 Hash 的生成签名的算法\n  * @param para         参数数据结构定义\n  * @param serv         接口服务定义，包括初始接口请求、中间接口请求、结束接口请求三者的方法及参数定义\n  * @param serv_doc     接口服务说明\n  * @param callBack     应答接收定义，包括初始接口应答、中间接口应答、结束接口应答三者的方法及参数定义\n  * @param callback_doc 应答接收说明\n  */\nfinal case class ApiDefinition(id: String, `type`: String, version: String, name: String, algo_hash: String, algo_sign: String, para: Option[String],\n                               serv: Option[String], serv_doc: Option[String], callBack: Option[String], callback_doc: Option[String])\n\n/**\n  * 接口服务和应答\n  *\n  * @param id      接口服务 Id 或 应答接收 Id\n  * @param name    接口服务或者应答名字\n  * @param d_id    接口服务所实现的接口定义 Id 或 应答接收所实现的接口定义 Id\n  * @param version 接口服务所实现的接口定义版本 或 应答接收所实现的接口定义版本\n  * @param e_id    提供接口服务的参与方 Id 或 提供应答接收的参与方 Id\n  * @param addr    接口服务地址 或 应答接收地址\n  * @param port    接口服务端口 或 应答接收端口\n  */\nfinal case class ApiServAndAck(id: String, name: String, d_id: String, version: String, e_id: String, addr: String, port: Int)\n\n/**\n  *\n  * @param eid        身份ID\n  * @param cert_name  证书别名\n  * @param hash       内容Hash\n  * @param timeCreate 签名时刻\n  * @param sign       数字签名\n  */\nfinal case class Signature(eid: String, cert_name: String, hash: String, timeCreate: Long, sign: String)\n\n/**\n  *\n  * @param cid        接口请求 Id\n  * @param e_from     请求方的应答接收 Id\n  * @param e_to       请求的接口服务 Id\n  * @param method     调用的方法\n  * @param b_req      请求 or 应答标志, True 代表请求; False 代表应答\n  * @param b_end      结束标志, True 代表结束（即本次请求/应答为最后一个）,False代表未结束\n  * @param seq        请求或应答的序号, 从1开始\n  * @param hash       请求/应答内容 Hash依据 b_req 和 b_end 的值，分别对应 rb、ri、re 和 cb、ci、ce 方法的请求/应答内容的按照接口定义中指定的 Hash 算法生成的 Hash\n  * @param hash_claim 选择性披露 Hash，最后一个应答后，由所有请求和应答的 Hash 按顺序拼接后取 Hash 生成\n  * @param tm_create  请求/应答建立的时间\n  * @param sign_r     接口请求方按照接口定义中指定的签名算法对内容 Hash 的签名\n  * @param sign_c     接口服务方按照接口定义中指定的签名算法对内容 Hash 的签名\n  */\nfinal case class ReqAckProof(cid: String, e_from: String, e_to: String, method: String, b_req: Boolean, b_end: Boolean, seq: Int,\n                             hash: String, hash_claim: Option[String], tm_create: Long, sign_r: Signature, sign_c: Signature)\n\n/**\n  * @author zyf\n  */\nclass InterfaceCooperation extends IContract {\n\n  // 从账户管理合约中读取账户 ID\n  val didTplName = \"RdidOperateAuthorizeTPL\"\n  // 分割横线\n  val infix = \"-\"\n  // 前缀标识\n  val apiDefPrefix = \"api-def-main\"\n  val defVersionPrefix = \"api-def-version\"\n  val defHolderPrefix = \"api-def-holder\"\n  val apiServPrefix = \"api-service-main\"\n  val ackRecPrefix = \"ack-receive-main\"\n  val servHolderPrefix = \"api-service-holder\"\n  val receHolderPrefix = \"ack-receive-holder\"\n  val reqAckRequestPrefix = \"req-ack-proof-request\"\n  val reqAckReponsePrefix = \"req-ack-proof-response\"\n\n  // Json序列化与反序列化时使用的格式\n  implicit val formats = DefaultFormats\n\n  object ACTION {\n\n    object InterfaceRegister {\n      val registerApiDefinition = \"registerApiDefinition\"\n      val registerApiService = \"registerApiService\"\n      val registerApiAckReceive = \"registerApiAckReceive\"\n    }\n\n    object InterfaceReqAckProof {\n      val reqAckProof = \"reqAckProof\"\n    }\n\n  }\n\n  override def init(ctx: ContractContext): Unit = {\n\n    println(s\"init contract, tx‘s id is ${ctx.t.id}, contract’s name is ${ctx.t.getCid.chaincodeName}, contract’s version is ${ctx.t.getCid.version}\")\n    ctx.api.getLogger.info(s\"init contract, tx‘s id is ${ctx.t.id}, contract’s name is ${ctx.t.getCid.chaincodeName}, contract’s version is ${ctx.t.getCid.version}\")\n\n  }\n\n  /**\n    * 注册接口定义\n    *\n    * @param ctx\n    * @param apiDefinition\n    * @return\n    */\n  def registerApiDefinition(ctx: ContractContext, apiDefinition: ApiDefinition): ActionResult = {\n    val txr_credit_code = ctx.t.getSignature.getCertId.creditCode\n    val def_key = apiDefPrefix + infix + txr_credit_code + infix + apiDefinition.id + infix + apiDefinition.version\n    val def_version_key = defVersionPrefix + infix + txr_credit_code + infix + apiDefinition.id + infix + apiDefinition.version\n    val def_holder_key = defVersionPrefix + infix + apiDefinition.id\n    // 判断是否是自己注册的\n    if (ctx.api.getVal(def_holder_key) == null || ctx.api.getVal(def_holder_key) == txr_credit_code) {\n      // 自己先前注册过，现在要注册的是新的版本\n      if (ctx.api.getVal(def_key) != null) {\n        ctx.api.getLogger.info(s\"接口定义方 $txr_credit_code 更新定义API ${writePretty(apiDefinition)}\")\n      }\n      // 保存apiDefinition，使用jsonString\n      ctx.api.setVal(def_key, writePretty(apiDefinition))\n      // 设置当前版本号\n      ctx.api.setVal(def_version_key, apiDefinition.version)\n      // 设置接口定义者，即该接口定义是谁来定义的，只能由此人进行更新\n      ctx.api.setVal(def_holder_key, txr_credit_code)\n      ctx.api.getLogger.info(s\"接口定义方 $txr_credit_code 定义API ${writePretty(apiDefinition)}\")\n    } else {\n      throw ContractException(s\"用户 $txr_credit_code 非注册接口定义者,不能执行更新操作\")\n    }\n    null\n  }\n\n  /**\n    * 接口服务登记，接口服务方来调用该方法\n    * 接口服务方或者代理方 发布指定接口定义的接口请求实现实例\n    *\n    * @param ctx\n    * @param apiServAndAck\n    * @return\n    */\n  def registerApiService(ctx: ContractContext, apiServAndAck: ApiServAndAck): ActionResult = {\n    val txr_credit_code = ctx.t.getSignature.getCertId.creditCode\n    val def_holder_key = defVersionPrefix + infix + apiServAndAck.d_id\n    val service_holder_key = servHolderPrefix + infix + apiServAndAck.id\n    val def_holder = ctx.api.getVal(def_holder_key)\n    if (def_holder != null) {\n      val def_key = apiDefPrefix + infix + def_holder.asInstanceOf[String] + infix + apiServAndAck.d_id + infix + apiServAndAck.version\n      // 判断接口定义(id+version)是否存在\n      if (ctx.api.getVal(def_key) != null) {\n        // 判断参与方是否被注册,且是e_id == credit_code\n        if (txr_credit_code == apiServAndAck.e_id) {\n          ctx.api.setVal(apiServPrefix + infix + apiServAndAck.e_id + infix + apiServAndAck.id, writePretty(apiServAndAck))\n          ctx.api.setVal(service_holder_key, apiServAndAck.e_id)\n          ctx.api.getLogger.info(s\"接口服务方/代理方 ${txr_credit_code} 发布接口服务登记 ${writePretty(apiServAndAck)}\")\n        } else {\n          ctx.api.getLogger.error(s\"e_id ${apiServAndAck.e_id} != credit_code $txr_credit_code\")\n          throw ContractException(s\"e_id ${apiServAndAck.e_id} != credit_code $txr_credit_code\")\n        }\n      } else {\n        ctx.api.getLogger.error(s\"id为${apiServAndAck.d_id}, 版本为${apiServAndAck.version} 的接口定义不存在\")\n        throw ContractException(s\"id为${apiServAndAck.d_id}, 版本为${apiServAndAck.version} 的接口定义不存在\")\n      }\n    } else {\n      ctx.api.getLogger.error(s\"id为${apiServAndAck.d_id} 的接口定义不存在\")\n      throw ContractException(s\"id为${apiServAndAck.d_id} 的接口定义不存在\")\n    }\n    null\n  }\n\n  /**\n    * 应答接收登记，接口请求方来调用该方法\n    * 接口请求方或者代理方发布指定接口定义的接口应答实现实例\n    *\n    * @param ctx\n    * @param apiServAndAck\n    * @return\n    */\n  def registerApiAckReceive(ctx: ContractContext, apiServAndAck: ApiServAndAck): ActionResult = {\n    val txr_credit_code = ctx.t.getSignature.getCertId.creditCode\n    val def_holder_key = defVersionPrefix + infix + apiServAndAck.d_id\n    val ack_holder_key = receHolderPrefix + infix + apiServAndAck.id\n    val def_holder = ctx.api.getVal(def_holder_key)\n    if (def_holder != null) {\n      val def_key = apiDefPrefix + infix + def_holder.asInstanceOf[String] + infix + apiServAndAck.d_id + infix + apiServAndAck.version\n      // 判断接口定义(id+version)是否存在\n      if (ctx.api.getVal(def_key) != null) {\n        // 判断参与方是否被注册,且是e_id == credit_code\n        // TODO 判断服务是否已经被注册？\n        if (txr_credit_code == apiServAndAck.e_id) {\n          ctx.api.setVal(ackRecPrefix + infix + apiServAndAck.e_id + infix + apiServAndAck.id, writePretty(apiServAndAck))\n          ctx.api.setVal(ack_holder_key, apiServAndAck.e_id)\n          ctx.api.getLogger.info(s\"接口服务方/代理方 ${txr_credit_code} 发布接口应答登记 ${writePretty(apiServAndAck)}\")\n        } else {\n          ctx.api.getLogger.error(s\"e_id ${apiServAndAck.e_id} != credit_code $txr_credit_code\")\n          throw ContractException(s\"e_id ${apiServAndAck.e_id} != credit_code $txr_credit_code\")\n        }\n      } else {\n        ctx.api.getLogger.error(s\"id为${apiServAndAck.d_id}, 版本为${apiServAndAck.version} 的接口定义不存在\")\n        throw ContractException(s\"id为${apiServAndAck.d_id}, 版本为${apiServAndAck.version} 的接口定义不存在\")\n      }\n    } else {\n      ctx.api.getLogger.error(s\"id为${apiServAndAck.d_id} 的接口定义不存在\")\n      throw ContractException(s\"id为${apiServAndAck.d_id} 的接口定义不存在\")\n    }\n    null\n  }\n\n  /**\n    * 请求存证：请求方或者代理方提交交易提交签名交易\n    * 应答存证：服务方或者代理方提交交易提交签名交易\n    *\n    * @param ctx\n    * @param reqAckProof\n    * @return\n    */\n  def reqAckProof(ctx: ContractContext, reqAckProof: ReqAckProof): ActionResult = {\n    val txr_credit_code = ctx.t.getSignature.getCertId.creditCode\n    // 应答注册者\n    val ack_holder_key = receHolderPrefix + infix + reqAckProof.e_from\n    // 服务注册者\n    val service_holder_key = servHolderPrefix + infix + reqAckProof.e_to\n    val ack_holder = ctx.api.getVal(ack_holder_key)\n    val service_holder = ctx.api.getVal(service_holder_key)\n    // 可根据是否有应答注册者或服务注册者来判断接口服务以及判断接口应答是否被登记\n    if (service_holder != null && ack_holder != null) {\n      // e_from与e_to的校验\n      // 请求方注册的应答接收\n      val ack_receive = ctx.api.getVal(ackRecPrefix + infix + ack_holder.asInstanceOf[String] + infix + reqAckProof.e_from)\n      val servAndAck_receive = read[ApiServAndAck](ack_receive.asInstanceOf[String])\n      // 服务方注册的接口服务\n      val api_service = ctx.api.getVal(apiServPrefix + infix + service_holder.asInstanceOf[String] + infix + reqAckProof.e_to)\n      val servAndAck_service = read[ApiServAndAck](api_service.asInstanceOf[String])\n      if (reqAckProof.b_req) {\n        // 交易提交者需是接口请求方，由e_from 获得 ack_receive 来判断，判断应答接收注册者是否就是交易提交者\n        if (servAndAck_receive.e_id == txr_credit_code) {\n          // 对Signature中的 e_id 进行校验\n          if (servAndAck_receive.e_id == reqAckProof.sign_r.eid && servAndAck_service.e_id == reqAckProof.sign_c.eid) {\n            // 使用 e_from 或 e_to 可以关联到登记应答接收和接口服务的参与方，并获得其绑定的证书，关联到定义，拿到签名算法\n            // 接口定义持有者\n            val def_holder_key = defVersionPrefix + infix + servAndAck_receive.d_id\n            val def_key = apiDefPrefix + infix + ctx.api.getVal(def_holder_key) + infix + servAndAck_receive.d_id + infix + servAndAck_receive.version\n            val api_def = read[ApiDefinition](ctx.api.getVal(def_key).asInstanceOf[String])\n            val sig_alg = api_def.algo_sign\n            ctx.api.getLogger.info(s\"def_key 为 $def_key, api_def 为 $api_def, sig_alg为 $sig_alg\")\n            // 验证请求方\n            val req_x509cert = getX509Cert(ctx, reqAckProof.sign_r.eid, reqAckProof.sign_r.cert_name)\n            val req_verifyRes = verify(sig_alg, BytesHex.hex2bytes(reqAckProof.sign_r.sign), reqAckProof.sign_r.hash.getBytes(StandardCharsets.UTF_8), req_x509cert.getPublicKey)\n            ctx.api.getLogger.info(s\"对请求方签名数据进行验签, credit_code 为 ${reqAckProof.sign_r.eid}, cert_name ${reqAckProof.sign_r.cert_name}, cert $req_x509cert, verify_req_res $req_verifyRes\")\n            // 验证服务方\n            val resp_x509cert = getX509Cert(ctx, reqAckProof.sign_c.eid, reqAckProof.sign_c.cert_name)\n            val resp_verifyRes = verify(sig_alg, BytesHex.hex2bytes(reqAckProof.sign_c.sign), reqAckProof.sign_c.hash.getBytes(StandardCharsets.UTF_8), resp_x509cert.getPublicKey)\n            ctx.api.getLogger.info(s\"对服务方签名数据进行验签, credit_code 为 ${reqAckProof.sign_c.eid}, cert_name ${reqAckProof.sign_c.cert_name}, cert $resp_x509cert, verify_resp_res $resp_verifyRes\")\n            if (!req_verifyRes || !resp_verifyRes) {\n              throw ContractException(s\"请求方签名验签结果为$req_verifyRes, 服务方签名验签结果为$resp_verifyRes\")\n            }\n          } else if (servAndAck_receive.e_id != reqAckProof.sign_r.eid && servAndAck_service.e_id == reqAckProof.sign_c.eid) {\n            throw ContractException(s\"sign_r e_id ${reqAckProof.sign_r.eid} 不等于接口请求方 credit_code ${servAndAck_receive.e_id}\")\n          } else if (servAndAck_receive.e_id == reqAckProof.sign_r.eid && servAndAck_service.e_id != reqAckProof.sign_c.eid) {\n            throw ContractException(s\"sign_c e_id ${reqAckProof.sign_c.eid} 不等于接口服务方 credit_code ${servAndAck_service.e_id}\")\n          } else {\n            throw ContractException(s\"sign_r e_id ${reqAckProof.sign_r.eid} 不等于接口请求方 credit_code ${servAndAck_service.e_id}, sign_c e_id ${reqAckProof.sign_c.eid} 不等于接口服务方 credit_code ${reqAckProof.sign_c.eid}\")\n          }\n          ctx.api.getLogger.info(s\"接口请求存证,请求id为${reqAckProof.cid},序号为${reqAckProof.seq},数据为${writePretty(reqAckProof)}\")\n          ctx.api.setVal(reqAckRequestPrefix + infix + reqAckProof.cid + infix + reqAckProof.seq, writePretty(reqAckProof))\n        } else {\n          ctx.api.getLogger.error(s\"接口请求方 e_id ${servAndAck_service.e_id} != credit_code $txr_credit_code\")\n          throw ContractException(s\"接口请求方 ${servAndAck_service.e_id} != credit_code $txr_credit_code\")\n        }\n      } else {\n        // 交易提交者需是接口服务方，由e_to 获得 api_service 来判断，判断应答注册者是否就是交易提交者\n        if (servAndAck_service.e_id == txr_credit_code) {\n          // 对Signature中的 e_id 进行校验\n          if (servAndAck_service.e_id == reqAckProof.sign_c.eid && servAndAck_receive.e_id == reqAckProof.sign_r.eid) {\n            // 使用 e_from 或 e_to 可以关联到登记应答接收和接口服务的参与方，并获得其绑定的证书，关联到定义，拿到签名算法\n            // 接口定义持有者\n            val def_holder_key = defVersionPrefix + infix + servAndAck_service.d_id\n            val def_key = apiDefPrefix + infix + ctx.api.getVal(def_holder_key) + infix + servAndAck_service.d_id + infix + servAndAck_service.version\n            val api_def = read[ApiDefinition](ctx.api.getVal(def_key).asInstanceOf[String])\n            val sig_alg = api_def.algo_sign\n            ctx.api.getLogger.info(s\"def_key 为 $def_key, api_def 为 $api_def, sig_alg为 $sig_alg\")\n            // 验证服务方\n            val resp_x509cert = getX509Cert(ctx, reqAckProof.sign_c.eid, reqAckProof.sign_c.cert_name)\n            val resp_verifyRes = verify(sig_alg, BytesHex.hex2bytes(reqAckProof.sign_c.sign), reqAckProof.sign_c.hash.getBytes(StandardCharsets.UTF_8), resp_x509cert.getPublicKey)\n            ctx.api.getLogger.info(s\"对服务方签名数据进行验签, credit_code 为 ${reqAckProof.sign_c.eid}, cert_name ${reqAckProof.sign_c.cert_name}, cert $resp_x509cert, verify_resp_res $resp_verifyRes\")\n            // 验证请求方\n            val req_x509cert = getX509Cert(ctx, reqAckProof.sign_r.eid, reqAckProof.sign_r.cert_name)\n            val req_verifyRes = verify(sig_alg, BytesHex.hex2bytes(reqAckProof.sign_r.sign), reqAckProof.sign_r.hash.getBytes(StandardCharsets.UTF_8), req_x509cert.getPublicKey)\n            ctx.api.getLogger.info(s\"对请求方签名数据进行验签, credit_code 为 ${reqAckProof.sign_r.eid}, cert_name ${reqAckProof.sign_r.cert_name}, cert $req_x509cert, verify_req_res $req_verifyRes\")\n            if (!resp_verifyRes || !req_verifyRes) {\n              throw ContractException(s\"请求方签名验签结果为$req_verifyRes, 服务方签名验签结果为$resp_verifyRes\")\n            }\n          } else if (servAndAck_service.e_id != reqAckProof.sign_c.eid && servAndAck_receive.e_id == reqAckProof.sign_r.eid) {\n            throw ContractException(s\"sign_c e_id ${reqAckProof.sign_c.eid} 不等于接口服务方 credit_code ${servAndAck_service.e_id}\")\n          } else if (servAndAck_service.e_id == reqAckProof.sign_c.eid && servAndAck_receive.e_id != reqAckProof.sign_r.eid) {\n            throw ContractException(s\"sign_r e_id ${reqAckProof.sign_r.eid} 不等于接口请求方 credit_code ${servAndAck_receive.e_id}\")\n          } else {\n            throw ContractException(s\"sign_r e_id ${reqAckProof.sign_r.eid} 不等于接口请求方 credit_code ${servAndAck_receive.e_id}, sign_c e_id ${reqAckProof.sign_c.eid} 不等于接口服务方 credit_code ${servAndAck_service.e_id}\")\n          }\n          ctx.api.getLogger.info(s\"接口应答存证,请求id为${reqAckProof.cid},序号为${reqAckProof.seq},数据为${writePretty(reqAckProof)}\")\n          ctx.api.setVal(reqAckReponsePrefix + infix + reqAckProof.cid + infix + reqAckProof.seq, writePretty(reqAckProof))\n        } else {\n          ctx.api.getLogger.error(s\"接口服务方 e_id ${servAndAck_receive.e_id} 不等于交易提交者 credit_code $txr_credit_code\")\n          throw ContractException(s\"接口服务方 e_id ${servAndAck_receive.e_id} 不等于交易提交者 credit_code $txr_credit_code\")\n        }\n      }\n    } else if (service_holder == null && ack_holder != null) {\n      ctx.api.getLogger.error(s\"没有接口服务id为 ${reqAckProof.e_to} 的接口服务登记\")\n      throw ContractException(s\"没有接口服务id为 ${reqAckProof.e_to} 的接口服务登记\")\n    } else if (service_holder != null && ack_holder == null) {\n      ctx.api.getLogger.error(s\"没有接口应答id为 ${reqAckProof.e_from} 的接口应答登记\")\n      throw ContractException(s\"没有接口应答id为 ${reqAckProof.e_from} 的接口应答登记\")\n    } else {\n      ctx.api.getLogger.error(s\"没有接口服务id为 ${reqAckProof.e_to} 的接口服务登记, 且没有接口应答id为 ${reqAckProof.e_from} 的接口应答登记\")\n      throw ContractException(s\"没有接口服务id为 ${reqAckProof.e_to} 的接口服务登记, 且没有接口应答id为 ${reqAckProof.e_from} 的接口应答登记\")\n    }\n    null\n  }\n\n  /**\n    * 用来验证内容签名\n    *\n    * @param alg       签名验签算法\n    * @param signature 签名数据\n    * @param message   被签名的数据\n    * @param publicKey 公钥\n    * @return\n    */\n  def verify(alg: String, signature: Array[Byte], message: Array[Byte], publicKey: PublicKey): Boolean = {\n    if (publicKey == null) throw ContractException(\"验证签名时公钥为空！\")\n    if (signature == null || signature.length <= 0) throw ContractException(\"待验证的签名信息为空！\")\n    if (message == null || message.length <= 0) throw ContractException(\"待签名内容为空！\")\n    try {\n      val s2 = java.security.Signature.getInstance(alg)\n      s2.initVerify(publicKey)\n      s2.update(message)\n      s2.verify(signature)\n    } catch {\n      case ex: Exception => throw ContractException(ex.getMessage)\n    }\n  }\n\n  /**\n    * 根据证书pem字符串，构造证书，construct certificate by pemString\n    *\n    * @param ctx\n    * @param creditCode\n    * @param certName\n    * @throws Exception\n    * @return X509Certificate\n    */\n  @throws[Exception]\n  def getX509Cert(ctx: ContractContext, creditCode: String, certName: String): X509Certificate = {\n    val cert = SerializeUtils.deserialise(ctx.api.getStateEx(ctx.api.getChainNetId, didTplName, certPrefix + creditCode + \".\" + certName).asInstanceOf[Array[Byte]]).asInstanceOf[Certificate]\n    // cert.certificate 是读取pem证书文件得到的字符串\n    val stringReader = new StringReader(cert.certificate)\n    val pemReader = new PemReader(stringReader)\n    val cf = CertificateFactory.getInstance(\"X.509\")\n    val certByte = pemReader.readPemObject.getContent\n    val x509Cert = cf.generateCertificate(new ByteArrayInputStream(certByte)).asInstanceOf[X509Certificate]\n    pemReader.close()\n    stringReader.close\n    x509Cert\n  }\n\n\n  override def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\n\n    // Json序列化与反序列化时使用的格式\n    implicit val formats = DefaultFormats\n\n    val json = parse(sdata)\n\n    try {\n      action match {\n        // 接口定义及相关登记\n        case ACTION.InterfaceRegister.registerApiDefinition => registerApiDefinition(ctx, json.extract[ApiDefinition])\n        // 接口服务登记\n        case ACTION.InterfaceRegister.registerApiService => registerApiService(ctx, json.extract[ApiServAndAck])\n        // 接口应答登记\n        case ACTION.InterfaceRegister.registerApiAckReceive => registerApiAckReceive(ctx, json.extract[ApiServAndAck])\n        // 请求应答存证\n        case ACTION.InterfaceReqAckProof.reqAckProof => reqAckProof(ctx, json.extract[ReqAckProof])\n        // 未匹配到的\n        case _ => throw ContractException(\"no such method\")\n      }\n    } catch {\n      case ex: MappingException => throw ContractException(ex.getMessage)\n    }\n  }\n}\n",
      "cType" : "CODE_SCALA",
      "rType" : "RUN_SERIAL",
      "sType" : "STATE_BLOCK",
      "cclassification" : "CONTRACT_SYSTEM"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.624Z",
      "signature" : "MEYCIQDsGr0RDJKA/AVUhK2lSSffaRjSKYbGyKpbApagMZeLhQIhAJs3XjF+wtSxnR5FmyExkEAe3WNnfzS5RyMQNVBvGq1T"
    }
  }, {
    "id" : "9b574534-efae-4dd0-a298-ea7bb1c04747",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"be880a065bfcc88156380237eaadf7f0fbf64a29ccadd11afa8d800d7e971e95\",\"description\":\"注册接口定义\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"InterfaceCooperation.registerApiDefinition\",\"createTime\":\"2022-05-26T14:13:59.645Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.652Z",
      "signature" : "MEQCICF5TsT6W3H7b+FguKAosfTFwBpnV3kCCieDBZMs/4OsAiBoPkmwN8cQK8LummOIwQgwD9KfJ2uzMxJBEJLCMVUHcg=="
    }
  }, {
    "id" : "f18c1de6-e474-4d66-ab58-f4c708b9a6ee",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"bb8305ccd5eb9687f7e188ce7db59cc84fa82466717e4ab95315790388f8a213\",\"description\":\"注册接口服务\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"InterfaceCooperation.registerApiService\",\"createTime\":\"2022-05-26T14:13:59.645Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.660Z",
      "signature" : "MEUCIQC5w1kTZhcPbvI5GaLU3Qu2e7a6iOCPSOXA4gRxQoPv1gIgXKyacZzz7JBRy5S9sLggRmUk9kN+r2ZYOcuK4ZisWZ8="
    }
  }, {
    "id" : "68e1a0d7-bd08-4941-aa1c-ca65166edf4e",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"251f1f3712bc98498c766b744c67ff2bee62d4210f01c8be9a2f3965362e0542\",\"description\":\"注册接口应答\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"InterfaceCooperation.registerApiAckReceive\",\"createTime\":\"2022-05-26T14:13:59.645Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.668Z",
      "signature" : "MEUCICoMlMaI1vjGli+NYKMyF2XyVSlOubuWYxDaWli1z6PNAiEAizpMY7yIY/oSBwMQAxl5QB09YYOZ7yTheWYv06NG4kQ="
    }
  }, {
    "id" : "5259cd70-5148-4e7f-abff-f8e09c63496c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "RdidOperateAuthorizeTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "signUpOperate",
      "args" : [ "{\"opId\":\"b5d55e371656a809806f457c0a50c8da4dbb8f145408c01cc804eebc47e5f551\",\"description\":\"请求应答存证\",\"register\":\"951002007l78123233\",\"operateType\":\"OPERATE_CONTRACT\",\"operateServiceName\":[\"transaction.stream\",\"transaction.postTranByString\",\"transaction.postTranStream\",\"transaction.postTran\"],\"operateEndpoint\":\"*\",\"authFullName\":\"InterfaceCooperation.reqAckProof\",\"createTime\":\"2022-05-26T14:13:59.645Z\",\"opValid\":true,\"version\":\"1.0\"}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2022-05-26T22:13:59.677Z",
      "signature" : "MEUCIQC2NiZxVIc9pmHGsP+1e1wUsiP8kpFu4ghOQQ271JcJYQIgLI/8IDpNWsZUvNmDQZ1WK9g2MarbntCwvOhnBp9niNE="
    }
  } ]
}