{
  "version" : 1,
  "height" : "1",
  "transactions" : [ {
    "id" : "87829e3b-1b8a-4cc3-949d-08151f25051e",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "/*\r\n * Copyright  2019 Blockchain Technology and Application Joint Lab, Linkel Technology Co., Ltd, Beijing, Fintech Research Center of ISCAS.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BA SIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\npackage rep.sc.tpl\r\n\r\nimport rep.protos.peer._\r\nimport org.json4s.jackson.JsonMethods._\r\n\r\nimport scala.collection.mutable.Map\r\nimport org.json4s.DefaultFormats\r\nimport rep.app.conf.SystemProfile\r\nimport rep.utils.{ IdTool, SerializeUtils }\r\nimport rep.sc.scalax.{ ContractContext, ContractException, IContract }\r\nimport rep.protos.peer.ActionResult\r\n\r\n/**\r\n * @author zyf\r\n */\r\nfinal case class CertStatus(credit_code: String, name: String, status: Boolean)\r\nfinal case class CertInfo(credit_code: String, name: String, cert: Certificate)\r\nclass ContractCert extends IContract {\r\n  //case class CertStatus(credit_code: String, name: String, status: Boolean)\r\n  //case class CertInfo(credit_code: String, name: String, cert: Certificate)\r\n  \r\n  implicit val formats = DefaultFormats\r\n\r\n  val notNodeCert = \"非管理员操作\"\r\n  val signerExists = \"账户已存在\"\r\n  val signerNotExists = \"账户不存在\"\r\n  val certExists = \"证书已存在\"\r\n  val certNotExists = \"证书不存在\"\r\n  val unknownError = \"未知错误\"\r\n  val chaincodeName = SystemProfile.getAccountChaincodeName\r\n  val chaincodeVersion = SystemProfile.getAccountChaincodeVersion\r\n  //val prefix = IdTool.getCid(ChaincodeId(chaincodeName, chaincodeVersion))\r\n  val underline = \"_\"\r\n  val dot = \".\"\r\n  // 锚点，错误回退\r\n  var anchor: Map[String, Any] = Map()\r\n\r\n  object ACTION {\r\n    val SignUpSigner = \"SignUpSigner\"\r\n    val SignUpCert = \"SignUpCert\"\r\n    val UpdateCertStatus = \"UpdateCertStatus\"\r\n    val UpdateSigner = \"UpdateSigner\"\r\n  }\r\n\r\n  /**\r\n   * 注册Signer账户\r\n   * @param ctx\r\n   * @param data\r\n   * @return\r\n   */\r\n  def signUpSigner(ctx: ContractContext, data: Signer): ActionResult = {\r\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\r\n    if (!isNodeCert) {\r\n      throw ContractException(notNodeCert)\r\n    }\r\n    // 存Signer账户\r\n    //val signerKey = prefix + underline + data.creditCode\r\n    val signer = ctx.api.getState(data.creditCode)\r\n    // 如果是null，表示已注销，如果不是null，则判断是否有值\r\n    if (signer == null) {\r\n      ctx.api.setVal(data.creditCode, data)\r\n      null\r\n    } else {\r\n      throw ContractException(signerExists)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注册用户证书：1、将name加到账户中；2、将Certificate保存\r\n   * @param ctx\r\n   * @param data\r\n   * @return\r\n   */\r\n  def signUpCert(ctx: ContractContext, data: CertInfo): ActionResult = {\r\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\r\n    if (!isNodeCert) {\r\n      throw ContractException(notNodeCert)\r\n    }\r\n    val certKey = data.credit_code + dot + data.name\r\n    val certInfo = ctx.api.getState(certKey)\r\n    val signerKey = data.credit_code\r\n    val signerContent = ctx.api.getState(signerKey)\r\n    // 先判断证书，若证书不存在，则向账户添加name\r\n    if (certInfo == null) {\r\n      if (signerContent == null) {\r\n        throw ContractException(signerNotExists)\r\n      } else {\r\n        ctx.api.setVal(certKey, data.cert)\r\n        val signer = SerializeUtils.deserialise(signerContent).asInstanceOf[Signer]\r\n        if (!signer.certNames.contains(data.name)) {\r\n          val signerNew = signer.addCertNames(data.name)\r\n          ctx.api.setVal(signerKey, signerNew)\r\n        }\r\n      }\r\n      null\r\n    } else {\r\n      throw ContractException(certExists)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 用户证书禁用、启用\r\n   * @param ctx\r\n   * @param data\r\n   * @return\r\n   */\r\n  def updateCertStatus(ctx: ContractContext, data: CertStatus): ActionResult = {\r\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\r\n    if (!isNodeCert) {\r\n      throw ContractException(notNodeCert)\r\n    }\r\n    val certKey = data.credit_code + dot + data.name\r\n    val certInfo = ctx.api.getState(certKey)\r\n    if (certInfo == null) {\r\n      throw ContractException(certNotExists)\r\n    } else {\r\n      val cert = SerializeUtils.deserialise(certInfo).asInstanceOf[Certificate]\r\n      val certNew = cert.withCertValid(data.status)\r\n      ctx.api.setVal(certKey, certNew)\r\n      null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新账户相关信息\r\n   * @param ctx\r\n   * @param data\r\n   * @return\r\n   */\r\n  def updateSigner(ctx: ContractContext, data: Signer): ActionResult = {\r\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\r\n    if (!isNodeCert) {\r\n      throw ContractException(notNodeCert)\r\n    }\r\n    val signer = ctx.api.getState(data.creditCode)\r\n    // 如果是null，账户不存在，不存在则不能更新\r\n    if (signer == null) {\r\n      throw ContractException(signerNotExists)\r\n    } else {\r\n      ctx.api.setVal(data.creditCode, data)\r\n      null\r\n    }\r\n  }\r\n\r\n  \r\n  override def init(ctx: ContractContext) {\r\n    println(s\"tid: $ctx.t.id\")\r\n  }\r\n\r\n  /**\r\n   * 合约方法入口\r\n   */\r\n  override def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\r\n    val json = parse(sdata)\r\n\r\n    action match {\r\n      case ACTION.SignUpSigner =>\r\n        println(\"SignUpSigner\")\r\n        signUpSigner(ctx, json.extract[Signer])\r\n      case ACTION.SignUpCert =>\r\n        println(\"SignUpCert\")\r\n        signUpCert(ctx, json.extract[CertInfo])\r\n      case ACTION.UpdateCertStatus =>\r\n        println(\"UpdateCertStatus\")\r\n        updateCertStatus(ctx, json.extract[CertStatus])\r\n      case ACTION.UpdateSigner =>\r\n        println(\"UpdateSigner\")\r\n        updateSigner(ctx, json.extract[Signer])\r\n    }\r\n  }\r\n\r\n}",
      "ctype" : "CODE_SCALA"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "257091603041653856",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-08-21T17:01:39.190Z",
      "signature" : "MEUCIQDP5qXQPGSeQpwCt6VKkjtuc/RMg7lfcgtjqg/wdZZQjwIgSYF+bvoUJS06PlFQaGyCaL5sHGoS6bAGczlkKd0S088="
    }
  }, {
    "id" : "2f3e3c37-0be9-4c04-847f-837c1e72d338",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node1\",\"creditCode\":\"215159697776981712\",\"mobile\":\"18912345678\",\"certNames\":[\"node1\"]}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "257091603041653856",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-08-21T17:01:39.727Z",
      "signature" : "MEYCIQDvNHa4aQVyJ4yH0bGJHEj86/YktXKhLtX/r5Cm+3emVwIhALGUqsDu2nVD9wwdxJ/weWM+/5oOQ0cCYQxClEYGTy8U"
    }
  }, {
    "id" : "81ec0f20-0984-4974-9021-baf69bca1309",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node2\",\"creditCode\":\"904703631549900672\",\"mobile\":\"18912345678\",\"certNames\":[\"node2\"]}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "257091603041653856",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-08-21T17:01:39.751Z",
      "signature" : "MEYCIQDcgbh9BXSVAJltROJnowngVC4St4rZxVfPlJmhqUdL/wIhAKHOHd8fxQ14e/icgygFHccNVMPqxHPqCdj7gk5Y/8IY"
    }
  }, {
    "id" : "8e1c4b9d-0467-427c-8aa2-59985183b655",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node3\",\"creditCode\":\"989038588418990208\",\"mobile\":\"18912345678\",\"certNames\":[\"node3\"]}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "257091603041653856",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-08-21T17:01:39.770Z",
      "signature" : "MEYCIQD1MXasDfI58eYZJH5lvqCgYWRVgskfoq2ioKG9fzY/wwIhAPwEECl7rY1n/4E/Y4niwk3Sq3mGp+D2YAHnILDTa3ks"
    }
  }, {
    "id" : "bf42056a-2e96-47fe-8b7c-54a32ffb413a",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node4\",\"creditCode\":\"645377164372772928\",\"mobile\":\"18912345678\",\"certNames\":[\"node4\"]}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "257091603041653856",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-08-21T17:01:39.793Z",
      "signature" : "MEQCIA9ufkPgWr3irsrJTdT14K/FwcJKt20eqmO+PS/fP1WgAiBg/fnjpzlJiBYUV4nlrJLwVMUKjHQ/GpmVZ2OXpBdkyg=="
    }
  }, {
    "id" : "57bc00a2-ac24-4080-89b5-476abe46ff5e",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node5\",\"creditCode\":\"379552050023903168\",\"mobile\":\"18912345678\",\"certNames\":[\"node5\"]}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "257091603041653856",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-08-21T17:01:39.813Z",
      "signature" : "MEYCIQD9EabM96mj6nHRt8HZxh+dFUI/k6ahXmIyikvW2mA2VgIhAM9yDoDC380GTzJaEUDLfm/SqVRHzj9yQFeEopOC9rfS"
    }
  }, {
    "id" : "56903c4a-1f84-42ec-ae60-1497b3839ef7",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"super_admin\",\"creditCode\":\"257091603041653856\",\"mobile\":\"18912345678\",\"certNames\":[\"super_admin\"]}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "257091603041653856",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-08-21T17:01:39.830Z",
      "signature" : "MEUCIQCkKKGhFcFrFLpgAy8ySW4vybv5klIpEC+SaZ7Xk/3IogIgPN7Jekyl3HrkuvyweKpaB21TYUb0ee8Sf7DdSBbhRGM="
    }
  }, {
    "id" : "55a1dd11-d3f8-4cf7-ac06-ec67e172d783",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"215159697776981712\",\"name\":\"node1\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIICEjCCAbagAwIBAgIGAWyyKEVUMAwGCCqBHM9VAYN1BQAwdDELMAkGA1UEBhMC\\r\\nQ04xGTAXBgNVBAoeEABSAGUAcABDAGgAYQBpAG4xDzANBgNVBAseBgBTAEQAUjE5\\r\\nMDcGA1UEAx4wADIAMQA1ADEANQA5ADYAOQA3ADcANwA2ADkAOAAxADcAMQAyAC4A\\r\\nbgBvAGQAZQAxMCIYDzIwMTExMjMxMTYwMDAwWhgPMjAyMTEyMzExNjAwMDBaMHQx\\r\\nCzAJBgNVBAYTAkNOMRkwFwYDVQQKHhAAUgBlAHAAQwBoAGEAaQBuMQ8wDQYDVQQL\\r\\nHgYAUwBEAFIxOTA3BgNVBAMeMAAyADEANQAxADUAOQA2ADkANwA3ADcANgA5ADgA\\r\\nMQA3ADEAMgAuAG4AbwBkAGUAMTBZMBMGByqGSM49AgEGCCqBHM9VAYItA0IABJr9\\r\\n7SnDEsJk46bYsh9P4smxabU7I6rJcWMPEL909MLnXGsCG02gYjp1jZgCYmIaQkyF\\r\\n3pmfJQEthwZ9M2X0YLujLjAsMAsGA1UdDwQEAwIAwDAdBgNVHSUEFjAUBggrBgEF\\r\\nBQcDAQYIKwYBBQUHAwIwDAYIKoEcz1UBg3UFAANIADBFAiALobzTI768h7+iSpDN\\r\\nbfg+kkuZ3S4mCxlh3K/77aMktgIhAK4wzwfLEhi+wX/tGvkPR17hybi4aGByiT/C\\r\\nOMp6Hkit\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SM3withSM2\",\"certValid\":true,\"regTime\":{\"seconds\":1566378099,\"nanos\":848000000}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "257091603041653856",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-08-21T17:01:39.904Z",
      "signature" : "MEQCIAWasmXGnd0sL3dSHc6f9wH+qtuIEjWIfbq0b2o6UjlQAiB6VEOEFfWsfZW/DjK6TYLyBSI6H0dlndxsmM/dFNP4BA=="
    }
  }, {
    "id" : "4cfe071e-0776-4f31-bc27-fb88c79d6081",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"904703631549900672\",\"name\":\"node2\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIICEjCCAbagAwIBAgIGAWyyKEkIMAwGCCqBHM9VAYN1BQAwdDELMAkGA1UEBhMC\\r\\nQ04xGTAXBgNVBAoeEABSAGUAcABDAGgAYQBpAG4xDzANBgNVBAseBgBTAEQAUjE5\\r\\nMDcGA1UEAx4wADkAMAA0ADcAMAAzADYAMwAxADUANAA5ADkAMAAwADYANwAyAC4A\\r\\nbgBvAGQAZQAyMCIYDzIwMTExMjMxMTYwMDAwWhgPMjAyMTEyMzExNjAwMDBaMHQx\\r\\nCzAJBgNVBAYTAkNOMRkwFwYDVQQKHhAAUgBlAHAAQwBoAGEAaQBuMQ8wDQYDVQQL\\r\\nHgYAUwBEAFIxOTA3BgNVBAMeMAA5ADAANAA3ADAAMwA2ADMAMQA1ADQAOQA5ADAA\\r\\nMAA2ADcAMgAuAG4AbwBkAGUAMjBZMBMGByqGSM49AgEGCCqBHM9VAYItA0IABIRp\\r\\nr3hOd1RgGqAwxxch3830dQStesVZOSYfSm+5oZk3twC4xEFMBsHswxLaHWBOAbUG\\r\\nUHh668N1in48wucUi2ijLjAsMAsGA1UdDwQEAwIAwDAdBgNVHSUEFjAUBggrBgEF\\r\\nBQcDAQYIKwYBBQUHAwIwDAYIKoEcz1UBg3UFAANIADBFAiBATr4I/QkDDAvzVSHJ\\r\\nIK2sRXm9DOd6j5d46rHQB5ffawIhAJQCLu1/TM0rpWBs52PGbh3IRAEJ2d9VASNS\\r\\nBFNTWtG/\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SM3withSM2\",\"certValid\":true,\"regTime\":{\"seconds\":1566378099,\"nanos\":931000000}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "257091603041653856",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-08-21T17:01:39.933Z",
      "signature" : "MEUCIHpjdrEsa55Fxn/t+SkJ4PhvLIhCfPihgZ4ffEdYQGFGAiEAmgvyP8oO/vge1GfhRuFLRbDU1JWANbCMYEB9V+/c3m4="
    }
  }, {
    "id" : "997a071c-a615-414d-a5f5-0681b070b281",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"989038588418990208\",\"name\":\"node3\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIICEjCCAbagAwIBAgIGAWyyKElLMAwGCCqBHM9VAYN1BQAwdDELMAkGA1UEBhMC\\r\\nQ04xGTAXBgNVBAoeEABSAGUAcABDAGgAYQBpAG4xDzANBgNVBAseBgBTAEQAUjE5\\r\\nMDcGA1UEAx4wADkAOAA5ADAAMwA4ADUAOAA4ADQAMQA4ADkAOQAwADIAMAA4AC4A\\r\\nbgBvAGQAZQAzMCIYDzIwMTExMjMxMTYwMDAwWhgPMjAyMTEyMzExNjAwMDBaMHQx\\r\\nCzAJBgNVBAYTAkNOMRkwFwYDVQQKHhAAUgBlAHAAQwBoAGEAaQBuMQ8wDQYDVQQL\\r\\nHgYAUwBEAFIxOTA3BgNVBAMeMAA5ADgAOQAwADMAOAA1ADgAOAA0ADEAOAA5ADkA\\r\\nMAAyADAAOAAuAG4AbwBkAGUAMzBZMBMGByqGSM49AgEGCCqBHM9VAYItA0IABOsu\\r\\nduOHBqM2HY5GkCn5Gmo0JH+T0Qfnfmd1bxEY/K3AS0vC2TTCJE9FvzwqHJEf/jO6\\r\\njoWRJGFgs56n0pCG3TejLjAsMAsGA1UdDwQEAwIAwDAdBgNVHSUEFjAUBggrBgEF\\r\\nBQcDAQYIKwYBBQUHAwIwDAYIKoEcz1UBg3UFAANIADBFAiEAvWo0B6047iHdKBaX\\r\\nU8bk7RkS39m8V8SLYeFNn3s7/20CIAcXWYE9id6rzz9TlUbJxckhpMyi6rO1ljW2\\r\\nca3nMsRg\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SM3withSM2\",\"certValid\":true,\"regTime\":{\"seconds\":1566378099,\"nanos\":948000000}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "257091603041653856",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-08-21T17:01:39.950Z",
      "signature" : "MEYCIQDBKgd//R1HHnm9wUwCyp6gG2ienoeTg/CuTXDv1ka9VQIhAMw6cAAsgFT/zbzb2WykXn/FqxghaLsibw3iepz/UVlD"
    }
  }, {
    "id" : "8d7e47be-c04f-478a-9908-fe1882f7d075",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"645377164372772928\",\"name\":\"node4\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIICEjCCAbagAwIBAgIGAWyyKEmFMAwGCCqBHM9VAYN1BQAwdDELMAkGA1UEBhMC\\r\\nQ04xGTAXBgNVBAoeEABSAGUAcABDAGgAYQBpAG4xDzANBgNVBAseBgBTAEQAUjE5\\r\\nMDcGA1UEAx4wADYANAA1ADMANwA3ADEANgA0ADMANwAyADcANwAyADkAMgA4AC4A\\r\\nbgBvAGQAZQA0MCIYDzIwMTExMjMxMTYwMDAwWhgPMjAyMTEyMzExNjAwMDBaMHQx\\r\\nCzAJBgNVBAYTAkNOMRkwFwYDVQQKHhAAUgBlAHAAQwBoAGEAaQBuMQ8wDQYDVQQL\\r\\nHgYAUwBEAFIxOTA3BgNVBAMeMAA2ADQANQAzADcANwAxADYANAAzADcAMgA3ADcA\\r\\nMgA5ADIAOAAuAG4AbwBkAGUANDBZMBMGByqGSM49AgEGCCqBHM9VAYItA0IABIxB\\r\\nX9xUyeB09lRNzcVpeCJbk9KKde8o3r25prbwXzW9EvOfglf720PNXCJYqO2y7rsZ\\r\\nZ92rpzq/Uxazt30mcHajLjAsMAsGA1UdDwQEAwIAwDAdBgNVHSUEFjAUBggrBgEF\\r\\nBQcDAQYIKwYBBQUHAwIwDAYIKoEcz1UBg3UFAANIADBFAiEAtunTsMTWkBCsc+uE\\r\\nI1iwFwb9ABd3Z36G67hNTRj3JVgCIESQbzMjjwzkaKhxilAhi3/DBfxnuVrSQu/p\\r\\nh/rBB+Vw\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SM3withSM2\",\"certValid\":true,\"regTime\":{\"seconds\":1566378099,\"nanos\":968000000}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "257091603041653856",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-08-21T17:01:39.969Z",
      "signature" : "MEUCIQCxDSVCPqaZnoHtYOf66qXqgI3nXxMB7Wb2TkkHBZmc+QIgQsKyNkKQKZJPqD3Rzmcx27XCQdKKwijYMGJjvgdSihs="
    }
  }, {
    "id" : "8fd15397-5544-4e84-9447-ff4f96544092",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"379552050023903168\",\"name\":\"node5\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIICEzCCAbagAwIBAgIGAWyyKEm0MAwGCCqBHM9VAYN1BQAwdDELMAkGA1UEBhMC\\r\\nQ04xGTAXBgNVBAoeEABSAGUAcABDAGgAYQBpAG4xDzANBgNVBAseBgBTAEQAUjE5\\r\\nMDcGA1UEAx4wADMANwA5ADUANQAyADAANQAwADAAMgAzADkAMAAzADEANgA4AC4A\\r\\nbgBvAGQAZQA1MCIYDzIwMTExMjMxMTYwMDAwWhgPMjAyMTEyMzExNjAwMDBaMHQx\\r\\nCzAJBgNVBAYTAkNOMRkwFwYDVQQKHhAAUgBlAHAAQwBoAGEAaQBuMQ8wDQYDVQQL\\r\\nHgYAUwBEAFIxOTA3BgNVBAMeMAAzADcAOQA1ADUAMgAwADUAMAAwADIAMwA5ADAA\\r\\nMwAxADYAOAAuAG4AbwBkAGUANTBZMBMGByqGSM49AgEGCCqBHM9VAYItA0IABOW/\\r\\nwG96y+/mahILa1P/buDlMaGtsddmVDZJku0k6FCCYn6Ny14MSrp0UneSuYF1cNvo\\r\\nPGBvb69NM243qN2gdTmjLjAsMAsGA1UdDwQEAwIAwDAdBgNVHSUEFjAUBggrBgEF\\r\\nBQcDAQYIKwYBBQUHAwIwDAYIKoEcz1UBg3UFAANJADBGAiEAgziKjXGiU4e58AXA\\r\\nre3ZiPP8kNFak1u8rRn0T8HOyloCIQDZGGBe/NRdGZuMGWT86ShQ/F6AHS+pSE1E\\r\\n9apowWJduA==\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SM3withSM2\",\"certValid\":true,\"regTime\":{\"seconds\":1566378099,\"nanos\":986000000}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "257091603041653856",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-08-21T17:01:39.988Z",
      "signature" : "MEUCIFuigm4APDq0q7u7Eb18nrMOwNyw9dUPUicpe7Y81kRSAiEAuTfkV5xVdDJQBv9l9TCVeuQGcHmhC9ekBIoDhgqk8hQ="
    }
  }, {
    "id" : "a96a7713-2a34-47e8-82f5-9c66768496d6",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"257091603041653856\",\"name\":\"super_admin\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIICLDCCAdCgAwIBAgIGAWyyKEnjMAwGCCqBHM9VAYN1BQAwgYAxCzAJBgNVBAYT\\r\\nAkNOMRkwFwYDVQQKHhAAUgBlAHAAQwBoAGEAaQBuMQ8wDQYDVQQLHgYAUwBEAFIx\\r\\nRTBDBgNVBAMePAAyADUANwAwADkAMQA2ADAAMwAwADQAMQA2ADUAMwA4ADUANgAu\\r\\nAHMAdQBwAGUAcgBfAGEAZABtAGkAbjAiGA8yMDExMTIzMTE2MDAwMFoYDzIwMjEx\\r\\nMjMxMTYwMDAwWjCBgDELMAkGA1UEBhMCQ04xGTAXBgNVBAoeEABSAGUAcABDAGgA\\r\\nYQBpAG4xDzANBgNVBAseBgBTAEQAUjFFMEMGA1UEAx48ADIANQA3ADAAOQAxADYA\\r\\nMAAzADAANAAxADYANQAzADgANQA2AC4AcwB1AHAAZQByAF8AYQBkAG0AaQBuMFkw\\r\\nEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAEiq4EK8AdLut90Y2TdMTZEztqjASKwPi2\\r\\nHbrEsP3yeJdxMHqv+9fEiMcmVx53v/1zHV8BA0DW8uzUFltaIivcHKMuMCwwCwYD\\r\\nVR0PBAQDAgDAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBggqgRzP\\r\\nVQGDdQUAA0gAMEUCIEG3eSNYNcljUNFv4Q4sQrnZp5otA8Dq2I2xalC9uE/HAiEA\\r\\n4YUveuEbr7b0vaUPCXj37NLHXXXDZjmIUlxBHMZNkj0=\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SM3withSM2\",\"certValid\":true,\"regTime\":{\"seconds\":1566378100,\"nanos\":9000000}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "257091603041653856",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-08-21T17:01:40.010Z",
      "signature" : "MEUCID/jIR/uyBog4haoJ4VQgFx+x2JiJSf7JSdWYcH7mZemAiEA7OTETPeDm078T/ayAqgLCIWSl9REn2yaNblqwDBKvl0="
    }
  }, {
    "id" : "30462be1-173b-4ecd-acdc-a8e481c5c072",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "ContractAssetsTPL",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "\r\n/*\r\n * Copyright  2019 Blockchain Technology and Application Joint Lab, Linkel Technology Co., Ltd, Beijing, Fintech Research Center of ISCAS.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BA SIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\npackage rep.sc.tpl\r\n\r\nimport org.json4s._\r\nimport org.json4s.jackson.JsonMethods._\r\nimport rep.app.conf.SystemProfile\r\nimport rep.protos.peer.ChaincodeId\r\nimport rep.utils.IdTool\r\nimport rep.sc.scalax.IContract\r\n\r\nimport rep.sc.scalax.ContractContext\r\nimport rep.sc.scalax.ContractException\r\nimport rep.protos.peer.ActionResult\r\n\r\n/**\r\n * 资产管理合约\r\n */\r\n\r\nfinal case class Transfer(from:String, to:String, amount:Int)\r\n\r\nclass ContractAssetsTPL extends IContract{\r\n\r\n  // 需要跨合约读账户\r\n  val chaincodeName = SystemProfile.getAccountChaincodeName\r\n  val chaincodeVersion = SystemProfile.getAccountChaincodeVersion \r\n  //val prefix = IdTool.getCid(ChaincodeId(chaincodeName, chaincodeVersion))\r\n\r\n  implicit val formats = DefaultFormats\r\n  \r\n    def init(ctx: ContractContext){      \r\n      println(s\"tid: $ctx.t.id\")\r\n    }\r\n    \r\n    def set(ctx: ContractContext, data:Map[String,Int]) :ActionResult={\r\n      println(s\"set data:$data\")\r\n      for((k,v)<-data){\r\n        ctx.api.setVal(k, v)\r\n      }\r\n      null\r\n    }\r\n    \r\n    def transfer(ctx: ContractContext, data:Transfer) :ActionResult={\r\n      if(!data.from.equals(ctx.t.getSignature.getCertId.creditCode))\r\n        throw ContractException(\"只允许从本人账户转出\")      \r\n      val signerKey =  data.to\r\n      // 跨合约读账户，该处并未反序列化\r\n      if(ctx.api.getStateEx(chaincodeName,data.to)==null)\r\n        throw ContractException(\"目标账户不存在\")\r\n      val sfrom:Any =  ctx.api.getVal(data.from)\r\n      var dfrom =sfrom.asInstanceOf[Int]\r\n      if(dfrom < data.amount)\r\n        throw ContractException(\"余额不足\")\r\n      ctx.api.setVal(data.from,dfrom - data.amount)\r\n      var dto = ctx.api.getVal(data.to).toString.toInt\r\n      ctx.api.setVal(data.to,dto + data.amount)\r\n       null\r\n    }\r\n\r\n    def put_proof(ctx: ContractContext, data:Map[String,Any]): ActionResult={\r\n    //先检查该hash是否已经存在,如果已存在,抛异常\r\n    for((k,v)<-data){\r\n      var pv0:Any = ctx.api.getVal(k)\r\n      if(pv0 != null)\r\n//        throw new Exception(\"[\"+k+\"]已存在，当前值[\"+pv0+\"]\");\r\n        throw ContractException(s\"$k 已存在，当前值为 $pv0\")\r\n      ctx.api.setVal(k,v)\r\n      print(\"putProof:\"+k+\":\"+v)\r\n    }\r\n      null\r\n  }\r\n\r\n  /**\r\n     * 根据action,找到对应的method，并将传入的json字符串parse为method需要的传入参数\r\n     */\r\n    def onAction(ctx: ContractContext,action:String, sdata:String ):ActionResult={\r\n      val json = parse(sdata)      \r\n      action match {\r\n        case \"transfer\" => \r\n          transfer(ctx,json.extract[Transfer])\r\n        case \"set\" => \r\n          set(ctx, json.extract[Map[String,Int]])\r\n        case \"putProof\" =>\r\n          put_proof(ctx, json.extract[Map[String,Any]])\r\n      }\r\n    }\r\n    \r\n}\r\n",
      "ctype" : "CODE_SCALA"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "215159697776981712",
        "certName" : "node1"
      },
      "tmLocal" : "2019-08-21T17:01:40.023Z",
      "signature" : "MEUCIEH9A2Utuz3elou/gBshkKycNjIYuwJGgCnVTQ7Ai7uUAiEA/ByKIib2zSu3xcJknkFuinD1yjAl27ArwIrkCvyC4/c="
    }
  }, {
    "id" : "21f311c7-5529-4397-8e37-75677ef5d004",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractAssetsTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "set",
      "args" : [ "{\r\n  \"215159697776981712\" : 10000000,\r\n  \"904703631549900672\" : 10000000,\r\n  \"989038588418990208\" : 10000000,\r\n  \"645377164372772928\" : 10000000,\r\n  \"379552050023903168\" : 10000000\r\n}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "257091603041653856",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-08-21T17:01:40.039Z",
      "signature" : "MEYCIQDa9z+cIKUc7vFh54kxpXdynRgLhM9PPzfSCjMbCaIKywIhALw7c+TWJQm3XNCirNC59BSgscYUh+xefVWU4eqHx9zg"
    }
  } ]
}