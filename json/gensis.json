{
  "version" : 1,
  "height" : "1",
  "transactions" : [ {
    "id" : "d9b7fe53-ffa9-446e-b429-7e1d0293e29c",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "/*\r\n * Copyright  2019 Blockchain Technology and Application Joint Lab, Linkel Technology Co., Ltd, Beijing, Fintech Research Center of ISCAS.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BA SIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\npackage rep.sc.tpl\r\n\r\nimport rep.protos.peer._\r\nimport org.json4s.jackson.JsonMethods._\r\n\r\nimport scala.collection.mutable.Map\r\nimport org.json4s.DefaultFormats\r\nimport rep.app.conf.SystemProfile\r\nimport rep.utils.{ IdTool, SerializeUtils }\r\nimport rep.sc.scalax.{ ContractContext, ContractException, IContract }\r\nimport rep.protos.peer.ActionResult\r\n\r\n/**\r\n * @author zyf\r\n */\r\nfinal case class CertStatus(credit_code: String, name: String, status: Boolean)\r\nfinal case class CertInfo(credit_code: String, name: String, cert: Certificate)\r\nclass ContractCert extends IContract {\r\n  //case class CertStatus(credit_code: String, name: String, status: Boolean)\r\n  //case class CertInfo(credit_code: String, name: String, cert: Certificate)\r\n  \r\n  implicit val formats = DefaultFormats\r\n\r\n  val notNodeCert = \"非管理员操作\"\r\n  val signerExists = \"账户已存在\"\r\n  val signerNotExists = \"账户不存在\"\r\n  val certExists = \"证书已存在\"\r\n  val certNotExists = \"证书不存在\"\r\n  val unknownError = \"未知错误\"\r\n  val chaincodeName = SystemProfile.getAccountChaincodeName\r\n  val chaincodeVersion = SystemProfile.getAccountChaincodeVersion\r\n  //val prefix = IdTool.getCid(ChaincodeId(chaincodeName, chaincodeVersion))\r\n  val underline = \"_\"\r\n  val dot = \".\"\r\n  // 锚点，错误回退\r\n  var anchor: Map[String, Any] = Map()\r\n\r\n  object ACTION {\r\n    val SignUpSigner = \"SignUpSigner\"\r\n    val SignUpCert = \"SignUpCert\"\r\n    val UpdateCertStatus = \"UpdateCertStatus\"\r\n    val UpdateSigner = \"UpdateSigner\"\r\n  }\r\n\r\n  /**\r\n   * 注册Signer账户\r\n   * @param ctx\r\n   * @param data\r\n   * @return\r\n   */\r\n  def signUpSigner(ctx: ContractContext, data: Signer): ActionResult = {\r\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\r\n    if (!isNodeCert) {\r\n      throw ContractException(notNodeCert)\r\n    }\r\n    // 存Signer账户\r\n    //val signerKey = prefix + underline + data.creditCode\r\n    val signer = ctx.api.getState(data.creditCode)\r\n    // 如果是null，表示已注销，如果不是null，则判断是否有值\r\n    if (signer == null) {\r\n      ctx.api.setVal(data.creditCode, data)\r\n      null\r\n    } else {\r\n      throw ContractException(signerExists)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注册用户证书：1、将name加到账户中；2、将Certificate保存\r\n   * @param ctx\r\n   * @param data\r\n   * @return\r\n   */\r\n  def signUpCert(ctx: ContractContext, data: CertInfo): ActionResult = {\r\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\r\n    if (!isNodeCert) {\r\n      throw ContractException(notNodeCert)\r\n    }\r\n    val certKey = data.credit_code + dot + data.name\r\n    val certInfo = ctx.api.getState(certKey)\r\n    val signerKey = data.credit_code\r\n    val signerContent = ctx.api.getState(signerKey)\r\n    // 先判断证书，若证书不存在，则向账户添加name\r\n    if (certInfo == null) {\r\n      if (signerContent == null) {\r\n        throw ContractException(signerNotExists)\r\n      } else {\r\n        ctx.api.setVal(certKey, data.cert)\r\n        val signer = SerializeUtils.deserialise(signerContent).asInstanceOf[Signer]\r\n        if (!signer.certNames.contains(data.name)) {\r\n          val signerNew = signer.addCertNames(data.name)\r\n          ctx.api.setVal(signerKey, signerNew)\r\n        }\r\n      }\r\n      null\r\n    } else {\r\n      throw ContractException(certExists)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 用户证书禁用、启用\r\n   * @param ctx\r\n   * @param data\r\n   * @return\r\n   */\r\n  def updateCertStatus(ctx: ContractContext, data: CertStatus): ActionResult = {\r\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\r\n    if (!isNodeCert) {\r\n      throw ContractException(notNodeCert)\r\n    }\r\n    val certKey = data.credit_code + dot + data.name\r\n    val certInfo = ctx.api.getState(certKey)\r\n    if (certInfo == null) {\r\n      throw ContractException(certNotExists)\r\n    } else {\r\n      val cert = SerializeUtils.deserialise(certInfo).asInstanceOf[Certificate]\r\n      val certNew = cert.withCertValid(data.status)\r\n      ctx.api.setVal(certKey, certNew)\r\n      null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新账户相关信息\r\n   * @param ctx\r\n   * @param data\r\n   * @return\r\n   */\r\n  def updateSigner(ctx: ContractContext, data: Signer): ActionResult = {\r\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\r\n    if (!isNodeCert) {\r\n      throw ContractException(notNodeCert)\r\n    }\r\n    val signer = ctx.api.getState(data.creditCode)\r\n    // 如果是null，账户不存在，不存在则不能更新\r\n    if (signer == null) {\r\n      throw ContractException(signerNotExists)\r\n    } else {\r\n      ctx.api.setVal(data.creditCode, data)\r\n      null\r\n    }\r\n  }\r\n\r\n  \r\n  override def init(ctx: ContractContext) {\r\n    println(s\"tid: $ctx.t.id\")\r\n  }\r\n\r\n  /**\r\n   * 合约方法入口\r\n   */\r\n  override def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\r\n    val json = parse(sdata)\r\n\r\n    action match {\r\n      case ACTION.SignUpSigner =>\r\n        println(\"SignUpSigner\")\r\n        signUpSigner(ctx, json.extract[Signer])\r\n      case ACTION.SignUpCert =>\r\n        println(\"SignUpCert\")\r\n        signUpCert(ctx, json.extract[CertInfo])\r\n      case ACTION.UpdateCertStatus =>\r\n        println(\"UpdateCertStatus\")\r\n        updateCertStatus(ctx, json.extract[CertStatus])\r\n      case ACTION.UpdateSigner =>\r\n        println(\"UpdateSigner\")\r\n        updateSigner(ctx, json.extract[Signer])\r\n    }\r\n  }\r\n\r\n}",
      "ctype" : "CODE_SCALA"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-04T14:39:10.441Z",
      "signature" : "MEYCIQD05Z2rwhmtcSLFa03RXPiojOpvK7nSM7mFNpE7ZeJlXAIhAMYM/ryXdMyCHvkt8OtHltumyNRuvO/8+hD8m74M5AIR"
    }
  }, {
    "id" : "d5ec53da-8eb1-431c-9be4-ebbb40472eb7",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node1\",\"creditCode\":\"121000005l35120456\",\"mobile\":\"18912345678\",\"certNames\":[\"node1\"],\"unknownFields\":{\"fields\":{}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-04T14:39:11.051Z",
      "signature" : "MEYCIQDFqgPEPTgrllUHnMkdcTv+NIQXSPQu6ghUgTdOXrMzTwIhAJ6Dx2JlaxuCogWtCJq3V/26aloKZ3AZOPzOD4xG6J2s"
    }
  }, {
    "id" : "9f6bb60d-c31f-4eff-b8af-4d2dabcb175f",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node2\",\"creditCode\":\"12110107bi45jh675g\",\"mobile\":\"18912345678\",\"certNames\":[\"node2\"],\"unknownFields\":{\"fields\":{}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-04T14:39:11.059Z",
      "signature" : "MEYCIQDoKwGbiRrIpPSwiwppl9NJ/bG7H435zEjsgz7UhCj09gIhAJ3AVGQKxGdEgxbjugGz34PL0lLjul5I97gZPLA2I6EM"
    }
  }, {
    "id" : "1d27c0c9-c914-48f0-9561-2595649b8041",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node3\",\"creditCode\":\"122000002n00123567\",\"mobile\":\"18912345678\",\"certNames\":[\"node3\"],\"unknownFields\":{\"fields\":{}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-04T14:39:11.063Z",
      "signature" : "MEQCIAtqF8h1U1O+nhDPrQNf2zf8LJodTjg/DGoBFZpsJwB+AiAbW3QzfWr1hT/2LkhL0MnEZEkYnVOmm7ETF4DnAtsRvQ=="
    }
  }, {
    "id" : "50c31e54-b912-4c80-8acb-16fbcce38ce5",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node4\",\"creditCode\":\"921000005k36123789\",\"mobile\":\"18912345678\",\"certNames\":[\"node4\"],\"unknownFields\":{\"fields\":{}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-04T14:39:11.066Z",
      "signature" : "MEUCIEyBtvtxnhsZmu83GV3qHH1yiKfOcnN+K020dlK9Xk1fAiEAzEWGOVCqKaeQC46h0YxYS9Fa79HTAJ2C9vJTWDVU8kM="
    }
  }, {
    "id" : "c2af89bc-140c-4d74-9b31-2b9e0946530a",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node5\",\"creditCode\":\"921000006e0012v696\",\"mobile\":\"18912345678\",\"certNames\":[\"node5\"],\"unknownFields\":{\"fields\":{}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-04T14:39:11.069Z",
      "signature" : "MEQCIEvCTBgtXDTnns78avyebovVg1oTJuofoYPHrJo2QobnAiAOvMaVrpVpLj1fCqsuBAtejCRK81TUuAgKXGLQ6U7Q5w=="
    }
  }, {
    "id" : "8f061dd7-00f5-4eed-ab13-a441b3fa36cb",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"super_admin\",\"creditCode\":\"951002007l78123233\",\"mobile\":\"18912345678\",\"certNames\":[\"super_admin\"],\"unknownFields\":{\"fields\":{}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-04T14:39:11.074Z",
      "signature" : "MEYCIQDPj8K12lo2Ad/bSo88JQfVI28RBoZofjamzGLOxVYr4wIhAOUIKHQ9f3iuzAoB+lJyPWJbXNU7571RlUgbIKBjGTH+"
    }
  }, {
    "id" : "1205e6cb-b662-4290-9666-0d0fd0082865",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"121000005l35120456\",\"name\":\"node1\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIICWDCCAf6gAwIBAgIEYGM5+DAKBggqhkjOPQQDAjAzMQ4wDAYDVQQKDAVpc2Nh\\r\\nczERMA8GA1UECwwIcmVwY2hhaW4xDjAMBgNVBAMMBXRydXN0MB4XDTIxMDQwMTAx\\r\\nMTE0OFoXDTMxMDMzMDAxMTE0OFowMzEOMAwGA1UECgwFaXNjYXMxETAPBgNVBAsM\\r\\nCHJlcGNoYWluMQ4wDAYDVQQDDAVub2RlMTBZMBMGByqGSM49AgEGCCqGSM49AwEH\\r\\nA0IABHqAN8DF8f13z4hA13xQovumcOYbI18aGlQOTeeqbcBTF9e5qOALk626K29f\\r\\ne1W1pzVol6ojfFyKzCiuNHfsoWOjgf8wgfwwXgYDVR0jBFcwVYAU1+OX/zM3MHeR\\r\\nmoOMgjNRiqLdrX6hN6Q1MDMxDjAMBgNVBAoMBWlzY2FzMREwDwYDVQQLDAhyZXBj\\r\\naGFpbjEOMAwGA1UEAwwFdHJ1c3SCBGBjNTkwHQYDVR0OBBYEFBm3lLmqJ8psdHvl\\r\\n9DUfCpJCX9kBMA4GA1UdDwEB/wQEAwIFoDAzBgNVHR8ELDAqMCigJqAkhiJodHRw\\r\\nOi8vMTI3LjAuMC4xOjgwODEvcmVwY2hhaW4uY3JsMDYGCCsGAQUFBwEBBCowKDAm\\r\\nBggrBgEFBQcwAYYaaHR0cDovLzEyNy4wLjAuMTo4MDgxL29jc3AwCgYIKoZIzj0E\\r\\nAwIDSAAwRQIhAOs4Zm1NaYIll9VTb+8xU/lRLsq+flf2w4Dlm+Km+LOPAiBfzv8H\\r\\nloL03X3yNMJrx4iKnsiuQggrQzMy850QpQWFXg==\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1617518351,\"nanos\":78000000,\"unknownFields\":{\"fields\":{}}},\"unknownFields\":{\"fields\":{}}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-04T14:39:11.099Z",
      "signature" : "MEQCIAZpPmkHtvekBEl5OFPrNjY0Haqv71QcqpShY47Kh9NnAiBCKzyK1bQ0ls+cvZI7CiuGT0O2gY76Wu0wCVDX/WDyhQ=="
    }
  }, {
    "id" : "60ceb895-1f2e-4aaf-9312-1307e986bf0d",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"12110107bi45jh675g\",\"name\":\"node2\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIICWDCCAf6gAwIBAgIEYGM5+TAKBggqhkjOPQQDAjAzMQ4wDAYDVQQKDAVpc2Nh\\r\\nczERMA8GA1UECwwIcmVwY2hhaW4xDjAMBgNVBAMMBXRydXN0MB4XDTIxMDQwMTAx\\r\\nMTIxNFoXDTMxMDMzMDAxMTIxNFowMzEOMAwGA1UECgwFaXNjYXMxETAPBgNVBAsM\\r\\nCHJlcGNoYWluMQ4wDAYDVQQDDAVub2RlMjBZMBMGByqGSM49AgEGCCqGSM49AwEH\\r\\nA0IABCICYpM7hCw0+E/MNnCrB0J98MLuLvfZZ5/cPR/qMXu4yUD0q7OLPhhnF/6W\\r\\ncFrDxHIwwChqybSNdKnaOaE+8Bqjgf8wgfwwXgYDVR0jBFcwVYAU1+OX/zM3MHeR\\r\\nmoOMgjNRiqLdrX6hN6Q1MDMxDjAMBgNVBAoMBWlzY2FzMREwDwYDVQQLDAhyZXBj\\r\\naGFpbjEOMAwGA1UEAwwFdHJ1c3SCBGBjNTkwHQYDVR0OBBYEFA4z69kmDmZ4Ess5\\r\\nZRL86eO+sBEfMA4GA1UdDwEB/wQEAwIFoDAzBgNVHR8ELDAqMCigJqAkhiJodHRw\\r\\nOi8vMTI3LjAuMC4xOjgwODEvcmVwY2hhaW4uY3JsMDYGCCsGAQUFBwEBBCowKDAm\\r\\nBggrBgEFBQcwAYYaaHR0cDovLzEyNy4wLjAuMTo4MDgxL29jc3AwCgYIKoZIzj0E\\r\\nAwIDSAAwRQIhAJzSGNa3tkCbz3Ni06vRGNHxxKIqIULMQ0GNnIyIoUb9AiADUP33\\r\\nLnrygE4g/twSWPnytTEdnqPqorn1UbmfuWqdQA==\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1617518351,\"nanos\":102000000,\"unknownFields\":{\"fields\":{}}},\"unknownFields\":{\"fields\":{}}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-04T14:39:11.104Z",
      "signature" : "MEYCIQDqf3dXqZJ75n5piyb9IQwoaP2cirzXTz/XhqHFUTcOlgIhAJoYyW2FjXvnvfNHnuhU0M1YMwqCOQPMXdIsjUX+yvYc"
    }
  }, {
    "id" : "ffde628f-16e9-4195-9815-24b28963cd74",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"122000002n00123567\",\"name\":\"node3\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIICWTCCAf6gAwIBAgIEYGM5+jAKBggqhkjOPQQDAjAzMQ4wDAYDVQQKDAVpc2Nh\\r\\nczERMA8GA1UECwwIcmVwY2hhaW4xDjAMBgNVBAMMBXRydXN0MB4XDTIxMDQwMTAx\\r\\nMTIzNVoXDTMxMDMzMDAxMTIzNVowMzEOMAwGA1UECgwFaXNjYXMxETAPBgNVBAsM\\r\\nCHJlcGNoYWluMQ4wDAYDVQQDDAVub2RlMzBZMBMGByqGSM49AgEGCCqGSM49AwEH\\r\\nA0IABM89lA07kgHdse4pJqr1nKITI2KPlxyUuN0trhkvx4Ee+bAqffrj887cBiFw\\r\\ntUyyQHi8K80Zjjleakda5cLHH8+jgf8wgfwwXgYDVR0jBFcwVYAU1+OX/zM3MHeR\\r\\nmoOMgjNRiqLdrX6hN6Q1MDMxDjAMBgNVBAoMBWlzY2FzMREwDwYDVQQLDAhyZXBj\\r\\naGFpbjEOMAwGA1UEAwwFdHJ1c3SCBGBjNTkwHQYDVR0OBBYEFE4deD6kP9L0oKmZ\\r\\nyMU0qkdenG6NMA4GA1UdDwEB/wQEAwIFoDAzBgNVHR8ELDAqMCigJqAkhiJodHRw\\r\\nOi8vMTI3LjAuMC4xOjgwODEvcmVwY2hhaW4uY3JsMDYGCCsGAQUFBwEBBCowKDAm\\r\\nBggrBgEFBQcwAYYaaHR0cDovLzEyNy4wLjAuMTo4MDgxL29jc3AwCgYIKoZIzj0E\\r\\nAwIDSQAwRgIhAMrPunQ4qE9RvxVdhMiP9Qgnf+fVb7zs2UhpAwFhIh7IAiEA6nj1\\r\\nakjJOXsmGcpjX38tNDJXsXEhB2O2Db/bS5aITz0=\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1617518351,\"nanos\":106000000,\"unknownFields\":{\"fields\":{}}},\"unknownFields\":{\"fields\":{}}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-04T14:39:11.108Z",
      "signature" : "MEUCIBELq+N8zvfQQEnzPr4MoCzO0ePRAcyZtvnQ7zTg7fOEAiEAy/u6C43czR7croCxZta4uxMgsBQa1K1fXsA4RU3N7zs="
    }
  }, {
    "id" : "99bb2400-41f1-49fa-b547-5f3d38b9673c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"921000005k36123789\",\"name\":\"node4\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIICWTCCAf6gAwIBAgIEYGM5+zAKBggqhkjOPQQDAjAzMQ4wDAYDVQQKDAVpc2Nh\\r\\nczERMA8GA1UECwwIcmVwY2hhaW4xDjAMBgNVBAMMBXRydXN0MB4XDTIxMDQwMTAx\\r\\nMTI0OFoXDTMxMDMzMDAxMTI0OFowMzEOMAwGA1UECgwFaXNjYXMxETAPBgNVBAsM\\r\\nCHJlcGNoYWluMQ4wDAYDVQQDDAVub2RlNDBZMBMGByqGSM49AgEGCCqGSM49AwEH\\r\\nA0IABMDQVpEu3Tl1sL/dlxP5/4yIqyeFQbYx4pJV3oKoZMwxGKhLuf/7lfc7/IfT\\r\\n2QVojtEKoDUXPMaacjGRnUw3+x6jgf8wgfwwXgYDVR0jBFcwVYAU1+OX/zM3MHeR\\r\\nmoOMgjNRiqLdrX6hN6Q1MDMxDjAMBgNVBAoMBWlzY2FzMREwDwYDVQQLDAhyZXBj\\r\\naGFpbjEOMAwGA1UEAwwFdHJ1c3SCBGBjNTkwHQYDVR0OBBYEFFTAFfe0DnfDdCAK\\r\\nC7lxg8sEY5+RMA4GA1UdDwEB/wQEAwIFoDAzBgNVHR8ELDAqMCigJqAkhiJodHRw\\r\\nOi8vMTI3LjAuMC4xOjgwODEvcmVwY2hhaW4uY3JsMDYGCCsGAQUFBwEBBCowKDAm\\r\\nBggrBgEFBQcwAYYaaHR0cDovLzEyNy4wLjAuMTo4MDgxL29jc3AwCgYIKoZIzj0E\\r\\nAwIDSQAwRgIhANKJvBeb6PL3q0r0tfDBTjhMLpZSQyhiuoAXnbCii5GVAiEA0unh\\r\\nj97myRoAH2m+0hknx7bxIyhqMFA/0gay40SQ7vE=\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1617518351,\"nanos\":112000000,\"unknownFields\":{\"fields\":{}}},\"unknownFields\":{\"fields\":{}}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-04T14:39:11.114Z",
      "signature" : "MEQCIFzRfmmNPUNkqV7ah02+f1Lp4lK4eG3ZH4SA0zxy6I2EAiAcGh9b8J/kWuEXhoUAFQKkXdCBj7uAwypBcQIFyJHozQ=="
    }
  }, {
    "id" : "14d39d6c-7366-48a7-9316-33daa92936f7",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"921000006e0012v696\",\"name\":\"node5\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIICWTCCAf6gAwIBAgIEYGM5/DAKBggqhkjOPQQDAjAzMQ4wDAYDVQQKDAVpc2Nh\\r\\nczERMA8GA1UECwwIcmVwY2hhaW4xDjAMBgNVBAMMBXRydXN0MB4XDTIxMDQwMTAx\\r\\nMTMwOVoXDTMxMDMzMDAxMTMwOVowMzEOMAwGA1UECgwFaXNjYXMxETAPBgNVBAsM\\r\\nCHJlcGNoYWluMQ4wDAYDVQQDDAVub2RlNTBZMBMGByqGSM49AgEGCCqGSM49AwEH\\r\\nA0IABP1TzQHtzdPTbMYKFGCbVqyI0TFh95cNe3uqTQl+KhfSO8YHrDsjTmai1I+W\\r\\ngpLOQV/0oiuOdGF+J2yjnZnmhsujgf8wgfwwXgYDVR0jBFcwVYAU1+OX/zM3MHeR\\r\\nmoOMgjNRiqLdrX6hN6Q1MDMxDjAMBgNVBAoMBWlzY2FzMREwDwYDVQQLDAhyZXBj\\r\\naGFpbjEOMAwGA1UEAwwFdHJ1c3SCBGBjNTkwHQYDVR0OBBYEFFK5ywfYbfnxoSIu\\r\\nA4af2nEB/RaNMA4GA1UdDwEB/wQEAwIFoDAzBgNVHR8ELDAqMCigJqAkhiJodHRw\\r\\nOi8vMTI3LjAuMC4xOjgwODEvcmVwY2hhaW4uY3JsMDYGCCsGAQUFBwEBBCowKDAm\\r\\nBggrBgEFBQcwAYYaaHR0cDovLzEyNy4wLjAuMTo4MDgxL29jc3AwCgYIKoZIzj0E\\r\\nAwIDSQAwRgIhAJzQYGH9bQzWOSr3gcUCf3ASI3dcvJeixmfcY5YyL5ziAiEA3aty\\r\\nbDbOMnutPkDg6ZeRW9KJJ2j14HSm26wj9cV3ESs=\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1617518351,\"nanos\":116000000,\"unknownFields\":{\"fields\":{}}},\"unknownFields\":{\"fields\":{}}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-04T14:39:11.118Z",
      "signature" : "MEUCICPcgBptkvp+KdUzorvfW4qDE6AoNsWFQyxn7lOR+aoNAiEA+Ie6niLWTNprYz/r6y0XlhQJusnjgVC/DxzlSvfDMk8="
    }
  }, {
    "id" : "e7ef8dc8-6ca9-4c49-b79d-4c7b93e3b95e",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"951002007l78123233\",\"name\":\"super_admin\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIICXjCCAgSgAwIBAgIEYGM5/TAKBggqhkjOPQQDAjAzMQ4wDAYDVQQKDAVpc2Nh\\r\\nczERMA8GA1UECwwIcmVwY2hhaW4xDjAMBgNVBAMMBXRydXN0MB4XDTIxMDQwMTAx\\r\\nMTMyNFoXDTMxMDMzMDAxMTMyNFowOTEOMAwGA1UECgwFaXNjYXMxETAPBgNVBAsM\\r\\nCHJlcGNoYWluMRQwEgYDVQQDDAtzdXBlcl9hZG1pbjBZMBMGByqGSM49AgEGCCqG\\r\\nSM49AwEHA0IABEjB8Gwf0po1we016lnYgDMFhoT6QOP/HMc5bRiL/IELJX1GoUqI\\r\\nNcccebxse/neAWd0pd2aKpIVzLER0Vkosb2jgf8wgfwwXgYDVR0jBFcwVYAU1+OX\\r\\n/zM3MHeRmoOMgjNRiqLdrX6hN6Q1MDMxDjAMBgNVBAoMBWlzY2FzMREwDwYDVQQL\\r\\nDAhyZXBjaGFpbjEOMAwGA1UEAwwFdHJ1c3SCBGBjNTkwHQYDVR0OBBYEFOi0gVjo\\r\\n5KAkjzEq/6ezW9a8nuVLMA4GA1UdDwEB/wQEAwIFoDAzBgNVHR8ELDAqMCigJqAk\\r\\nhiJodHRwOi8vMTI3LjAuMC4xOjgwODEvcmVwY2hhaW4uY3JsMDYGCCsGAQUFBwEB\\r\\nBCowKDAmBggrBgEFBQcwAYYaaHR0cDovLzEyNy4wLjAuMTo4MDgxL29jc3AwCgYI\\r\\nKoZIzj0EAwIDSAAwRQIhAI2C4/7/WgyILLwJrT9HFFbCupPBupNp9K1yUbrBe6LJ\\r\\nAiAt/iUnEnmomZpucDu54caYl72AzwdfbO/wJEw+I5xOJg==\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1617518351,\"nanos\":121000000,\"unknownFields\":{\"fields\":{}}},\"unknownFields\":{\"fields\":{}}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-04T14:39:11.123Z",
      "signature" : "MEUCIQC/c5BhWAFh78FB4F1N5KQ9oTaEYYst5T2GJrHf2vCJXwIgBbZ7lfigxwLmKLQ6HRfWGubpIh6LTsmGNDGHSs3kcNY="
    }
  }, {
    "id" : "aff75ca2-9214-4ba7-9ddb-fbf59f292adb",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "ContractAssetsTPL",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "\r\n/*\r\n * Copyright  2019 Blockchain Technology and Application Joint Lab, Linkel Technology Co., Ltd, Beijing, Fintech Research Center of ISCAS.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BA SIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\npackage rep.sc.tpl\r\n\r\nimport org.json4s._\r\nimport org.json4s.jackson.JsonMethods._\r\nimport rep.app.conf.SystemProfile\r\nimport rep.protos.peer.ChaincodeId\r\nimport rep.utils.IdTool\r\nimport rep.sc.scalax.IContract\r\n\r\nimport rep.sc.scalax.ContractContext\r\nimport rep.sc.scalax.ContractException\r\nimport rep.protos.peer.ActionResult\r\n\r\n/**\r\n * 资产管理合约\r\n */\r\n\r\nfinal case class Transfer(from:String, to:String, amount:Int)\r\n\r\nclass ContractAssetsTPL extends IContract{\r\n\r\n  // 需要跨合约读账户\r\n  val chaincodeName = SystemProfile.getAccountChaincodeName\r\n  val chaincodeVersion = SystemProfile.getAccountChaincodeVersion \r\n  //val prefix = IdTool.getCid(ChaincodeId(chaincodeName, chaincodeVersion))\r\n\r\n  implicit val formats = DefaultFormats\r\n  \r\n    def init(ctx: ContractContext){      \r\n      println(s\"tid: $ctx.t.id\")\r\n    }\r\n    \r\n    def set(ctx: ContractContext, data:Map[String,Int]) :ActionResult={\r\n      println(s\"set data:$data\")\r\n      for((k,v)<-data){\r\n        ctx.api.setVal(k, v)\r\n      }\r\n      null\r\n    }\r\n    \r\n    def transfer(ctx: ContractContext, data:Transfer) :ActionResult={\r\n      if(!data.from.equals(ctx.t.getSignature.getCertId.creditCode))\r\n        throw ContractException(\"只允许从本人账户转出\")      \r\n      val signerKey =  data.to\r\n      // 跨合约读账户，该处并未反序列化\r\n      if(ctx.api.getStateEx(chaincodeName,data.to)==null)\r\n        throw ContractException(\"目标账户不存在\")\r\n      val sfrom:Any =  ctx.api.getVal(data.from)\r\n      var dfrom =sfrom.asInstanceOf[Int]\r\n      if(dfrom < data.amount)\r\n        throw ContractException(\"余额不足\")\r\n      ctx.api.setVal(data.from,dfrom - data.amount)\r\n      var dto = ctx.api.getVal(data.to).toString.toInt\r\n      ctx.api.setVal(data.to,dto + data.amount)\r\n       null\r\n    }\r\n\r\n    def put_proof(ctx: ContractContext, data:Map[String,Any]): ActionResult={\r\n    //先检查该hash是否已经存在,如果已存在,抛异常\r\n    for((k,v)<-data){\r\n      var pv0:Any = ctx.api.getVal(k)\r\n      if(pv0 != null)\r\n//        throw new Exception(\"[\"+k+\"]已存在，当前值[\"+pv0+\"]\");\r\n        throw ContractException(s\"$k 已存在，当前值为 $pv0\")\r\n      ctx.api.setVal(k,v)\r\n      print(\"putProof:\"+k+\":\"+v)\r\n    }\r\n      null\r\n  }\r\n\r\n  /**\r\n     * 根据action,找到对应的method，并将传入的json字符串parse为method需要的传入参数\r\n     */\r\n    def onAction(ctx: ContractContext,action:String, sdata:String ):ActionResult={\r\n      val json = parse(sdata)      \r\n      action match {\r\n        case \"transfer\" => \r\n          transfer(ctx,json.extract[Transfer])\r\n        case \"set\" => \r\n          set(ctx, json.extract[Map[String,Int]])\r\n        case \"putProof\" =>\r\n          put_proof(ctx, json.extract[Map[String,Any]])\r\n      }\r\n    }\r\n    \r\n}\r\n",
      "ctype" : "CODE_SCALA"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2021-04-04T14:39:11.126Z",
      "signature" : "MEYCIQCdqJCofHg4SfzzQZYzHrLAhn9noHG7SyAQAf+Mbg6CmgIhAJr97KdxzfcBmMUZ7fJODmRG24Hnw95ZNKeumh8OlQvi"
    }
  }, {
    "id" : "2d46b190-08ae-47f9-86ae-1e1b9f4b04b4",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractAssetsTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "set",
      "args" : [ "{\r\n  \"121000005l35120456\" : 10000000,\r\n  \"12110107bi45jh675g\" : 10000000,\r\n  \"122000002n00123567\" : 10000000,\r\n  \"921000005k36123789\" : 10000000,\r\n  \"921000006e0012v696\" : 10000000\r\n}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-04T14:39:11.128Z",
      "signature" : "MEUCIA9WNhRZoKr0/Bsqih3SKwLfE4o2DeNzAcgB03b4VNpuAiEAk2cjyn8YsqV2dTg+GomfXWybV8wL/qpl3k8l8nBHL/A="
    }
  }, {
    "id" : "037d2992-1d67-47ba-ba72-91f64e5ebb7a",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "DataProof",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "package rep.sc.tpl\n\nimport java.nio.charset.StandardCharsets\nimport java.security.MessageDigest\n\nimport org.json4s.DefaultFormats\nimport rep.crypto.BytesHex\nimport rep.protos.peer.ActionResult\nimport rep.sc.scalax.{ContractContext, ContractException, IContract}\n\n/**\n  * 存证jsonString\n  *\n  * @author zyf\n  */\nclass DataProof extends IContract {\n\n  implicit val formats: DefaultFormats.type = DefaultFormats\n\n  val sha256Digest: MessageDigest = MessageDigest.getInstance(\"SHA-256\")\n\n  override def init(ctx: ContractContext): Unit = {\n    println(s\"tid: $ctx.t.id\")\n  }\n\n  /**\n    * 存证\n    *\n    * @param ctx\n    * @param data 交易内容的jsonString\n    * @return\n    */\n  def proof(ctx: ContractContext, data: String): ActionResult = {\n    val contentHash = BytesHex.bytes2hex(sha256Digest.digest(data.getBytes(StandardCharsets.UTF_8)))\n    ctx.api.setVal(contentHash, data)\n    null\n  }\n\n  override def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\n    action match {\n      case \"proof\" =>\n        proof(ctx, sdata)\n      case _ => throw ContractException(\"合约中没有对应的方法\")\n    }\n  }\n}\n",
      "ctype" : "CODE_SCALA"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2021-04-04T14:39:11.130Z",
      "signature" : "MEQCIEwT7S4fzTGJgL3MI1fyqZtA5X7KFcOdmsa6p7cB1q81AiAq9iv5P7Q+1/H90sZf9vl02N4nlSO4deIMEoTB04p+gw=="
    }
  }, {
    "id" : "86c1948e-09ee-4732-bdab-08b53acee081",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "ManageNodeCert",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "package rep.sc.tpl\n\nimport java.io.StringReader\nimport java.security.Security\nimport java.security.cert.X509CRL\n\nimport org.bouncycastle.cert.X509CRLHolder\nimport org.bouncycastle.cert.jcajce.JcaX509CRLConverter\nimport org.bouncycastle.cert.ocsp.OCSPResp\nimport org.bouncycastle.jce.provider.BouncyCastleProvider\nimport org.bouncycastle.openssl.PEMParser\nimport org.bouncycastle.util.io.pem.PemReader\nimport org.json4s.DefaultFormats\nimport org.json4s.jackson.JsonMethods.parse\nimport rep.protos.peer.ActionResult\nimport rep.sc.scalax.{ContractContext, ContractException, IContract}\nimport rep.ui.web.CustomSSLEngine\n\ncase class NodeOcspResp(serialNumber: String, ocspRespPem: String)\n\n/**\n  * @author zyf\n  */\nclass ManageNodeCert extends IContract {\n\n  override def init(ctx: ContractContext): Unit = {\n    Security.addProvider(new BouncyCastleProvider)\n    println(s\"tid: ${ctx.t.id}, execute the contract which name is ${ctx.t.getCid.chaincodeName} and version is ${ctx.t.getCid.version}\")\n  }\n\n  /**\n    * 清除初始化crl列表，这样后面从levelDB检索的时候才能生效，不然会优先从certStore中读取，这个可以放在接口处即可，不用广播入块\n    *\n    * @param ctx\n    * @return\n    */\n  def clearInitializedCrlList(ctx: ContractContext, flag: Boolean): ActionResult = {\n    if (flag && ctx.api.getVal(\"crl\" + \"_\" + ctx.t.getSignature.getCertId.creditCode) != null) {\n      CustomSSLEngine.clearCrlList(ctx)\n    } else {\n      throw ContractException(\"未持久化CRL列表到levelDB中，暂时不能清除初始化到CertStore中的CRL\")\n    }\n    null\n  }\n\n  /**\n    * 吊销节点证书，将crl列表写到CertStore中，其实也可对外提供查询，但是不能保证入块，在缓存中，没有持久化到levelDB\n    *\n    * @param ctx\n    * @param crlPem\n    * @return\n    */\n  def updateCrlToCertStore(ctx: ContractContext, crlPem: String): ActionResult = {\n    val pemParser = new PEMParser(new StringReader(crlPem))\n    val crlHolder = pemParser.readObject().asInstanceOf[X509CRLHolder]\n    val crl = new JcaX509CRLConverter().setProvider(\"BC\").getCRL(crlHolder)\n    CustomSSLEngine.updateCrlList(ctx, crl)\n    null\n  }\n\n  /**\n    * 吊销节点证书，将crl列表写到levelDB中，然后可通过接口读取\n    *\n    * @param ctx\n    * @param crlPem\n    * @return\n    */\n  def updateCrlToDb(ctx: ContractContext, crlPem: String): ActionResult = {\n    val pemParser = new PEMParser(new StringReader(crlPem))\n    val crlHolder = pemParser.readObject().asInstanceOf[X509CRLHolder]\n    val crl = new JcaX509CRLConverter().setProvider(\"BC\").getCRL(crlHolder)\n    // 放在super_admin下\n    ctx.api.setVal(\"crl\" + \"_\" + ctx.t.getSignature.getCertId.creditCode, crl)\n    null\n  }\n\n  /**\n    *\n    * @param ctx\n    * @param nodeOcspResp\n    * @return\n    */\n  def updateOcspRespToDB(ctx: ContractContext, nodeOcspResp: NodeOcspResp): ActionResult = {\n    val pemReader = new PemReader(new StringReader(nodeOcspResp.ocspRespPem))\n    val ocspRespBytes = pemReader.readPemObject().getContent\n    val ocspResp = new OCSPResp(ocspRespBytes)\n    // 放在serailNumber下\n    ctx.api.setVal(\"ocsp\" + \"_\" + nodeOcspResp.serialNumber, ocspResp)\n    null\n  }\n\n  override def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\n\n    implicit val formats: DefaultFormats.type = DefaultFormats\n    val json = parse(sdata)\n\n    action match {\n      case \"clearInitializedCrlList\" => clearInitializedCrlList(ctx, json.extract[Boolean])\n      case \"updateCrlToCertStore\" => updateCrlToCertStore(ctx, json.extract[String])\n      case \"updateCrlToDb\" => updateCrlToDb(ctx, json.extract[String])\n      case \"updateOcspRespToDB\" => updateOcspRespToDB(ctx, json.extract[NodeOcspResp])\n      case _ => throw ContractException(\"no method matched\")\n    }\n  }\n}\n",
      "ctype" : "CODE_SCALA"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2021-04-04T14:39:11.132Z",
      "signature" : "MEYCIQDu8btXRb4Z52rtayjXhzltJFkQ40ifq/fQo54dzr+vJgIhAM0JTMHgi3Z2MDN54U/cQT/16cZXMP+NXA0Tm57yIiKK"
    }
  } ]
}