{
  "version" : 1,
  "height" : "1",
  "transactions" : [ {
    "id" : "7c767c76-0cc4-4793-9337-049e06d1312b",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "/*\r\n * Copyright  2019 Blockchain Technology and Application Joint Lab, Linkel Technology Co., Ltd, Beijing, Fintech Research Center of ISCAS.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BA SIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\npackage rep.sc.tpl\r\n\r\nimport rep.protos.peer._\r\nimport org.json4s.jackson.JsonMethods._\r\n\r\nimport scala.collection.mutable.Map\r\nimport org.json4s.DefaultFormats\r\nimport rep.app.conf.SystemProfile\r\nimport rep.utils.{ IdTool, SerializeUtils }\r\nimport rep.sc.scalax.{ ContractContext, ContractException, IContract }\r\nimport rep.protos.peer.ActionResult\r\n\r\n/**\r\n * @author zyf\r\n */\r\nfinal case class CertStatus(credit_code: String, name: String, status: Boolean)\r\nfinal case class CertInfo(credit_code: String, name: String, cert: Certificate)\r\nclass ContractCert extends IContract {\r\n  //case class CertStatus(credit_code: String, name: String, status: Boolean)\r\n  //case class CertInfo(credit_code: String, name: String, cert: Certificate)\r\n  \r\n  implicit val formats = DefaultFormats\r\n\r\n  val notNodeCert = \"非管理员操作\"\r\n  val signerExists = \"账户已存在\"\r\n  val signerNotExists = \"账户不存在\"\r\n  val certExists = \"证书已存在\"\r\n  val certNotExists = \"证书不存在\"\r\n  val unknownError = \"未知错误\"\r\n  val chaincodeName = SystemProfile.getAccountChaincodeName\r\n  val chaincodeVersion = SystemProfile.getAccountChaincodeVersion\r\n  //val prefix = IdTool.getCid(ChaincodeId(chaincodeName, chaincodeVersion))\r\n  val underline = \"_\"\r\n  val dot = \".\"\r\n  // 锚点，错误回退\r\n  var anchor: Map[String, Any] = Map()\r\n\r\n  object ACTION {\r\n    val SignUpSigner = \"SignUpSigner\"\r\n    val SignUpCert = \"SignUpCert\"\r\n    val UpdateCertStatus = \"UpdateCertStatus\"\r\n    val UpdateSigner = \"UpdateSigner\"\r\n  }\r\n\r\n  /**\r\n   * 注册Signer账户\r\n   * @param ctx\r\n   * @param data\r\n   * @return\r\n   */\r\n  def signUpSigner(ctx: ContractContext, data: Signer): ActionResult = {\r\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\r\n    if (!isNodeCert) {\r\n      throw ContractException(notNodeCert)\r\n    }\r\n    // 存Signer账户\r\n    //val signerKey = prefix + underline + data.creditCode\r\n    val signer = ctx.api.getState(data.creditCode)\r\n    // 如果是null，表示已注销，如果不是null，则判断是否有值\r\n    if (signer == null) {\r\n      ctx.api.setVal(data.creditCode, data)\r\n      null\r\n    } else {\r\n      throw ContractException(signerExists)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注册用户证书：1、将name加到账户中；2、将Certificate保存\r\n   * @param ctx\r\n   * @param data\r\n   * @return\r\n   */\r\n  def signUpCert(ctx: ContractContext, data: CertInfo): ActionResult = {\r\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\r\n    if (!isNodeCert) {\r\n      throw ContractException(notNodeCert)\r\n    }\r\n    val certKey = data.credit_code + dot + data.name\r\n    val certInfo = ctx.api.getState(certKey)\r\n    val signerKey = data.credit_code\r\n    val signerContent = ctx.api.getState(signerKey)\r\n    // 先判断证书，若证书不存在，则向账户添加name\r\n    if (certInfo == null) {\r\n      if (signerContent == null) {\r\n        throw ContractException(signerNotExists)\r\n      } else {\r\n        ctx.api.setVal(certKey, data.cert)\r\n        val signer = SerializeUtils.deserialise(signerContent).asInstanceOf[Signer]\r\n        if (!signer.certNames.contains(data.name)) {\r\n          val signerNew = signer.addCertNames(data.name)\r\n          ctx.api.setVal(signerKey, signerNew)\r\n        }\r\n      }\r\n      null\r\n    } else {\r\n      throw ContractException(certExists)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 用户证书禁用、启用\r\n   * @param ctx\r\n   * @param data\r\n   * @return\r\n   */\r\n  def updateCertStatus(ctx: ContractContext, data: CertStatus): ActionResult = {\r\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\r\n    if (!isNodeCert) {\r\n      throw ContractException(notNodeCert)\r\n    }\r\n    val certKey = data.credit_code + dot + data.name\r\n    val certInfo = ctx.api.getState(certKey)\r\n    if (certInfo == null) {\r\n      throw ContractException(certNotExists)\r\n    } else {\r\n      val cert = SerializeUtils.deserialise(certInfo).asInstanceOf[Certificate]\r\n      val certNew = cert.withCertValid(data.status)\r\n      ctx.api.setVal(certKey, certNew)\r\n      null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新账户相关信息\r\n   * @param ctx\r\n   * @param data\r\n   * @return\r\n   */\r\n  def updateSigner(ctx: ContractContext, data: Signer): ActionResult = {\r\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\r\n    if (!isNodeCert) {\r\n      throw ContractException(notNodeCert)\r\n    }\r\n    val signer = ctx.api.getState(data.creditCode)\r\n    // 如果是null，账户不存在，不存在则不能更新\r\n    if (signer == null) {\r\n      throw ContractException(signerNotExists)\r\n    } else {\r\n      ctx.api.setVal(data.creditCode, data)\r\n      null\r\n    }\r\n  }\r\n\r\n  \r\n  override def init(ctx: ContractContext) {\r\n    println(s\"tid: $ctx.t.id\")\r\n  }\r\n\r\n  /**\r\n   * 合约方法入口\r\n   */\r\n  override def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\r\n    val json = parse(sdata)\r\n\r\n    action match {\r\n      case ACTION.SignUpSigner =>\r\n        println(\"SignUpSigner\")\r\n        signUpSigner(ctx, json.extract[Signer])\r\n      case ACTION.SignUpCert =>\r\n        println(\"SignUpCert\")\r\n        signUpCert(ctx, json.extract[CertInfo])\r\n      case ACTION.UpdateCertStatus =>\r\n        println(\"UpdateCertStatus\")\r\n        updateCertStatus(ctx, json.extract[CertStatus])\r\n      case ACTION.UpdateSigner =>\r\n        println(\"UpdateSigner\")\r\n        updateSigner(ctx, json.extract[Signer])\r\n    }\r\n  }\r\n\r\n}",
      "ctype" : "CODE_SCALA"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-14T16:05:41.668Z",
      "signature" : "MEQCIHNfmqqbB+m9RCFSOAlRD6kdYbLIxQUDLqC2475907QKAiBjKEv1ONEaoImdT+Wytc7W1o19w5/cEkW7i5ouU9JJHg=="
    }
  }, {
    "id" : "87712a96-8733-492b-a198-c772ad0b8dae",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node1\",\"creditCode\":\"121000005l35120456\",\"mobile\":\"18912345678\",\"certNames\":[\"node1\"],\"unknownFields\":{\"fields\":{}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-14T16:05:42.379Z",
      "signature" : "MEYCIQCg0gcge306TS4k0maJKubF5TKyLJo/6vaEf7fLxIe73AIhAJiYTtEdfRvZDYut4M1y14SzqmwRxQAEzPhiB7qQ3mPk"
    }
  }, {
    "id" : "851f4625-2dfb-40ce-9dfc-1391c428ceb7",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node2\",\"creditCode\":\"12110107bi45jh675g\",\"mobile\":\"18912345678\",\"certNames\":[\"node2\"],\"unknownFields\":{\"fields\":{}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-14T16:05:42.389Z",
      "signature" : "MEQCIDLHMbixEPgsOHuvDUf5+LZAuopgj0xWO1vbXnZ7ArCiAiA/m3iqQvbkvwL8M0AyZt4tj1FoVOBaR3X7MHToJKGdqw=="
    }
  }, {
    "id" : "74578d28-d1f0-4d02-8d4e-c80a6fdfb4d2",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node3\",\"creditCode\":\"122000002n00123567\",\"mobile\":\"18912345678\",\"certNames\":[\"node3\"],\"unknownFields\":{\"fields\":{}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-14T16:05:42.395Z",
      "signature" : "MEQCIDvdNbNuI3cDpjpFWrlptUNmklokzs8sS1L1PgOx8zYSAiAW/d7sqHTAdSloIJiYW9DCA639XMlrV1k0Jz8mbZvARg=="
    }
  }, {
    "id" : "84b8134a-ed71-45e3-9265-6a6fc3c01c81",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node4\",\"creditCode\":\"921000005k36123789\",\"mobile\":\"18912345678\",\"certNames\":[\"node4\"],\"unknownFields\":{\"fields\":{}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-14T16:05:42.401Z",
      "signature" : "MEYCIQDNNfzrlwWuIfdo1wx9S1kNXNI5idHNa6KXcby1ZM6HfQIhALFApYjV20ZFQqtGFWfFLpd5gQYsuqI37eKNu4Yq+4Jq"
    }
  }, {
    "id" : "11c975a8-db1c-4d5d-bcb5-13e117a06692",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node5\",\"creditCode\":\"921000006e0012v696\",\"mobile\":\"18912345678\",\"certNames\":[\"node5\"],\"unknownFields\":{\"fields\":{}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-14T16:05:42.406Z",
      "signature" : "MEQCIAM2nLoz8988kVlfnRvQJu7MYNPErupGaNsKig6qJZGiAiBQZEU2VpfvCXU39p1nHQZJq5orfVCJDC3H9TB2JXPiwA=="
    }
  }, {
    "id" : "b8e32081-781a-4871-b7ec-c3d1fafce9ec",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"super_admin\",\"creditCode\":\"951002007l78123233\",\"mobile\":\"18912345678\",\"certNames\":[\"super_admin\"],\"unknownFields\":{\"fields\":{}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-14T16:05:42.414Z",
      "signature" : "MEUCIQDekXA+EV+96Pc9VHd4VjMGIMKnyr6brsDJJKtxPPZcVAIgOxmCl5MpUw220z7pUeS8qmkDAURZ9Gy388YbON31NZw="
    }
  }, {
    "id" : "c8abba25-81b6-4f78-b580-f6bb5968bce8",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"121000005l35120456\",\"name\":\"node1\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBTDCB9KADAgECAgRd7wBCMAoGCCqGSM49BAMCMC8xETAPBgNVBAoMCHJlcGNo\\r\\nYWluMQ4wDAYDVQQLDAVpc2NhczEKMAgGA1UEAwwBMTAeFw0xOTEyMTAwMjE3Mzha\\r\\nFw0yMDEyMDkwMjE3MzhaMC8xETAPBgNVBAoMCHJlcGNoYWluMQ4wDAYDVQQLDAVp\\r\\nc2NhczEKMAgGA1UEAwwBMTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABJu7PT4Z\\r\\ns5hqqNha9SrP60TecIDVYGry0v6ayV5lP8w5FJ2UtRECrpUxuoO2pfaHfxyYIXCZ\\r\\nA8w7YaZU0s4CEfcwCgYIKoZIzj0EAwIDRwAwRAIgcAxkxmiNexPx8CF+DvII7168\\r\\neeVcfsJwoMcFFLKCWrECICSIkc9vC6Vwze3s2UwBuIiSlwNxZ0YDJcdlbcmESWHy\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1618387542,\"nanos\":418000000,\"unknownFields\":{\"fields\":{}}},\"unknownFields\":{\"fields\":{}}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-14T16:05:42.449Z",
      "signature" : "MEUCIEwWvLZHAKwiaE8LhvdwClXrAKRdsE0D5J2EjzUgQ2rzAiEAyh8jB8xdAqXlryBFrwx5Kner+jn2IE4lII/qWZjTPy0="
    }
  }, {
    "id" : "99a7028a-f973-4cfa-b8bc-0c9aaa21ba71",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"12110107bi45jh675g\",\"name\":\"node2\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBTTCB9KADAgECAgRd7wDfMAoGCCqGSM49BAMCMC8xETAPBgNVBAoMCHJlcGNo\\r\\nYWluMQ4wDAYDVQQLDAVpc2NhczEKMAgGA1UEAwwBMjAeFw0xOTEyMTAwMjIwMTVa\\r\\nFw0yMDEyMDkwMjIwMTVaMC8xETAPBgNVBAoMCHJlcGNoYWluMQ4wDAYDVQQLDAVp\\r\\nc2NhczEKMAgGA1UEAwwBMjBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABIqbpyaG\\r\\nr7ST/JsS86YBzlG/S3WqyXBCk00OvUfGcynwJt8m0vUnj8Z5QxNtsTUtMilzVayn\\r\\nB7dVpeM1rFB/bGEwCgYIKoZIzj0EAwIDSAAwRQIhAKzfA6yHLF57HoEk+aVRCVpv\\r\\nvAvvQZuHKkYdzS7/TeXjAiBCtWh8sRO4kXjn9e8H0GHxmt+zQPHTr5UJt0b47BDB\\r\\nlg==\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1618387542,\"nanos\":452000000,\"unknownFields\":{\"fields\":{}}},\"unknownFields\":{\"fields\":{}}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-14T16:05:42.457Z",
      "signature" : "MEUCIQCiUvcJnD+7+CofaZzUzKwi4rvYMLeQR5fOJSXW3mQJWgIga+e1HEAwm9k4Z4t4LxpPcmPrjSeP8stZPS1v3tBDdCw="
    }
  }, {
    "id" : "cca4b88a-1574-4bda-a010-73641d8bc225",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"122000002n00123567\",\"name\":\"node3\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBTDCB9KADAgECAgRd7wElMAoGCCqGSM49BAMCMC8xETAPBgNVBAoMCHJlcGNo\\r\\nYWluMQ4wDAYDVQQLDAVpc2NhczEKMAgGA1UEAwwBMzAeFw0xOTEyMTAwMjIxMjVa\\r\\nFw0yMDEyMDkwMjIxMjVaMC8xETAPBgNVBAoMCHJlcGNoYWluMQ4wDAYDVQQLDAVp\\r\\nc2NhczEKMAgGA1UEAwwBMzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABHemUcIh\\r\\nMpmOiWcbw5BBorqD+0LHaBzYVyKeYj2Sk3HR1M/JIb3R40xHEQbJPdb3SrgClSt6\\r\\nLBiYiNENQBBJLw0wCgYIKoZIzj0EAwIDRwAwRAIgHX8epaHLqyPcNEj+fdD9zn/u\\r\\nj8juebSZq42IRBAYTm0CICy+hKIZyVkNxPjV3tR+k+DjaWrDFSio57VuBbD8Cwvx\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1618387542,\"nanos\":460000000,\"unknownFields\":{\"fields\":{}}},\"unknownFields\":{\"fields\":{}}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-14T16:05:42.463Z",
      "signature" : "MEQCIFt4P91pwN3vADBqmyy7ySvKt5HHFh/plW24RqdRXceYAiBise+PPZP8NMwUCD5RVCglBCKRnWPe+AZW3cv/SyKJmQ=="
    }
  }, {
    "id" : "84001dc4-9091-4d70-9fa3-116325560cdb",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"921000005k36123789\",\"name\":\"node4\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBTTCB9KADAgECAgRd7wFdMAoGCCqGSM49BAMCMC8xETAPBgNVBAoMCHJlcGNo\\r\\nYWluMQ4wDAYDVQQLDAVpc2NhczEKMAgGA1UEAwwBNDAeFw0xOTEyMTAwMjIyMjFa\\r\\nFw0yMDEyMDkwMjIyMjFaMC8xETAPBgNVBAoMCHJlcGNoYWluMQ4wDAYDVQQLDAVp\\r\\nc2NhczEKMAgGA1UEAwwBNDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABAjzZaK8\\r\\nUAvLLIpYgH3IVoezCK/sOz+BG1vb19BEdhbPJA/r1xBuDKG1DK9qIVSbAvfHrioH\\r\\nNiceJs6Mym9TgYcwCgYIKoZIzj0EAwIDSAAwRQIgcaGwPxUC//H+yQFRq16m9aZp\\r\\naYwh+NwRs1SQ9USC170CIQCgTXpMxcTbfsKWiPY7QsTGCHn/c0+XS3nVIR2FWno5\\r\\nBg==\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1618387542,\"nanos\":466000000,\"unknownFields\":{\"fields\":{}}},\"unknownFields\":{\"fields\":{}}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-14T16:05:42.468Z",
      "signature" : "MEYCIQCnhB1Gq7vU4Mx9EtyZNHvmibX0ItJI6O0Jie3q0c6ScAIhAPRIuaqZEMoIAvx6VCngKFWQBTXkLRK8CP0hbP5r0XaX"
    }
  }, {
    "id" : "3be97eaa-4ae0-4912-8425-0b0472fa275f",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"921000006e0012v696\",\"name\":\"node5\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBTTCB9KADAgECAgRd7wGTMAoGCCqGSM49BAMCMC8xETAPBgNVBAoMCHJlcGNo\\r\\nYWluMQ4wDAYDVQQLDAVpc2NhczEKMAgGA1UEAwwBNTAeFw0xOTEyMTAwMjIzMTVa\\r\\nFw0yMDEyMDkwMjIzMTVaMC8xETAPBgNVBAoMCHJlcGNoYWluMQ4wDAYDVQQLDAVp\\r\\nc2NhczEKMAgGA1UEAwwBNTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABNVDTgfE\\r\\nOQaHL8uQd6Zb4VqQQOuuz/f12zIKQ9QcMaRs87H1o3JBoydjUHSV6e60tXtHt1Ty\\r\\nvaswF9EfMooKpaYwCgYIKoZIzj0EAwIDSAAwRQIhAIHfXVE5IuR73YubAG2gvtZS\\r\\nBHb0TBNri/dYEiCTYP6JAiBBpr0Ssf468NQo74ZjpZmnPBQ88fQApE9RA5WGPAY0\\r\\niA==\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1618387542,\"nanos\":471000000,\"unknownFields\":{\"fields\":{}}},\"unknownFields\":{\"fields\":{}}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-14T16:05:42.474Z",
      "signature" : "MEUCIQCjdYHPG3t5xPW0Pfjv6DmFidkGoTgXknvY/Ga1LbwVWAIgKfvfsNHXo22CCqGGOfg3QFe51DsOHhNvUX4L1UDGL9g="
    }
  }, {
    "id" : "8dafea4f-d96c-4442-a4ae-ee8ef31f2eb6",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"951002007l78123233\",\"name\":\"super_admin\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIBYzCCAQigAwIBAgIEXe8B6zAKBggqhkjOPQQDAjA5MREwDwYDVQQKDAhyZXBj\\r\\naGFpbjEOMAwGA1UECwwFaXNjYXMxFDASBgNVBAMMC3N1cGVyX2FkbWluMB4XDTE5\\r\\nMTIxMDAyMjQ0M1oXDTIwMTIwOTAyMjQ0M1owOTERMA8GA1UECgwIcmVwY2hhaW4x\\r\\nDjAMBgNVBAsMBWlzY2FzMRQwEgYDVQQDDAtzdXBlcl9hZG1pbjBZMBMGByqGSM49\\r\\nAgEGCCqGSM49AwEHA0IABK9m+cb8jaYQ+ts/hK4INuQbOwAwoIhVa3uaRxsOsgoR\\r\\n+QaPuwcZAIbGWSa9bn8oGjSBDQutmE5XONbdiDwPRtwwCgYIKoZIzj0EAwIDSQAw\\r\\nRgIhAKZto+39OFced9YDaXYkOLrLcKD+8RbF57vzHpJrnFd1AiEAhNEK8MOsAlhM\\r\\neRZmlXsq4KsvQFs+Wav9N9qJ+GGRpCs=\\r\\n-----END CERTIFICATE-----\\r\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1618387542,\"nanos\":477000000,\"unknownFields\":{\"fields\":{}}},\"unknownFields\":{\"fields\":{}}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-14T16:05:42.481Z",
      "signature" : "MEYCIQCx/9U2Yf822OOGtLmGySfS4M/8GpzYj6qePJYPwN5FjAIhAJkdgafrTVohZN5dkFirB0iL1TjjP+PdBDmbJDfsYbqi"
    }
  }, {
    "id" : "bd63c350-11f8-40cc-808c-f616bf525084",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "ContractAssetsTPL",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "\r\n/*\r\n * Copyright  2019 Blockchain Technology and Application Joint Lab, Linkel Technology Co., Ltd, Beijing, Fintech Research Center of ISCAS.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BA SIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\npackage rep.sc.tpl\r\n\r\nimport org.json4s._\r\nimport org.json4s.jackson.JsonMethods._\r\nimport rep.app.conf.SystemProfile\r\nimport rep.protos.peer.ChaincodeId\r\nimport rep.utils.IdTool\r\nimport rep.sc.scalax.IContract\r\n\r\nimport rep.sc.scalax.ContractContext\r\nimport rep.sc.scalax.ContractException\r\nimport rep.protos.peer.ActionResult\r\n\r\n/**\r\n * 资产管理合约\r\n */\r\n\r\nfinal case class Transfer(from:String, to:String, amount:Int)\r\n\r\nclass ContractAssetsTPL extends IContract{\r\n\r\n  // 需要跨合约读账户\r\n  val chaincodeName = SystemProfile.getAccountChaincodeName\r\n  val chaincodeVersion = SystemProfile.getAccountChaincodeVersion \r\n  //val prefix = IdTool.getCid(ChaincodeId(chaincodeName, chaincodeVersion))\r\n\r\n  implicit val formats = DefaultFormats\r\n  \r\n    def init(ctx: ContractContext){      \r\n      println(s\"tid: $ctx.t.id\")\r\n    }\r\n    \r\n    def set(ctx: ContractContext, data:Map[String,Int]) :ActionResult={\r\n      println(s\"set data:$data\")\r\n      for((k,v)<-data){\r\n        ctx.api.setVal(k, v)\r\n      }\r\n      null\r\n    }\r\n    \r\n    def transfer(ctx: ContractContext, data:Transfer) :ActionResult={\r\n      if(!data.from.equals(ctx.t.getSignature.getCertId.creditCode))\r\n        throw ContractException(\"只允许从本人账户转出\")      \r\n      val signerKey =  data.to\r\n      // 跨合约读账户，该处并未反序列化\r\n      if(ctx.api.getStateEx(chaincodeName,data.to)==null)\r\n        throw ContractException(\"目标账户不存在\")\r\n      val sfrom:Any =  ctx.api.getVal(data.from)\r\n      var dfrom =sfrom.asInstanceOf[Int]\r\n      if(dfrom < data.amount)\r\n        throw ContractException(\"余额不足\")\r\n      ctx.api.setVal(data.from,dfrom - data.amount)\r\n      var dto = ctx.api.getVal(data.to).toString.toInt\r\n      ctx.api.setVal(data.to,dto + data.amount)\r\n       null\r\n    }\r\n\r\n    def put_proof(ctx: ContractContext, data:Map[String,Any]): ActionResult={\r\n    //先检查该hash是否已经存在,如果已存在,抛异常\r\n    for((k,v)<-data){\r\n      var pv0:Any = ctx.api.getVal(k)\r\n      if(pv0 != null)\r\n//        throw new Exception(\"[\"+k+\"]已存在，当前值[\"+pv0+\"]\");\r\n        throw ContractException(s\"$k 已存在，当前值为 $pv0\")\r\n      ctx.api.setVal(k,v)\r\n      print(\"putProof:\"+k+\":\"+v)\r\n    }\r\n      null\r\n  }\r\n\r\n  /**\r\n     * 根据action,找到对应的method，并将传入的json字符串parse为method需要的传入参数\r\n     */\r\n    def onAction(ctx: ContractContext,action:String, sdata:String ):ActionResult={\r\n      val json = parse(sdata)      \r\n      action match {\r\n        case \"transfer\" => \r\n          transfer(ctx,json.extract[Transfer])\r\n        case \"set\" => \r\n          set(ctx, json.extract[Map[String,Int]])\r\n        case \"putProof\" =>\r\n          put_proof(ctx, json.extract[Map[String,Any]])\r\n      }\r\n    }\r\n    \r\n}\r\n",
      "ctype" : "CODE_SCALA"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2021-04-14T16:05:42.485Z",
      "signature" : "MEYCIQDuZZhMEEq4LZMvVg8S86pvm/0IEg5qpn6MnvmGQWhVNwIhAIL6DfDpVwT2MY2Tko58tX9lsN/1bKMUWwdVs1aLzELg"
    }
  }, {
    "id" : "f1979bd6-678c-42dd-8d7d-f718b6b7149c",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractAssetsTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "set",
      "args" : [ "{\r\n  \"121000005l35120456\" : 10000000,\r\n  \"12110107bi45jh675g\" : 10000000,\r\n  \"122000002n00123567\" : 10000000,\r\n  \"921000005k36123789\" : 10000000,\r\n  \"921000006e0012v696\" : 10000000\r\n}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2021-04-14T16:05:42.490Z",
      "signature" : "MEUCICIBKz5ZJtx6Yh3nUjDGuncBSpFK2T+ZA/QsvfqBOYG8AiEAnHP2aRvCl2wJFCyuQvMdNoIad/S6Le+G7UaLFTX5Y9A="
    }
  }, {
    "id" : "1cd873d2-5f1f-472a-b29b-d7985fe03ad4",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "ManageNodeCert",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "/*\r\n * Copyright  2019 Blockchain Technology and Application Joint Lab, Linkel Technology Co., Ltd, Beijing, Fintech Research Center of ISCAS.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BA SIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\npackage rep.sc.tpl\r\n\r\nimport java.io.StringReader\r\n\r\nimport org.bouncycastle.util.io.pem.PemReader\r\nimport org.json4s._\r\nimport org.json4s.jackson.JsonMethods._\r\nimport rep.protos.peer.ActionResult\r\nimport rep.sc.scalax.{ContractContext, ContractException, IContract}\r\n\r\nimport scala.collection.mutable.HashMap\r\n\r\n\r\n/**\r\n  * @author zyf\r\n  */\r\nclass ManageNodeCert extends IContract {\r\n\r\n  val prefix = \"tsdb_\"\r\n\r\n  def init(ctx: ContractContext) {\r\n    println(s\"tid: ${ctx.t.id}, execute the contract which name is ${ctx.t.getCid.chaincodeName} and version is ${ctx.t.getCid.version}\")\r\n  }\r\n\r\n  /**\r\n    * 只能初始化一次\r\n    *\r\n    * @param ctx\r\n    * @param data\r\n    * @return\r\n    */\r\n  def initNodeCert(ctx: ContractContext, data: Map[String, String]): ActionResult = {\r\n    val certKey = prefix + ctx.t.getSignature.getCertId.creditCode\r\n    if (ctx.api.getVal(certKey) != null) {\r\n      throw ContractException(\"已经初始化了，请使用updateNodeCert来更新\")\r\n    }\r\n    // 初始化nodeCertMap\r\n    val certMap = HashMap[String, Array[Byte]]()\r\n    for ((alias, certPem) <- data) {\r\n      val pemReader = new PemReader(new StringReader(certPem))\r\n      val certBytes = pemReader.readPemObject().getContent\r\n      certMap.put(alias, certBytes)\r\n    }\r\n    ctx.api.setVal(certKey, certMap)\r\n    null\r\n  }\r\n\r\n  /**\r\n    *\r\n    * @param ctx\r\n    * @param data\r\n    * @return\r\n    */\r\n  def updateNodeCert(ctx: ContractContext, data: Map[String, String]): ActionResult = {\r\n    val certKey = prefix + ctx.t.getSignature.getCertId.creditCode\r\n    if (ctx.api.getVal(certKey) == null) {\r\n      throw ContractException(\"未始化了，请使用initNodeCert来初始化\")\r\n    }\r\n    val certMap = ctx.api.getVal(ctx.t.getSignature.getCertId.creditCode).asInstanceOf[HashMap[String, Array[Byte]]]\r\n    for ((alias, certPem) <- data) {\r\n      val pemReader = new PemReader(new StringReader(certPem))\r\n      val certBytes = pemReader.readPemObject().getContent\r\n      certMap.put(alias, certBytes)\r\n    }\r\n    ctx.api.setVal(certKey, certMap)\r\n    null\r\n  }\r\n\r\n  /**\r\n    * 根据action,找到对应的method，并将传入的json字符串parse为method需要的传入参数\r\n    */\r\n  def onAction(ctx: ContractContext, action: String, sdata: String): ActionResult = {\r\n\r\n    implicit val formats = DefaultFormats\r\n    val json = parse(sdata)\r\n\r\n    action match {\r\n      case \"initNodeCert\" =>\r\n        initNodeCert(ctx, json.extract[Map[String, String]])\r\n      case \"updateNodeCert\" =>\r\n        updateNodeCert(ctx, json.extract[Map[String, String]])\r\n    }\r\n  }\r\n\r\n}\r\n",
      "ctype" : "CODE_SCALA"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2021-04-14T16:05:42.492Z",
      "signature" : "MEUCIQCpV6YiPAqo++w1uflI/oxrPOnPezrc6kZ59Vk06wBhcwIgKJnGHnToOZsObyUctBLl5yoX9xDgHi1h7GPbi5ZFKhY="
    }
  } ]
}